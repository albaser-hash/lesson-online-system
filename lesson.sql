/*
 Navicat Premium Dump SQL

 Source Server         : amd
 Source Server Type    : MySQL
 Source Server Version : 80033 (8.0.33)
 Source Host           : localhost:3306
 Source Schema         : lesson

 Target Server Type    : MySQL
 Target Server Version : 80033 (8.0.33)
 File Encoding         : 65001

 Date: 11/07/2025 19:36:14
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for cart_items
-- ----------------------------
DROP TABLE IF EXISTS `cart_items`;
CREATE TABLE `cart_items`  (
  `cart_item_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `course_id` int NOT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`cart_item_id`) USING BTREE,
  UNIQUE INDEX `uk_user_course`(`user_id` ASC, `course_id` ASC) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE,
  INDEX `course_id`(`course_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of cart_items
-- ----------------------------

-- ----------------------------
-- Table structure for course
-- ----------------------------
DROP TABLE IF EXISTS `course`;
CREATE TABLE `course`  (
  `course_id` int NOT NULL AUTO_INCREMENT,
  `course_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `course_desc` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `category_id` int NULL DEFAULT NULL,
  `teacher_id` int NULL DEFAULT NULL,
  `price` decimal(10, 2) NOT NULL,
  `original_price` decimal(10, 2) NULL DEFAULT NULL,
  `cover_image` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `student_count` int NULL DEFAULT 0,
  `score` tinyint UNSIGNED NULL DEFAULT 0,
  `course_tags` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `audit_status` enum('PENDING','APPROVED','REJECTED') CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'PENDING',
  `audit_message` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`course_id`) USING BTREE,
  INDEX `category_id`(`category_id` ASC) USING BTREE,
  INDEX `teacher_id`(`teacher_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 35 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of course
-- ----------------------------
INSERT INTO `course` VALUES (3, 'Python入门与实战', '系统学习Python基础与项目实战，适合零基础同学。', 2, 4, 99.00, 199.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216555056_python入门与实战.png', 0, 100, 'Python,编程,基础', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (4, 'Java核心技术！', '深入掌握Java面向对象、集合、并发等核心技术。', 3, 4, 129.00, 229.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216575164_Java 核心技术.png', 0, 100, 'Java,后端,面向对象', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (5, 'Web前端开发', 'HTML、CSS、JavaScript全栈前端开发实战。', 4, 4, 109.00, 209.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216593322_WEB前端开发.png', 0, 100, '前端,HTML,CSS,JavaScript', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (6, 'C语言程序设计', 'C语言基础、指针、算法与数据结构全覆盖。', 1, 4, 89.00, 189.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216650916_abc.png', 0, 100, 'C语言,算法,数据结构', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (7, '算法与数据结构', '刷题+讲解，提升编程算法能力，面试必备。', 1, 4, 119.00, 219.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216670248_算法与数据结构.png', 0, 100, '算法,数据结构,LeetCode', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (8, 'Vue.js项目实战', '从零开发完整Vue.js前端项目，掌握主流框架。', 1, 4, 99.00, 199.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216694564_Vue.js项目实战.png', 0, 100, 'Vue,前端,项目实战', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (9, 'MySQL数据库开发', 'MySQL基础、SQL优化、事务与索引全掌握。', 1, 4, 89.00, 189.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216706376_MySQL数据库开发.png', 0, 100, 'MySQL,数据库,SQL', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (10, 'Linux运维与Shell编程', 'Linux基础、常用命令、Shell脚本自动化。', 1, 4, 79.00, 179.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216721921_Linux运维与Shell编程.png', 0, 100, 'Linux,Shell,运维', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (11, 'JavaScript进阶与ES6', '深入理解JS异步、闭包、ES6新特性。', 1, 4, 99.00, 199.00, 'js.jpg', 0, 80, 'JavaScript,ES6,前端', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (12, 'Spring Boot微服务开发', '企业级Spring Boot微服务项目开发实战。', 1, 4, 139.00, 239.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216731941_Spring Boot微服务开发.png', 0, 100, 'Spring Boot,微服务,Java', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (13, 'Go语言入门与实战', 'Go语言基础、并发编程与Web开发。', 2, 4, 109.00, 209.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216744501_Go语言入门与实战.png', 0, 100, 'Go,后端,并发', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (14, 'React全栈开发', 'React+Node.js全栈项目开发实战。', 1, 4, 119.00, 219.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216774386_React全栈开发.png', 0, 100, 'React,Node.js,全栈', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (15, 'Node.js开发实战', 'Node.js服务端开发与API设计。', 2, 4, 99.00, 199.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752228772145_2.png', 0, 100, 'Node.js,后端,API', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (16, '数据分析与爬虫', 'Python数据分析、可视化与网络爬虫。', 1, 4, 109.00, 209.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752228860449_3.png', 0, 100, 'Python,数据分析,爬虫', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (17, '人工智能基础', '机器学习、深度学习与AI项目实战。', 3, 4, 149.00, 249.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752228632860_1.png', 0, 100, 'AI,机器学习,深度学习', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (18, '小程序开发', '微信小程序开发全流程实战。', 1, 4, 89.00, 189.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216759097_小程序开发.png', 0, 100, '小程序,微信,前端', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (19, '云计算与Docker', '云原生、Docker容器与微服务部署。', 1, 4, 129.00, 229.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752228951103_5.png', 0, 100, '云计算,Docker,微服务', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (20, '网络安全编程', 'Web安全、渗透测试与安全编程。', 2, 4, 119.00, 219.00, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752229006729_6.png', 0, 100, '安全,渗透测试,Web', 'APPROVED', '审核通过', '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (21, '算法竞赛训练营', 'NOIP/ACM算法竞赛系统训练。', 3, 4, 139.00, 239.00, 'acm.jpg', 0, 100, '算法,竞赛,刷题', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (22, 'C++高性能编程', 'C++11/14/17新特性与高性能开发。', 2, 4, 129.00, 229.00, 'cpp.jpg', 0, 100, 'C++,高性能,新特性', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (23, 'Kotlin安卓开发', 'Kotlin+Android移动开发实战。', 1, 4, 109.00, 209.00, 'kotlin.jpg', 0, 100, 'Kotlin,Android,移动开发', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (24, 'TypeScript进阶', 'TypeScript类型系统与大型项目实战。', 1, 4, 99.00, 199.00, 'ts.jpg', 0, 100, 'TypeScript,前端,类型', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (25, 'Redis缓存技术', 'Redis原理、集群与高并发缓存实战。', 3, 4, 89.00, 189.00, 'redis.jpg', 0, 100, 'Redis,缓存,高并发', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (26, 'Flutter跨平台开发', 'Flutter+Dart移动应用开发。', 3, 4, 119.00, 219.00, 'flutter.jpg', 0, 100, 'Flutter,Dart,移动开发', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (27, '大数据Hadoop入门', 'Hadoop生态与大数据处理基础。', 1, 4, 139.00, 239.00, 'hadoop.jpg', 0, 100, '大数据,Hadoop,数据处理', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (28, 'Rust系统编程', 'Rust语言基础与系统级开发。', 2, 4, 109.00, 209.00, 'rust.jpg', 0, 100, 'Rust,系统编程,安全', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (29, '前端自动化测试', 'Jest、Cypress等前端测试框架实战。', 1, 4, 99.00, 199.00, 'test.jpg', 0, 100, '测试,前端,Jest', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (30, 'PHP全栈开发', 'PHP+MySQL+前端全栈项目开发。', 3, 4, 89.00, 189.00, 'php.jpg', 0, 100, 'PHP,全栈,后端', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (31, 'Swift iOS开发', 'Swift语言与iOS应用开发实战。', 3, 4, 119.00, 219.00, 'swift.jpg', 0, 100, 'Swift,iOS,移动开发', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (32, '区块链与以太坊', '区块链原理、以太坊智能合约开发。', 2, 4, 149.00, 249.00, 'blockchain.jpg', 0, 100, '区块链,以太坊,智能合约', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (33, '前端工程化', 'Webpack、Vite等前端工程化实践。', 2, 4, 109.00, 209.00, 'webpack.jpg', 0, 100, '前端,工程化,Webpack', 'APPROVED', NULL, '2025-07-05 02:04:32');
INSERT INTO `course` VALUES (34, '测试', '测试', 7, 5, 1.00, 2.00, 'https://pc.wmakh.top:9881/edu/images/1751722932680_c.jpg', 0, 0, NULL, 'REJECTED', '啥都没有啊！', '2025-07-05 21:42:14');

-- ----------------------------
-- Table structure for course_attachments
-- ----------------------------
DROP TABLE IF EXISTS `course_attachments`;
CREATE TABLE `course_attachments`  (
  `attachment_id` int NOT NULL AUTO_INCREMENT,
  `chapter_id` int NOT NULL,
  `file_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `file_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `file_size` bigint NULL DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`attachment_id`) USING BTREE,
  INDEX `chapter_id`(`chapter_id` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of course_attachments
-- ----------------------------

-- ----------------------------
-- Table structure for course_categories
-- ----------------------------
DROP TABLE IF EXISTS `course_categories`;
CREATE TABLE `course_categories`  (
  `category_id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `category_desc` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  PRIMARY KEY (`category_id`) USING BTREE,
  UNIQUE INDEX `category_name`(`category_name` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of course_categories
-- ----------------------------
INSERT INTO `course_categories` VALUES (1, '编程语言', '各类编程语言课程');
INSERT INTO `course_categories` VALUES (2, '数据分析', '数据分析相关课程');
INSERT INTO `course_categories` VALUES (3, '设计创意', '设计与创意类课程');
INSERT INTO `course_categories` VALUES (4, 'Web开发', '前端与后端Web开发技术课程');
INSERT INTO `course_categories` VALUES (5, '移动开发', 'Android、iOS等移动应用开发课程');
INSERT INTO `course_categories` VALUES (6, '人工智能', '机器学习、深度学习等AI技术课程');
INSERT INTO `course_categories` VALUES (7, '云计算', '云平台与服务相关课程');
INSERT INTO `course_categories` VALUES (8, '网络安全', '信息安全与网络防护技术课程');

-- ----------------------------
-- Table structure for course_chapters
-- ----------------------------
DROP TABLE IF EXISTS `course_chapters`;
CREATE TABLE `course_chapters`  (
  `chapter_id` int NOT NULL AUTO_INCREMENT,
  `course_id` int NOT NULL,
  `chapter_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `order_num` int NOT NULL,
  `content_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'VIDEO' COMMENT '内容类型：VIDEO/ DOCUMENT',
  `is_free` tinyint(1) NULL DEFAULT 0,
  `video_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `video_duration` time NULL DEFAULT NULL,
  `video_size` bigint NULL DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `doc_json` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '文档每页内容大JSON，结构如{\"pages\":[{\"page\":1,\"content\":\"...\"},...],\"totalPages\":10}',
  `teacher_id` int NOT NULL DEFAULT 0 COMMENT '课程教师ID',
  PRIMARY KEY (`chapter_id`) USING BTREE,
  INDEX `course_id`(`course_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 32 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of course_chapters
-- ----------------------------
INSERT INTO `course_chapters` VALUES (14, 3, 'python_3.1官方入门指南', 1, 'DOCUMENT', 1, 'documents/1752218045875_python_3.1官方入门指南中文版.pdf', '00:10:00', 13467, '2025-07-11 15:14:05', '{\"pages\":[{\"page\":1,\"content\":\"1\\r\\nPython 3.1\\r\\n入\\r\\n门\\r\\n指\\r\\n南\\r\\n羲庭父 / 整理\\r\\n(并非我翻译，仅作整理，以便传看）\\r\\nBlog:www.u1u5.cc\\r\\nMsn:ct100@live.cn\\r\\nE-mail:ct100@live.cn\\r\\n\"},{\"page\":2,\"content\":\"2\\r\\n目 录\\r\\n1. 开胃菜....................................................................................................................4\\r\\n2. 使用 Python 解释器..............................................................................................5\\r\\n2.1. 调用 Python 解释器...................................................................................5\\r\\n2.1.1. 参数传递.................................................................................................6\\r\\n2.1.2. 交互模式.................................................................................................6\\r\\n2.2. 解释器及其环境.........................................................................................6\\r\\n2.2.1. 错误处理.................................................................................................6\\r\\n2.2.2. 执行 Python 脚本...................................................................................7\\r\\n2.2.3. 源代码编码.............................................................................................7\\r\\n2.2.4. 交互执行文件.........................................................................................7\\r\\n3. Python 简介...........................................................................................................8\\r\\n3.1. 将 Python 用作计算器...............................................................................8\\r\\n3.1.1. 数字.........................................................................................................9\\r\\n3.1.2. 字符串...................................................................................................11\\r\\n3.1.3. 关于 Unicode........................................................................................15\\r\\n3.1.4. 列表.......................................................................................................15\\r\\n3.2. 迈向编程的第一步...................................................................................17\\r\\n4. 深入 Python 流程控制........................................................................................18\\r\\n4.1. if Statements if 语句...........................................................................18\\r\\n4.2. for 语句...................................................................................................18\\r\\n4.3. range() 函数...........................................................................................19\\r\\n4.4. break 和 continue 语句，以及循环的 else 子句...........................20\\r\\n4.5. pass 语句.................................................................................................21\\r\\n4.6. 定义函数...................................................................................................21\\r\\n4.7. 深入 Python 函数定义.............................................................................23\\r\\n4.7.1. 默认参数值...........................................................................................23\\r\\n4.7.2. 关键字参数...........................................................................................24\\r\\n4.7.3. 可变参数列表.......................................................................................26\\r\\n4.7.4. 拆分参数列表.......................................................................................26\\r\\n4.7.5. Lambda 方式..........................................................................................27\\r\\n4.7.6. 文档字符串...........................................................................................27\\r\\n4.8. PS：编码风格...........................................................................................27\\r\\n5. 数据结构..............................................................................................................28\\r\\n5.1. 深入列表...................................................................................................28\\r\\n5.1.1. 用列表实现堆栈...................................................................................29\\r\\n5.1.2. 用列表实现队列...................................................................................30\\r\\n5.1.3. 列表推导式...........................................................................................30\\r\\n5.1.4. 嵌套列表推导式...................................................................................31\\r\\n5.2. del 语句...................................................................................................32\\r\\n\"},{\"page\":3,\"content\":\"3\\r\\n5.3. 元组和序列...............................................................................................32\\r\\n5.4. 集合...........................................................................................................33\\r\\n5.5. 字典...........................................................................................................34\\r\\n5.6. 遍历技巧...................................................................................................35\\r\\n5.7. 深入条件控制...........................................................................................37\\r\\n5.8. 比较序列和其他类型...............................................................................37\\r\\n6. 模块......................................................................................................................38\\r\\n6.1. 深入 Python 模块.....................................................................................39\\r\\n6.1.1. Executing modules as scripts 像脚本一样执行模块...................39\\r\\n6.1.2. The Module Search Path 模块的搜索路径.......................................40\\r\\n6.1.3. “Compiled” Python files “编译的”Python 文件....................40\\r\\n6.2. Standard Modules 标准模块...................................................................41\\r\\n6.3. dir() 函数...............................................................................................41\\r\\n6.4. 包...............................................................................................................43\\r\\n6.4.1. 从一个包中导入 *...............................................................................44\\r\\n6.4.2. 包内引用...............................................................................................45\\r\\n6.4.3. 跨目录的包...........................................................................................45\\r\\n7. 输入输出..............................................................................................................45\\r\\n7.1. 格式化输出...............................................................................................45\\r\\n7.1.1. 旧式字符窜格式化.................................................................................49\\r\\n7.2. 文件读写...................................................................................................49\\r\\n7.2.1. 文件对象的方法...................................................................................49\\r\\n7.2.2. `pickle`模块.........................................................................................51\\r\\n8. 错误和异常..........................................................................................................52\\r\\n8.1. 语法错误...................................................................................................52\\r\\n8.2. 异常...........................................................................................................52\\r\\n8.3. 异常处理...................................................................................................53\\r\\n8.4. 抛出异常.....................................................................................................55\\r\\n8.5. 用户自定义异常.......................................................................................55\\r\\n8.6. 定义清理动作...........................................................................................57\\r\\n8.7. 预定义的清理动作...................................................................................58\\r\\n9. 类..........................................................................................................................58\\r\\n9.1. 术语相关...................................................................................................59\\r\\n9.2. 作用域和命名空间.....................................................................................59\\r\\n9.2.1. 作用域和命名空间示例.......................................................................60\\r\\n9.3. 初识类.......................................................................................................61\\r\\n9.3.1. 类定义语法...........................................................................................61\\r\\n9.3.2. 类对象...................................................................................................61\\r\\n9.3.3. 实例对象...............................................................................................62\\r\\n9.4. 一些说明.....................................................................................................63\\r\\n9.5. 继承...........................................................................................................64\\r\\n9.5.1. 多重继承...............................................................................................65\\r\\n9.6. 私有变量...................................................................................................66\\r\\n9.7. 备注...........................................................................................................66\\r\\n\"},{\"page\":4,\"content\":\"4\\r\\n9.8. 异常也是类.................................................................................................67\\r\\n9.9. 迭代器.......................................................................................................67\\r\\n9.10. 生成器.....................................................................................................69\\r\\n9.11. 生成器表达式...........................................................................................69\\r\\n10. Python 标准库概览...........................................................................................70\\r\\n10.1. 操作系统接口.........................................................................................70\\r\\n10.2. 文件通配符.............................................................................................71\\r\\n10.3. 命令行参数.............................................................................................71\\r\\n10.4. 错误输出重定向和程序终止.................................................................71\\r\\n10.5. 字符串模式匹配.....................................................................................71\\r\\n10.6. 数学.........................................................................................................72\\r\\n10.7. 互联网访问.............................................................................................72\\r\\n10.8. 日期和时间.............................................................................................73\\r\\n10.9. 数据压缩.................................................................................................73\\r\\n10.10. 性能评测...............................................................................................73\\r\\n10.11. 质量控制.................................................................................................74\\r\\n10.12. “瑞士军刀”.........................................................................................74\\r\\n11. 标准库概览 — 第二部分..................................................................................75\\r\\n11.1. 输出格式化.............................................................................................75\\r\\n11.2. 模板.........................................................................................................76\\r\\n11.3. 使用二进制数据记录布局.....................................................................77\\r\\n11.4. 多线程.....................................................................................................77\\r\\n11.5. 日志.........................................................................................................78\\r\\n11.6. 弱引用.....................................................................................................79\\r\\n11.7. 列表工具.................................................................................................79\\r\\n11.8. 十进制浮点数计算...................................................................................80\\r\\n12. 现在做什么呢？................................................................................................81\\r\\n13. 交互的输入编辑和历史记录............................................................................82\\r\\n13.1. 行编辑.......................................................................................................82\\r\\n13.2. 历史记录...................................................................................................82\\r\\n13.3. 键绑定.....................................................................................................83\\r\\n13.4. 注释.........................................................................................................84\\r\\n\"},{\"page\":5,\"content\":\"5\\r\\n入门指南\\r\\nRelease: 3.1\\r\\nDate: September 05, 2009\\r\\nPython是一门简单易学且功能强大的编程语言。它拥有高效的高级数据结构，并且能\\r\\n够用简单而又高效的方式进行面向对象编程。 Python优雅的语法和动态类型，再结合它的\\r\\n解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。\\r\\n你可以自由的从 Python官方点，http://www.python.org，以源代码或二进制形式获取\\r\\nPython解释器及其标准扩展库，并可以自由的分发。此站点同时也提供了大量的第三方\\r\\nPython模块、程序和工具，及其附加文档。\\r\\n你可以很容易的使用 C或 C++（其他可以通过 C调用的语言）为 Python解释器扩展新\\r\\n函数和数据类型。 Python还可以被用作定制应用程式的一门扩展语言。\\r\\n本手册非正式的向读者介绍了 Python语言及其体系相关的基本知识与概念。在学习实\\r\\n践中结合使用 Python解释器是很有帮助的，不过所有的例子都是完整的，所以本手册亦可\\r\\n离线阅读。\\r\\n如果需要了解相关标准库或对象的详细介绍，请查阅 Python库参考文档。 Python参\\r\\n考手册提供了更多语言相关的正式说明。如果想要使用 C或 C++编写扩展，请查阅 Python\\r\\n解释器扩展和集成章节或 Python/C API参考手册。当然也可阅读一些深入介绍 Python知识\\r\\n的图书。\\r\\n本手册不会尝试涵盖 Python的全部知识和每个特性，甚至不会涵盖所有常用的特性。\\r\\n相反的，它介绍了 Python中许多最引人瞩目的特性，并且会给你一个关于语言特色和风格\\r\\n的认识。读完之后，你将能够阅读和编写 Python模块或程序，并为以后使用 Python库参\\r\\n考手册继续学习诸多 Python模块库做好准备。\\r\\n1. 开胃菜\\r\\n如果你要用计算机做很多工作，最后你会发现有一些任务你更希望用自动化的方式进行\\r\\n处理。比如，你想要在大量的文本文件中执行查找/替换，或者以复杂的方式对大量的图片\\r\\n进行重命名和整理。也许你想要编写一个小型的自定义数据库、一个特殊的 GUI应用程式\\r\\n或一个简单的小游戏。\\r\\n如果你是一名专业的软件开发者，可能你必须使用几种 C/C++/JAVA类库，并且发现\\r\\n通常编写/编译/测试/重新编译的周期是如此漫长。也许你正在为这些类库编写测试用例，\\r\\n但是发现这是一个让人烦躁的工作。又或者你已经完成了一个可以使用扩展语言的程式，但\\r\\n你并不想为此重新设计并实现一套全新的语言。\\r\\n那么 Python正是你所需要的语言。\\r\\n虽然你能够通过编写 Unix shell脚本或Windows批处理文件来处理其中的某些任务，\\r\\n但 Shell脚本更适合移动文件或修改文本数据，并不适合编写 GUI应用程序或游戏；虽然你\\r\\n能够使用 C/C++/JAVA编写程序，但即使编写一个简单的 first-draft 程序也有可能耗费大\\r\\n量的开发时间。相比之下，Python更易于使用，无论在 Windows、Mac OS X或 Unix操作\\r\\n系统上它都会帮助你更快的完成任务。\\r\\n虽然 Python易于使用，但它却是一门完整的编程语言；与 Shell脚本或批处理文件相\\r\\n比，它为编写大型程序提供了更多的结构和支持。另一方面，Python提供了比 C更多的错\\r\\n\"},{\"page\":6,\"content\":\"6\\r\\n误检查，并且作为一门 高级语言 ，它内置支持高级的数据结构类型，例如：灵活的数组和\\r\\n字典。因其更多的通用数据类型，Python比 Awk甚至 Perl都适用于更的多问题领域，至少\\r\\n大多数事情在 Python中与其他语言同样简单。\\r\\nPython允许你将程序分割为不同的模块，以便在其他的 Python程序中重用。 Python\\r\\n内置提供了大量的标准模块，你可以将其用作程序的基础，或者作为学习 Python编程的示\\r\\n例。这些模块提供了诸如文件 I/O、系统调用、sockets支持，甚至类似 Tk的用户图形界面\\r\\n（GUI）工具包接口。\\r\\nPython是一门解释型语言，因为无需编译和链接，你可以在程式开发中节省宝贵的时\\r\\n间。 Python解释器可以交互的使用，这使得试验语言的特性、编写临时程序或在自底向上\\r\\n的程序开发中测试方法非常容易。你甚至还可以把它当做一个桌面计算器。\\r\\nPython让程序编写的紧凑和可读。用 Python编写的程式通常比同样的 C、C++或 Java\\r\\n程式更短小，这是因为以下几个原因：\\r\\n高级数据结构使你可以在一条语句中表达复杂的操作；\\r\\n语句组使用缩进代替开始和结束大括号来组织；\\r\\n变量或参数无需声明。\\r\\nPython是“可扩展”的：如果你会 C语言编程便可以轻易的为解释器添加内置函数或模\\r\\n块，或者为了对性能瓶颈作优化，或者将 Python程序与只有二进制形式的库（比如某个专\\r\\n业的商业图形库）连接起来。一旦你真正掌握了它，你可以将 Python解释器集成进某个 C\\r\\n应用程序，并把它当做那个程序的扩展或命令行语言。\\r\\n顺便说一句，这个语言的名字来自于 BBC的“Monty Python’s Flying Cirecus”节目，和\\r\\n爬行类动物没有任何关系。在文档中引用 Monty Python的典故不仅可行，而且值得鼓励！\\r\\n现在你已经为 Python兴奋不已了吧，大概想要领略一些更多的细节！学习一门语言最\\r\\n好的方法就是使用它，本指南推荐你边读边使用 Python解释器练习。\\r\\n下一节中，我们将解释 Python解释器的用法。这是很简单的一件事情，但它有助于试\\r\\n验后面的例子。\\r\\n本手册剩下的部分将通过示例介绍 Python语言及系统的诸多特性，开始是简单的语法、\\r\\n数据类型和表达式，接着介绍函数与模块，最后涉及异常和自定义类这样的高级内容。\\r\\n2. 使用 Python解释器\\r\\n2.1. 调用 Python解释器\\r\\nPython 解释器通常被安装在目标机器的 /usr/local/bin/python3.1 目录下。将\\r\\n/usr/local/bin 目录包含进 Unix shell的搜索路径里，以确保可以通过输入:\\r\\npython3.1\\r\\n命令来启动他。 [2] 由于 Python解释器的安装路径是可选的，这也可能是其他路径，\\r\\n你可以联系安装 Python的用户或系统管理员确认。（例如， /usr/local/python 就是一个常见\\r\\n的选择）\\r\\n在Windows机器上，Python通常安装在 C:\\\\Python31 位置，当然你可以在运行安装向\\r\\n导时修改此值。要想把此目录添加到你的 PATH环境变量中，你可以在 DOS窗口中输入以\\r\\n下命令:\\r\\nset path=%path%;C:\\\\python31\\r\\n\"},{\"page\":7,\"content\":\"7\\r\\n通常你可以在主窗口输入一个文件结束符（Unix系统是 Control-D ，Windows系统是\\r\\nControl-Z ）让解释器以0状态码退出。如果那没有作用，你可以通过输入 import sys; sys.exit()\\r\\n命令退出解释器。\\r\\nPython解释器具有简单的行编辑功能。在 Unix系统上，任何 Python解释器都可能已\\r\\n经添加了 GNU readline库支持，这样就具备了精巧的交互编辑和历史记录等功能。在 Python\\r\\n主窗口中输入 Control-P可能是检查是否支持命令行编辑的最简单的方法。如果发出嘟嘟声\\r\\n（计算机扬声器），则说明你可以使用命令行编辑功能；更多快捷键的介绍请参考\\r\\nInteractive Input Editing and History Substitution 交互的输入编辑和历史记录 。如果没有\\r\\n任何声音，或者显示 ^P 字符，则说明命令行编辑功能不可用；你只能通过退格键\\r\\n（backspace）从当前行删除已键入的字符并重新输入。\\r\\nPython解释器有些操作类似 Unix shell：当使用终端设备（tty）作为标准输入调用时，\\r\\n它交互的解释并执行命令；当使用文件名参数或以文件作为标准输入调用时，它读取文件并\\r\\n将文件作为 脚本 执行。\\r\\n第二中启动 Python解释器的方法是 python -c command [arg] ... ，这种方法可以在 命\\r\\n令行 执行 Python语句，类似于 shell中的 -c 选项。由于 Python语句通常会包含空格或其\\r\\n他特殊 shell字符，一般建议将 命令 用单引号包裹起来。\\r\\n有一些 Python模块也可以当作脚本使用。你可以使用 python -m module [arg] ... 命令\\r\\n调用它们，这类似在命令行中键入完整的路径名执行 模块 源文件一样。\\r\\n注意 python file 和 python <file 是不同的：对于后一种情况，程序期望从 文件 中获\\r\\n得输入，类似调用 sys.stdin.read() 。因为在程序执行前解释器已经读取了全部文件内容，\\r\\n所以程序将指向文件尾；前一种情况（通常是你期望的）它们可以是任何连接到 Python解\\r\\n释器标准输入的文件或设备。\\r\\n在使用脚本时，有时希望在运行脚本后能进入交互模式。这可以通过在脚本前传递 -i\\r\\n参数来实现。（如果脚本需要从标准输入获取数据这样就没有作用，原因如前所述。）\\r\\n2.1.1. 参数传递\\r\\n运行解释器时，脚本名和其后附带的参数通过字符窜列表变量 sys.argv 传递给脚本。\\r\\n如果没有传递脚本和任何参数时，它至少有一个空字符串元素 sys.argv[0] 。当脚本名为 \'-\'\\r\\n（意指标准输入）时， sys.argv[0] 的值为 \'-\' 。当使用 -c 命令 时， sys.argv[0] 的值为\\r\\n\'-c\' 。当使用 -m 模块 时， sys.argv[0] 的值为完整的模块地址名。在 -c 命令 或 -m 模\\r\\n块 之后的命令选项不会被 Python解释器的选项处理器所截获，而是保存在 sys.argv 中供\\r\\n命令或模块处理。\\r\\n2.1.2. 交互模式\\r\\n当从终端（tty）读取命令时，我们称 Python解释器工作在 交互模式 中。在此模式下\\r\\n它通过 主提示符 提示下一个命令，通常为三个大于号（ >>> ）；对于连续的行通过 次提\\r\\n示符 提示，默认为三个点号（ ... ）。解释器在第一行提示符之前会输出一条欢迎信息说明\\r\\n它的版本号和版权提示.\\r\\n$ python3.1\\r\\nPython 3.1a1 (py3k, Sep 12 2007, 12:21:02)\\r\\n[GCC 3.4.6 20060404 (Red Hat 3.4.6-8)] on linux2\\r\\nType \\\"help\\\", \\\"copyright\\\", \\\"credits\\\" or \\\"license\\\" for more information.\\r\\n>>>\\r\\n当输入一个多行结构时，必须保证是连续的行。例如下面这个 if 语句:\\r\\n>>>the_world_is_flat = 1\\r\\n\"},{\"page\":8,\"content\":\"8\\r\\n>>>if the_world_is_flat:\\r\\n... print(\\\"Be careful not to fall off!\\\")\\r\\n...\\r\\nBe careful not to fall off!\\r\\n2.2. 解释器及其环境\\r\\n2.2.1. 错误处理\\r\\n在错误发生时，Python解释器会打印出错误信息及其栈跟踪信息。在交互模式下，它\\r\\n将返回主提示符；如果是从文件输入，它将在打印出栈跟踪信息后以非零状态退出。（ try 语\\r\\n句中的 except 从句处理的异常不属于此类错误。）一些错误是致命的并且会导致非零状态\\r\\n退出，这通常是由内部冲突或内存溢出所导致。所有的错误信息都会被写进标准错误流中，\\r\\n命令行中的普通输出被写进标准输出中。\\r\\n在主提示符或从提示符下输入中断字符（通常是 Control-C或 DEL）就会取消输入并回\\r\\n到主提示符。\\r\\n[4]在执行命令时输入中断字符将抛出 KeyboardInterrupt 异常，你可以通过 try 语句捕\\r\\n获。\\r\\n2.2.2. 执行 Python脚本\\r\\n#! /usr/bin/env python3.1\\r\\n在 BSD类 Unix系统中，只要在 Python脚本首行输入以下文本行（要确认 Python解释\\r\\n器路径包含在用户 PATH 变量中）并赋予文件可执行权限就能使其像 Shell脚本一样直接\\r\\n运行:\\r\\n#! /usr/bin/env python3.1\\r\\n#! 必须是文件的前两个字符。在某些平台上，首行必须以 Unix行结束符（ \'\\\\n\' ）结束，\\r\\n而不能是Windows行结束符（ \'\\\\r\\\\n\' ）。注意 \'#\' 符号是 Python注释的起始符。\\r\\n可以通过 chmod 命令给 Python脚本指定可执行模式或权限:\\r\\n$ chmod +x myscript.py\\r\\n在Windows系统上，并没有“执行模式”的概念。 Python安装程序会用 python.exe 自\\r\\n动关联 .py 文件，当双击某个 Python文件时就可以将其作为脚本运行了。文件扩展名也可\\r\\n以是 .pyw ，在这种情况下，通常出现的终端窗口将被禁用。\\r\\n2.2.3. 源代码编码\\r\\n默认情况下，Python源文件是 UTF-8编码。在此编码下，全世界大多数语言的字符可\\r\\n以同时用在字符串、标识符和注释中 — 尽管 Python标准库仅使用 ASCII字符做为标识符，\\r\\n这只是任何可移植代码应该遵守的约定。如果要正确的显示所有的字符，你的编辑器必须能\\r\\n识别出文件是 UTF-8编码，并且它使用的字体能支持文件中所有的字符。\\r\\n你也可以为源文件指定不同的字符编码。为此，在 #! 行（首行）后插入至少一行特殊\\r\\n的注释行来定义源文件的编码。\\r\\n# -*- coding: encoding -*-\\r\\n通过此声明，源文件中所有的东西都会被当做用 encoding 指代的 UTF-8编码对待。在\\r\\n\"},{\"page\":9,\"content\":\"9\\r\\nPython库参考手册 codecs 一节中你可以找到一张可用的编码列表。\\r\\n# -*- coding: cp-1252 -*-\\r\\n例如，如果你的编辑器不支持 UTF-8编码的文件，但支持像Windows-1252的其他一些\\r\\n编码，你可以定义：\\r\\n# -*- coding: cp-1252 -*-\\r\\n这样就可以在源文件中使用Windows-1252字符集中的所有字符了。这个特殊的编码注\\r\\n释必须在文件中的 第一或第二 行定义。\\r\\n2.2.4. 交互执行文件\\r\\n当你交互使用 Python时，通常在每次 Python解释器启动后都需要执行一些标准的命\\r\\n令。你可以设定一个名为 PYTHONSTARTUP 的环境变量指向包含以上命令的文件名来做\\r\\n这些工作。这类似于 Unix shell的 .profile 特性。\\r\\n这个文件仅在交互会话中被读取，当 Python从脚本中读取命令或以 /dev/tty 作为命令\\r\\n源时则不会被读取（尽管这些行为很像交互会话）。它与交互命令在同一个命名空间内执行，\\r\\n所有由它定义或引入的对象可以毫无限制的在会话中使用。你同样可以在这个文件中包含修\\r\\n改 sys.ps1 和 sys.ps2 的指令。\\r\\nimport os\\r\\nfilename = os.environ.get(\'PYTHONSTARTUP\')\\r\\nif filename and os.path.isfile(filename):\\r\\nexec(open(filename).read())\\r\\n如果你想在当前工作目录中读取附加的启动文件，你可以在全局的启动文件中通过使用\\r\\nif os.path.isfile(\'.pythonrc.py\'): exec(open(\'.pythonrc.py\').read()) 代码编程实现。如果你想在某\\r\\n个脚本中使用启动文件，必须在脚本中明确的执行以下代码:\\r\\nimport os\\r\\nfilename = os.environ.get(\'PYTHONSTARTUP\')\\r\\nif filename and os.path.isfile(filename):\\r\\nexec(open(filename).read())\\r\\nFootnotes\\r\\n[1] 在 Unix系统上，Python 3.1解释器默认未被安装成名为 python 的命令，所以它不\\r\\n会与同时安装在系统中的 Python 2.x命令冲突。\\r\\n[2] GNU Readline包的一个问题可能禁止此功能。\\r\\n3. Python简介\\r\\n在下面的示例中，我们通过有没有提示符（ >>> 或 ... ）来区分输入和输出：为了试\\r\\n验示例，你必须在提示符出现时输入其后的所有内容；那些不以提示符开头的行是 Python\\r\\n解释器的输出内容。注意示例中某行内出现从提示符意味着你必须输入一个空白行，这被用\\r\\n来结束多行命令输入。\\r\\n本手册中的很多示例，甚至那些在交互提示符下的输入，都包含有注释。 Python中的\\r\\n\"},{\"page\":10,\"content\":\"10\\r\\n注释以特殊字符 # 开始，直到物理行的结束。注释可以出现在一行的开始位置，也可以跟\\r\\n在空白字符或代码后面，但是不能包含在字符串中间。在字符串中的特殊字符就是其字面意\\r\\n思。由于注释是用来说明代码的，并且不会被 Python解释执行，可以在输入示例时将他们\\r\\n省略。\\r\\n一些简单的例子:\\r\\n# this is the first comment\\r\\nSPAM = 1 # and this is the second comment\\r\\n# ... and now a third!\\r\\nSTRING = \\\"# This is not a comment.\\\"\\r\\n3.1. 将 Python用作计算器\\r\\n让我们练习一些简单的 Python命令。启动 Python解释器并等待主提示符 >>> 出现\\r\\n（这并不需要多久）。\\r\\n3.1.1. 数字\\r\\n将 Python解释器作为一个简单的计算器：你可以输入一个表达式，计算器会返回其值。\\r\\n表达式语言很简单： + , - , * 和 / （加、减、乘、除）运算符像在大多数其他语言中一样\\r\\n工作（例如，Pascal或 C）；括号（ ( 和 ) ）可以用来区分优先级。例如：\\r\\n>>>2+2\\r\\n4\\r\\n>>># This is a comment\\r\\n...2+2\\r\\n4\\r\\n>>>2+2 # and a comment on the same line as code\\r\\n4\\r\\n>>>(50-5*6)/4\\r\\n5.0\\r\\n>>>8/5 # Fractions aren\'t lost when dividing integers\\r\\n1.6000000000000001\\r\\n注意：有时你可能会得到不同的结果；浮点数在不同机器上的运算结果可能是不同的。\\r\\n后面我们将对控制浮点数输出的显示结果做更多说明；这里我们看到的仅是有效的显示，并\\r\\n非我们能得到的可读性更好的结果。\\r\\n>>>print(8/5)\\r\\n1.6\\r\\n本指南中，为了清晰，除非我们特别的讨论格式化输出，我们将使用更简单的浮点数输\\r\\n出格式，后面再对为何这两种浮点数显示方式会有不同作解释。完整的信息请参照 Floating\\r\\nPoint Arithmetic: Issues and Limitations 浮点数运算：问题和限制 章节。\\r\\n对整数做除法运算并想去除小数部分取得整数结果时，可以使用另外一个运算符， // ：\\r\\n>>># Integer division returns the floor:\\r\\n...7//3\\r\\n2\\r\\n>>>7//-3\\r\\n\"},{\"page\":11,\"content\":\"11\\r\\n-3\\r\\n在 Python中，等号（ \'=\' ）符号被用于给变量赋值。随后，在下一个交互提示符前不\\r\\n会有任何输出结果：\\r\\n>>>width = 20\\r\\n>>>height = 5*9\\r\\n>>>width * height\\r\\n900\\r\\n你可以同时给几个变量赋一个值。\\r\\n>>>x = y = z = 0 # Zero x, y and z\\r\\n>>>x\\r\\n0\\r\\n>>>y\\r\\n0\\r\\n>>>z\\r\\n0\\r\\n在 Python中，变量在使用前必须“定义”，否则就会引发错误。\\r\\n>>># try to access an undefined variable\\r\\n...n\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in <module>\\r\\nNameError: name \'n\' is not defined\\r\\nPython完全支持浮点数，在混合类型操作数运算中整数将被转换为浮点数。\\r\\n>>>3 * 3.75 / 1.5\\r\\n7.5\\r\\n>>>7.0 / 2\\r\\n3.5\\r\\n同样，Python也支持复数，虚数以 j 或 J 结尾。实部为非零的复数写作 (real+imagj) ，\\r\\n或者通过 complex(real,imag) 构造方法创建。\\r\\n>>>1j * 1J\\r\\n(-1+0j)\\r\\n>>>1j * complex(0, 1)\\r\\n(-1+0j)\\r\\n>>>3+1j*3\\r\\n(3+3j)\\r\\n>>>(3+1j)*3\\r\\n(9+3j)\\r\\n>>>(1+2j)/(1+1j)\\r\\n(1.5+0.5j)\\r\\n复数总是被当做两个浮点数表示：实部和虚部。可以使用 z.real 和 z.imag 从复数 z 中\\r\\n获得这两个部分。\\r\\n\"},{\"page\":12,\"content\":\"12\\r\\n>>>a=1.5+0.5j\\r\\n>>>a.real\\r\\n1.5\\r\\n>>>a.imag\\r\\n0.5\\r\\n整数和浮点数转换函数（ int() ， float() ）均不能用于复数 — 实际上并没有一种正\\r\\n确的方法能将复数转换为实数。使用 abs(z) 可以得到复数 z 的模（以浮点数形式表示）或\\r\\n者使用 z.real 得到它的实部。\\r\\n>>>a=3.0+4.0j\\r\\n>>>float(a)\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nTypeError: can\'t convert complex to float; use abs(z)\\r\\n>>>a.real\\r\\n3.0\\r\\n>>>a.imag\\r\\n4.0\\r\\n>>>abs(a) # sqrt(a.real**2 + a.imag**2)\\r\\n5.0\\r\\n>>>\\r\\n在交互模式下，最后一次表达式输出被赋予变量 _ 。这说明当你把 Python当做桌面计\\r\\n算器使用时，可以很方便的进行连续计算。例如：\\r\\n>>> tax = 12.5 / 100\\r\\n>>> price = 100.50\\r\\n>>> price * tax\\r\\n12.5625\\r\\n>>> price + _\\r\\n113.0625\\r\\n>>> round(_, 2)\\r\\n113.06\\r\\n>>>\\r\\n对于用户而言此变量应该是只读的。不要明确的对其作赋值操作 — 如此你将创建一个\\r\\n独立的同名局部变量，并屏蔽具有魔术行为的内置变量。\\r\\n3.1.2. 字符串\\r\\n除了数值，Python还可以通过几种方式操作字符串。字符串可以是用单引号（’）或双\\r\\n引号（”）包围。\\r\\n>>>\'spam eggs\'\\r\\n\'spam eggs\'\\r\\n>>>\'doesn\\\\\'t\'\\r\\n\\\"doesn\'t\\\"\\r\\n>>>\\\"doesn\'t\\\"\\r\\n\\\"doesn\'t\\\"\\r\\n\"},{\"page\":13,\"content\":\"13\\r\\n>>>\'\\\"Yes,\\\" he said.\'\\r\\n\'\\\"Yes,\\\" he said.\'\\r\\n>>>\\\"\\\\\\\"Yes,\\\\\\\" he said.\\\"\\r\\n\'\\\"Yes,\\\" he said.\'\\r\\n>>>\'\\\"Isn\\\\\'t,\\\" she said.\'\\r\\n\'\\\"Isn\\\\\'t,\\\" she said.\'\\r\\nPython解释器按照字符串被输入的方式打印字符串结果：为了显示准确的值，字符串\\r\\n包含在成对的引号中，引号和其他特殊字符要用反斜线（ \\\\ ）转译。如果字符串只包含单\\r\\n引号（ \' ）而没有双引号（ \\\" ）就可以用双引号（ \\\" ）包围，反之用单引号（ \' ）包围。\\r\\n再强调一下， print() 函数可以生成可读性更好的输出。\\r\\n有几种方法可以让字符串文本显示为多行。你可以使用连续行：通过在行尾添加一个反\\r\\n斜线（ \\\\ ）表示下一行是它逻辑上的延续。\\r\\nhello = \\\"This is a rather long string containing\\\\n\\\\\\r\\nseveral lines of text just as you would do in C.\\\\n\\\\\\r\\nNote that whitespace at the beginning of the line is\\\\\\r\\nsignificant.\\\"\\r\\nprint(hello)\\r\\n注意：还是要在字符串中插入 \\\\n 来换行，反斜线（ \\\\ ）后面的换行会被忽略。这个\\r\\n例子将会输出以下内容：\\r\\nThis is a rather long string containing\\r\\nseveral lines of text just as you would do in C.\\r\\nNote that whitespace at the beginning of the line is significant.\\r\\n如果我们将字符串文本表示为原始值（即 Python中字符串的 r 作用符）， \\\\n （换行\\r\\n符）序列不会被转换为换行，并且行尾的反斜线（ \\\\ ）和代码中的换行符都将作为数据包\\r\\n含在字符串中。如下所示：\\r\\nhello = r\\\"This is a rather long string containing\\\\n\\\\\\r\\nseveral lines of text much as you would do in C.\\\"\\r\\nprint(hello)\\r\\n将会输出：\\r\\nThis is a rather long string containing\\\\n\\\\\\r\\nseveral lines of text much as you would do in C.\\r\\n字符串可以使用 + 符号（加号）连接，并可以使用 * 符号（星号）重复：\\r\\n>>>word = \'Help\' + \'A\'\\r\\n>>>word\\r\\n\'HelpA\'\\r\\n>>>\'<\' + word*5 + \'>\'\\r\\n\'<HelpAHelpAHelpAHelpAHelpA>\'\\r\\n\"},{\"page\":14,\"content\":\"14\\r\\n两个彼此相邻的字符串文本可以自动的连接起来，上面第一行的列子也可以写成 word\\r\\n= \'Help\' \'A\' 的形式。这只能用于两个字符串文本中，而不能用于两个字符串表达式中。\\r\\n>>>\'str\' \'ing\' # <- This is ok\\r\\n\'string\'\\r\\n>>>\'str\'.strip() + \'ing\' # <- This is ok\\r\\n\'string\'\\r\\n>>>\'str\'.strip() \'ing\' # <- This is invalid\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\n\'str\'.strip() \'ing\'\\r\\n^\\r\\nSyntaxError: invalid syntax\\r\\n字符串可以通过下标引用，和 C语言一样，第一个字符的下标是 0 。 Python中没有\\r\\n单独的字符类型，单个字符就是只包含一个字符的字符串。类似图像编程语言，子字符串可\\r\\n以使用 切片标记 来指定：使用冒号分割的两个下标索引。\\r\\n>>>word[4]\\r\\n\'A\'\\r\\n>>>word[0:2]\\r\\n\'He\'\\r\\n>>>word[2:4]\\r\\n\'lp\'\\r\\n索引切片具有实用的默认值：如果省略第一个索引，则默认为 0 ；如果省略第二个索\\r\\n引，则默认为被操作字符串的长度。\\r\\n>>>word[:2] # The first two characters\\r\\n\'He\'\\r\\n>>>word[2:] # Everything except the first two characters\\r\\n\'lpA\'\\r\\n不同于 C语言的字符串，在 Python中字符串是不可改变的。尝试通过索引给字符串赋\\r\\n值将引发错误！\\r\\n>>>word[0] = \'x\'\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nTypeError: \'str\' object does not support item assignment\\r\\n>>>word[:1] = \'Splat\'\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nTypeError: \'str\' object does not support slice assignment\\r\\n然而，通过联合创建字符串即简单又高效。\\r\\n>>>\'x\' + word[1:]\\r\\n\'xelpA\'\\r\\n\"},{\"page\":15,\"content\":\"15\\r\\n>>>\'Splat\' + word[4]\\r\\n\'SplatA\'\\r\\n切片操作具有一个有用的恒等特性： s[:i] + s[i:] 等于 ``s``。\\r\\n>>>word[:2] + word[2:]\\r\\n\'HelpA\'\\r\\n>>>word[:3] + word[3:]\\r\\n\'HelpA\'\\r\\nPython能够优雅的处理那些没有意义的切片索引：一个过大的索引值（即下标值大于\\r\\n字符串实际长度）将被字符串实际长度所代替，当上边界比下边界大时（即切片左值大于右\\r\\n值）就返回空字符串。\\r\\n>>>word[1:100]\\r\\n\'elpA\'\\r\\n>>>word[10:]\\r\\n\'\'\\r\\n>>>word[2:1]\\r\\n\'\'\\r\\n索引也可以是负数，这将导致从右边开始计算。例如：\\r\\n>>>word[-1] # The last character\\r\\n\'A\'\\r\\n>>>word[-2] # The last-but-one character\\r\\n\'p\'\\r\\n>>>word[-2:] # The last two characters\\r\\n\'pA\'\\r\\n>>>word[:-2] # Everything except the last two characters\\r\\n\'Hel\'\\r\\n请注意 -0 实际上就是 0 ，所以它不会导致从右边开始计算！\\r\\n>>>word[-0] # (since -0 equals 0)\\r\\n\'H\'\\r\\n超过边界的负数索引将被截断，但不要尝试对单元素（非切片操作）做如此操作。\\r\\n>>>word[-100:]\\r\\n\'HelpA\'\\r\\n>>>word[-10] # error\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nIndexError: string index out of range\\r\\n理解切片如何工作的一种方式就是把索引想象成字符 之间 的指点，第一个字符左边是\\r\\n数字 0 。那么包含 n 个字符的字符串最后一个字符的右边索引即是 n ，例如：\\r\\n+---+---+---+---+---+\\r\\n\"},{\"page\":16,\"content\":\"16\\r\\n| H | e | l | p | A |\\r\\n+---+---+---+---+---+\\r\\n0 1 2 3 4 5\\r\\n-5 -4 -3 -2 -1\\r\\n第一行数字显示了字符串中索引0...5的位置，第二行数字显示了对应的负数索引。从 i\\r\\n到 j 之间的切片由这两个标记之间的所有字符组成。\\r\\n对于非负索引，如果索引在边界内，切片的长度是两个索引的差。例如， word[1:3] 的\\r\\n长度是2。\\r\\n内置函数 len() 返回字符串的实际长度。\\r\\n>>>s = \'supercalifragilisticexpialidocious\'\\r\\n>>>len(s)\\r\\n34\\r\\n3.1.3. 关于 Unicode\\r\\n从 Python 3.0开始所有的字符串都支持 Unicode（参考 http://www.unicode.org ）。\\r\\nUnicode为古代或现代每种语言文本中使用的每个字符提供了统一编码。以前，只有256\\r\\n个可用的语言字符编码，文本被绑定到将编码映射到语言字符的代码页上。这使得软件的国\\r\\n际化（通常写作 i18n — i +18个字符+ n ）极为困难。 Unicode通过为所有的语言定义一\\r\\n个代码页解决了这个问题。\\r\\n如果想在字符串中包含特殊字符，你可以使用 Python的 Unicode_Escape 编码方式。\\r\\n下面的列子展示了如何这样做：\\r\\n>>>\'Hello\\\\u0020World !\'\\r\\n\'Hello World !\'\\r\\n转码序列 \\\\u0020 表示在指定位置插入编码为0x0020的 Unicode字符（空格）。\\r\\n其他字符就像 Unicode编码一样被直接解释为对应的编码值。如果你有在许多西方国家\\r\\n使用的标准 Latin-1编码的字符串，你会发现编码小于256的 Unicode字符和在 Latin-1编码\\r\\n中的一样。\\r\\n除了这些标准编码，Python还提供了一整套基于其他已知编码创建 Unicode字符串的\\r\\n方法。\\r\\n字符串对象提供了一个 encode() 方法用以将字符串转换成特定编码的字节序列，它接\\r\\n收一个小写的编码名称作为参数。\\r\\n>>>\\\"Äpfel\\\".encode(\'utf-8\')\\r\\nb\'\\\\xc3\\\\x84pfel\'\\r\\n3.1.4. 列表\\r\\nPython支持几种 复合 数据类型，用来对其他值进行分组。最常用的是 列表（list） ，\\r\\n在中括号中用逗号分隔的一系列值（项）。列表中的项不需要是同一种类型。\\r\\n>>>a = [\'spam\', \'eggs\', 100, 1234]\\r\\n>>>a\\r\\n[\'spam\', \'eggs\', 100, 1234]\\r\\n\"},{\"page\":17,\"content\":\"17\\r\\n类似字符串索引，列表索引也是从 0 开始，并且列表也可作切片、连接等操作。\\r\\n>>>a[0]\\r\\n\'spam\'\\r\\n>>>a[3]\\r\\n1234\\r\\n>>>a[-2]\\r\\n100\\r\\n>>>a[1:-1]\\r\\n[\'eggs\', 100]\\r\\n>>>a[:2] + [\'bacon\', 2*2]\\r\\n[\'spam\', \'eggs\', \'bacon\', 4]\\r\\n>>>3*a[:3] + [\'Boo!\']\\r\\n[\'spam\', \'eggs\', 100, \'spam\', \'eggs\', 100, \'spam\', \'eggs\', 100, \'Boo!\']\\r\\n与字符串的 不可变性 不同，列表中每个元素都是可变的。\\r\\n>>>a\\r\\n[\'spam\', \'eggs\', 100, 1234]\\r\\n>>>a[2] = a[2] + 23\\r\\n>>>a\\r\\n[\'spam\', \'eggs\', 123, 1234]\\r\\n给列表切片赋值也是允许的，甚至可以改变它的大小或清空整个列表。\\r\\n>>># Replace some items:\\r\\n...a[0:2] = [1, 12]\\r\\n>>>a\\r\\n[1, 12, 123, 1234]\\r\\n>>># Remove some:\\r\\n...a[0:2] = []\\r\\n>>>a\\r\\n[123, 1234]\\r\\n>>># Insert some:\\r\\n...a[1:1] = [\'bletch\', \'xyzzy\']\\r\\n>>>a\\r\\n[123, \'bletch\', \'xyzzy\', 1234]\\r\\n>>># Insert (a copy of) itself at the beginning\\r\\n>>>a[:0] = a\\r\\n>>>a\\r\\n[123, \'bletch\', \'xyzzy\', 1234, 123, \'bletch\', \'xyzzy\', 1234]\\r\\n>>># Clear the list: replace all items with an empty list\\r\\n>>>a[:] = []\\r\\n>>>a\\r\\n[]\\r\\n内置函数 len() 同样可以作用于列表。\\r\\n\"},{\"page\":18,\"content\":\"18\\r\\n>>>a = [\'a\', \'b\', \'c\', \'d\']\\r\\n>>>len(a)\\r\\n4\\r\\n你可以将列表嵌套使用（创建包含其他列表的列表），例如：\\r\\n>>>q = [2, 3]\\r\\n>>>p = [1, q, 4]\\r\\n>>>len(p)\\r\\n3\\r\\n>>>p[1]\\r\\n[2, 3]\\r\\n>>>p[1][0]\\r\\n2\\r\\n你可以在列表末尾添加内容：\\r\\n>>>p[1].append(\'xtra\')\\r\\n>>>p\\r\\n[1, [2, 3, \'xtra\'], 4]\\r\\n>>>q\\r\\n[2, 3, \'xtra\']\\r\\n注意：在最后的列子里， p[1] 和 q 实际上指向同一个对象！我们将在后面讨论 对象\\r\\n语法 。\\r\\n3.2. 迈向编程的第一步\\r\\n当然，我们可以用 Python作比2加2更复杂的任务。例如，我们可以像下面一样写出 菲\\r\\n波那契数 序列的初始子序列：\\r\\n>>># Fibonacci series:\\r\\n...# the sum of two elements defines the next\\r\\n...a, b = 0, 1\\r\\n>>>while b < 10:\\r\\n... print(b)\\r\\n... a, b = b, a+b\\r\\n...\\r\\n1\\r\\n1\\r\\n2\\r\\n3\\r\\n5\\r\\n8\\r\\n这个例子展示了几个新功能。\\r\\n第一行包含了一条 多项赋值 表达式：变量 a 和 b 同时得到新值 0 和 1 。最后一\\r\\n行我们又一次这样使用，这说明等号右边的表达式在任何赋值前被首先计算。等号右边的表\\r\\n\"},{\"page\":19,\"content\":\"19\\r\\n达式遵从从左向右的求值顺序。\\r\\n只要条件（此处为： b < 10）为真 while 循环就会一直执行。像 C语言一样，在 Python\\r\\n中任何非零的整数值都为 True ，0为 False 。条件也可以是一个字符串或列表值，事实上\\r\\n可以是任何序列，所有长度非零的序列都是 True ，空的序列为 False 。例子中使用的测\\r\\n试是一个简单的比较。标准的比较操作符和 C语言中的写法一样： <（小于）、 >（大于）、\\r\\n== （等于）、 <= （小于等于）、 >= （大于等于）和 != （不等于）。\\r\\n循环的 主题 是 缩进 代码块：缩进是 Python语法分组的方法。 Python（仍然！）没\\r\\n有提供一种智能的行输入功能，所以你必须为每个缩进行输入制表符（Tab）或空格（Space）。\\r\\n实践中你应该准备一个文本编辑器来应对更复杂的 Python代码输入，大多数文本编辑器都\\r\\n具备自动缩进功能。当交互式的输入一个复合语句时，必须在其后输入一个空行以表明输入\\r\\n完成（因为解释器无法猜出你什么时候输入最后一行）。注意：代码块中的每行必须具有相\\r\\n同数目的缩进。\\r\\n输出函数 print() 将给定的表达式输出。与简单的以你想要输出的表达式输出方式不同\\r\\n（像前面我们在计算器示例中的做法），它可以处理多个表达式，大浮点数或字符串。字符\\r\\n串被不带引号的打印，并且两项之间会插入一个空格，所以你可以更好的格式化字符串，列\\r\\n如：\\r\\n>>>i = 256*256\\r\\n>>>print(\'The value of i is\', i)\\r\\nThe value of i is 65536\\r\\n关键字 end （参数）可以用来避免输出后换行，或者用不同的字符串结束输出。\\r\\n>>>a, b = 0, 1\\r\\n>>>while b < 1000:\\r\\n... print(b, end=\' \')\\r\\n... a, b = b, a+b\\r\\n...\\r\\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\\r\\n4. 深入 Python流程控制\\r\\n除了上一节介绍的 while 循环语句外，Python像其他语言一样支持常用的流程控制语\\r\\n句，当然也有一些自己的特性。\\r\\n4.1. if Statements if 语句\\r\\nif 语句也许是最常用的语句类型。例如：\\r\\n>>>x = int(input(\\\"Please enter an integer: \\\"))\\r\\nPlease enter an integer: 42\\r\\n>>>if x < 0:\\r\\n... x = 0\\r\\n... print(\'Negative changed to zero\')\\r\\n...elif x == 0:\\r\\n... print(\'Zero\')\\r\\n...elif x == 1:\\r\\n\"},{\"page\":20,\"content\":\"20\\r\\n... print(\'Single\')\\r\\n...else:\\r\\n... print(\'More\')\\r\\n...\\r\\nMore\\r\\nif 语句可以有零个或多个 elif 分支语句，并且 else 分支语句是可选的。 elif 关键字\\r\\n是’else if’的缩写，这可以有效避免过度缩进问题。在 Python中，使用 if ... elif ... elif 语句\\r\\n组合代替其他语言中的 switch 和 case 语句结构。\\r\\n4.2. for 语句\\r\\nPython的 :keywor:`for` 语句可能与你在 C或 Pascal语言中用过的有些不同。与总是\\r\\n依靠一个等差数字进行迭代（类似 Pascal）或者赋予用户定义迭代步进和终止条件的能力（类\\r\\n似 C）不同，Python的 for 语句是对任何序列（列表或字符串）的项按照它们在序列中的\\r\\n顺序进行迭代。例如（没有歧义）：\\r\\n>>># Measure some strings:\\r\\n...a = [\'cat\', \'window\', \'defenestrate\']\\r\\n>>>for x in a:\\r\\n... print(x, len(x))\\r\\n...\\r\\ncat 3\\r\\nwindow 6\\r\\ndefenestrate 12\\r\\n在循环中修改正在被迭代的序列是不安全的（这仅在不可变序列类型上发生，像 列\\r\\n表 ）。如果需要修改正在迭代的列表（比如复制选择的项），你必须对它的副本进行迭代。\\r\\n切片操作可以方便的做到这一点。\\r\\n>>>for x in a[:]: # make a slice copy of the entire list\\r\\n... if len(x) > 6: a.insert(0, x)\\r\\n...\\r\\n>>>a\\r\\n[\'defenestrate\', \'cat\', \'window\', \'defenestrate\']\\r\\n4.3. range() 函数\\r\\n如果你必须迭代一个数字序列，内置函数 range() 会派上用场。它生成一个等差级数序\\r\\n列。\\r\\n>>>for i in range(5):\\r\\n... print(i)\\r\\n...\\r\\n0\\r\\n1\\r\\n2\\r\\n\"},{\"page\":21,\"content\":\"21\\r\\n3\\r\\n4\\r\\n给定的终值从不会包含在生成的列表中， range(10) 生成10个值，一个长度为10的序\\r\\n列项的合法索引。可以让 range 函数从另一个数值开始，或者指定一个不同的步进值（甚\\r\\n至是负数，有时这被称为“步长”）。\\r\\nrange(5, 10)\\r\\n5 through 9\\r\\nrange(0, 10, 3)\\r\\n0, 3, 6, 9\\r\\nrange(-10, -100, -30)\\r\\n-10, -40, -70\\r\\n想要迭代序列的索引，你可以结合使用 range() 和 len() （实现）。如下所示：\\r\\n>>>a = [\'Mary\', \'had\', \'a\', \'little\', \'lamb\']\\r\\n>>>for i in range(len(a)):\\r\\n... print(i, a[i])\\r\\n...\\r\\n0 Mary\\r\\n1 had\\r\\n2 a\\r\\n3 little\\r\\n4 lamb\\r\\n然而在大多数此类情况下，使用 enumerate() 函数更方便。参考 Looping Techniques\\r\\n遍历技巧 。\\r\\n如果你只是打印一个 range （方法调用）会发生奇怪的事情。\\r\\n>>>print(range(10))\\r\\nrange(0, 10)\\r\\n在不同方面 range() 函数返回的对象表现为它是一个列表，但事实上它并不是。当你迭\\r\\n代它时，它是一个能够像期望的序列返回连续项的对象；但为了节省空间，它并不真正构造\\r\\n列表。\\r\\n我们称此类对象是 可迭代的 ，即适合作为那些期望从某些东西中获得连续项直到结束\\r\\n的函数或结构的一个目标（参数）。我们已经见过的 for 语句就是这样一个 迭代器 。 list()\\r\\n函数是另外一个（迭代器），它从可迭代（对象）中创建列表。\\r\\n>>>list(range(5))\\r\\n[0, 1, 2, 3, 4]\\r\\n稍后我们会看到更多返回可迭代（对象）和以可迭代（对象）作为参数的函数。\\r\\n\"},{\"page\":22,\"content\":\"22\\r\\n4.4. break 和 continue 语句，以及循环的 else 子句\\r\\n像在 C语言中一样， break 语句用于跳出最近的 for 循环或 while 循环。\\r\\ncontinue 语句，同样借鉴自 C语言，继续循环的下一次迭代过程。\\r\\n循环语句可以包含一个 else 子句，当循环因穷尽列表项结束（ for 循环）或循环条件\\r\\n变为逻辑假结束（ while 循环）时执行它，而通过 break 语句结束循环时并不执行。下面\\r\\n这个搜索素数的循环是一个间的示例：\\r\\n>>>for n in range(2, 10):\\r\\n... for x in range(2, n):\\r\\n... if n % x == 0:\\r\\n... print(n, \'equals\', x, \'*\', n//x)\\r\\n... break\\r\\n... else:\\r\\n... # loop fell through without finding a factor\\r\\n... print(n, \'is a prime number\')\\r\\n...\\r\\n2 is a prime number\\r\\n3 is a prime number\\r\\n4 equals 2 * 2\\r\\n5 is a prime number\\r\\n6 equals 2 * 3\\r\\n7 is a prime number\\r\\n8 equals 2 * 4\\r\\n9 equals 3 * 3\\r\\n4.5. pass 语句\\r\\npass 语句不做任何事。它被用于语法结构上需要一条语句但并不做任何事时。例如：\\r\\n>>>while True:\\r\\n... pass # Busy-wait for keyboard interrupt (Ctrl+C)\\r\\n...\\r\\n这通常被用在创建最小类上。\\r\\n>>>class MyEmptyClass:\\r\\n... pass\\r\\n...\\r\\n另外一个可以用 pass 的地方是当你新编写一个函数结构或条件体代码时，这允许你在\\r\\n更多的抽象层保持思维。 pass 被默默的忽略。\\r\\n>>>def initlog(*args):\\r\\n... pass # Remember to implement this!\\r\\n...\\r\\n\"},{\"page\":23,\"content\":\"23\\r\\n4.6. 定义函数\\r\\n我们可以创建一个用以生成指定边界的斐波那契数列的函数。\\r\\n>>>def fib(n): # write Fibonacci series up to n\\r\\n... \\\"\\\"\\\"Print a Fibonacci series up to n.\\\"\\\"\\\"\\r\\n... a, b = 0, 1\\r\\n... while b < n:\\r\\n... print(b, end=\' \')\\r\\n... a, b = b, a+b\\r\\n... print()\\r\\n...\\r\\n>>># Now call the function we just defined:\\r\\n...fib(2000)\\r\\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597\\r\\n关键字 def 声明一个函数 定义 。其后必须跟着函数名和以括号标明的参数列表。必\\r\\n须在下一行开始构成函数体的语句，并且必须缩进。\\r\\n函数体的第一行语句可以是可选的字符串文本，这个字符串是函数的文档字符串，或者\\r\\n称为 docstring 。（更多关于 docstrings 的信息请参考 Documentation Strings 文档字符\\r\\n串 。）有些工具通过 docstrings 自动生成在线的或可打印的文档，或者让用户通过代码交\\r\\n互浏览；在你的代码中包含 docstrings 是一个好的实践，让它成为习惯吧。\\r\\n函数 调用 会为函数局部变量生成一个新的符号表。确切的说，所有函数中的变量赋值\\r\\n都是将值存储在局部符号表。变量引用首先在局部符号表中查找，然后是包含函数的局部符\\r\\n号表，然后是全局符号表，最后是内置名字表。因此，全局变量不能在函数中直接赋值（除\\r\\n非用 global 语句命名），尽管他们可以被引用。\\r\\n当函数调用时，实参被引入调用函数的局部符号表；因此，参数是通过 传值 方式传递\\r\\n的（这里 值 总是指代对象的 引用 ，而非对象的值）。 [2] 当一个函数调用其他函数时，\\r\\n将为此调用创建一个新的字符表。\\r\\n一个函数定义会在当前符号表内引入函数名。函数名指代的值（即函数体）有一个被\\r\\nPython解释器认定为 用户自定义函数 的类型。这个值可以赋予其他的名字（即变量名），\\r\\n然后它也可以被当做函数使用。这可以作为通用的重命名机制。\\r\\n>>>fib\\r\\n<function fib at 10042ed0>\\r\\n>>>f = fib\\r\\n>>>f(100)\\r\\n1 1 2 3 5 8 13 21 34 55 89\\r\\n如果你使用过其他语言，你可能会反对说： fib 不是一个函数，而是一个方法，因为它\\r\\n并不返回任何值。事实上，没有 return 语句的函数确实会返回一个值，虽然是一个相当令\\r\\n人厌烦的值（指 None ）。这个值被称为 None （这是一个内建名称）。如果 None 值是唯\\r\\n一被书写的值，那么在写的时候通常会被解释器忽略（即不输出任何内容）。如果你确实想\\r\\n看到这个值的输出内容，请使用 print() 函数。\\r\\n>>>fib(0)\\r\\n>>>print(fib(0))\\r\\n\"},{\"page\":24,\"content\":\"24\\r\\nNone\\r\\n定义一个返回斐波那契数列数字列表的函数，而不是打印它，是很简单的。\\r\\n>>>def fib2(n): # return Fibonacci series up to n\\r\\n... \\\"\\\"\\\"Return a list containing the Fibonacci series up to n.\\\"\\\"\\\"\\r\\n... result = []\\r\\n... a, b = 0, 1\\r\\n... while b < n:\\r\\n... result.append(b) # see below\\r\\n... a, b = b, a+b\\r\\n... return result\\r\\n...\\r\\n>>>f100 = fib2(100) # call it\\r\\n>>>f100 # write the result\\r\\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\\r\\n照例，这个列子包含了一些 Python的新特性：\\r\\nreturn 语句从函数中返回一个值（可以是多个）。没有表达式参数的 return 语句返回\\r\\nNone 值。函数执行最后（指没有 return 语句的情况）也会返回 None 值。\\r\\nresult.append(b) 语句调用了列表对象 result 的一个 方法 。方法是属于对象的函数，\\r\\n并被命名为 obj.methodname ，此处 obj 是某个对象（也可能是个表达式），methodname 是\\r\\n对象类型定义的方法的名字。不同的（对象）类型定义了不同的方法。不同（对象）类型的\\r\\n方法可能拥有相同的名字，但这并不会导致胡乱。（你可以使用 clasees 对应自己的对象类\\r\\n型和方法，参考 Classes 类 ）示例中出现的 append() 方法是由列表对象定义的，它将一\\r\\n个新元素添加到列表的末尾。在这个示例中它等同于 result = result + [b] （表达式运算），\\r\\n但是更高效。\\r\\n4.7. 深入 Python函数定义\\r\\n在 Python中，你也可以定义包含若干参数的函数。这里有三种可用的形式，也可以混\\r\\n合使用。\\r\\n4.7.1. 默认参数值\\r\\n最常用的一种形式是为一个或多个参数指定默认值。这会创建一个可以使用比定义时允\\r\\n许的参数更少的参数调用的函数。\\r\\ndef ask_ok(prompt, retries=4, complaint=\'Yes or no, please!\'):\\r\\nwhile True:\\r\\nok = input(prompt)\\r\\nif ok in (\'y\', \'ye\', \'yes\'):\\r\\nreturn True\\r\\nif ok in (\'n\', \'no\', \'nop\', \'nope\'):\\r\\nreturn False\\r\\nretries = retries - 1\\r\\nif retries < 0:\\r\\nraise IOError(\'refusenik user\')\\r\\n\"},{\"page\":25,\"content\":\"25\\r\\nprint(complaint)\\r\\n这个函数可以通过集中方式调用：\\r\\n• giving only the mandatory argument: ask_ok(\'Do you really want to quit?\') 仅给出必\\r\\n须得参数： ask_ok(\'Do you really want to quit?\')\\r\\n• giving one of the optional arguments: ask_ok(\'OK to overwrite the file?\', 2) 给出一个\\r\\n可选的参数： ask_ok(\'Ok to overwrite the file?\', 2)\\r\\n• or even giving all arguments: ask_ok(\'OK to overwrite the file?\', 2, \'Come on, only yes or\\r\\nno!\') 或者给出所有的参数： ask_ok(\'Ok to overwite the file?\', 2, \'Come on, only yes or no!\')\\r\\nThis example also introduces the in keyword. This tests whether or not a sequence\\r\\ncontains a certain value.\\r\\n本示例同样介绍了 in 关键字。它检测序列中是否包含某个指定的值。\\r\\n默认值赋予在函数定义时 定义 域的值，例如：\\r\\ni = 5\\r\\ndef f(arg=i):\\r\\nprint(arg)\\r\\ni = 6\\r\\nf()\\r\\n将会输出 5 。\\r\\nImportant warning： 默认值只被赋值一次。这使得当默认值是可变对象时会有所\\r\\n不同，比如列表、字典或者大多数类的实例。例如，下面的函数在后续调用过程中会累积（前\\r\\n面）传给它的参数。\\r\\ndef f(a, L=[]):\\r\\nL.append(a)\\r\\nreturn L\\r\\nprint(f(1))\\r\\nprint(f(2))\\r\\nprint(f(3))\\r\\n这将输出：\\r\\n[1]\\r\\n[1, 2]\\r\\n[1, 2, 3]\\r\\n如果你不想让默认值在后续调用中累积，你可以像下面一样定义函数。\\r\\ndef f(a, L=None):\\r\\nif L is None:\\r\\nL = []\\r\\nL.append(a)\\r\\nreturn L\\r\\n\"},{\"page\":26,\"content\":\"26\\r\\n4.7.2. 关键字参数\\r\\n函数同样可以使用 keyword = value 形式通过关键字参数调用。例如，下面的函数：\\r\\ndef parrot(voltage, state=\'a stiff\', action=\'voom\', type=\'Norwegian Blue\'):\\r\\nprint(\\\"-- This parrot wouldn\'t\\\", action, end=\' \')\\r\\nprint(\\\"if you put\\\", voltage, \\\"volts through it.\\\")\\r\\nprint(\\\"-- Lovely plumage, the\\\", type)\\r\\nprint(\\\"-- It\'s\\\", state, \\\"!\\\")\\r\\n可以通过以下任何方式调用：\\r\\nparrot(1000)\\r\\nparrot(action = \'VOOOOOM\', voltage = 1000000)\\r\\nparrot(\'a thousand\', state = \'pushing up the daisies\')\\r\\nparrot(\'a million\', \'bereft of life\', \'jump\')\\r\\n但是以下调用是错误的：\\r\\nparrot() # required argument missing\\r\\nparrot(voltage=5.0, \'dead\') # non-keyword argument following keyword\\r\\nparrot(110, voltage=220) # duplicate value for argument\\r\\nparrot(actor=\'John Cleese\') # unknown keyword\\r\\n通常，参数列表必须（先书写）位置参数然后才是关键字参数，这里关键字必须来自于\\r\\n形参名字。形参是否有一个默认值并不重要。任何参数都不能被多次赋值——在同一个调用\\r\\n中，与位置参数相同的形参名字不能用作关键字。这里有一个违反此限制而出错的例子：\\r\\n>>>def function(a):\\r\\n... pass\\r\\n...\\r\\n>>>function(0, a=0)\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nTypeError: function() got multiple values for keyword argument \'a\'\\r\\n当最后一个形参为 **name 形式时，函数接受一个包含所有未出现在形参列表中的关\\r\\n键字参数的字典（参考 Mapping Types— dict ）。这可以结合形式为 *name 的形参（在下\\r\\n一节中介绍）一起使用，它接受一个包含所有未出现在形参列表中的位置参数的元组\\r\\n（ *name 必须出现在 **name 之前）。例如，我们定义如下函数：\\r\\ndef cheeseshop(kind, *arguments, **keywords):\\r\\nprint(\\\"-- Do you have any\\\", kind, \\\"?\\\")\\r\\nprint(\\\"-- I\'m sorry, we\'re all out of\\\", kind)\\r\\nfor arg in arguments: print(arg)\\r\\nprint(\\\"-\\\" * 40)\\r\\nkeys = sorted(keywords.keys())\\r\\nfor kw in keys: print(kw, \\\":\\\", keywords[kw])\\r\\n\"},{\"page\":27,\"content\":\"27\\r\\n它可以这样调用：\\r\\ncheeseshop(\\\"Limburger\\\", \\\"It\'s very runny, sir.\\\",\\r\\n\\\"It\'s really very, VERY runny, sir.\\\",\\r\\nshopkeeper=\\\"Michael Palin\\\",\\r\\nclient=\\\"John Cleese\\\",\\r\\nsketch=\\\"Cheese Shop Sketch\\\")\\r\\n他会输出如下内容：\\r\\n-- Do you have any Limburger ?\\r\\n-- I\'m sorry, we\'re all out of Limburger\\r\\nIt\'s very runny, sir.\\r\\nIt\'s really very, VERY runny, sir.\\r\\n----------------------------------------\\r\\nclient : John Cleese\\r\\nshopkeeper : Michael Palin\\r\\nsketch : Cheese Shop Sketch\\r\\n注意：关键字参数名的列表内容在打印前需要对关键字字典的 keys() 方法返回的值排\\r\\n序（即在输出列表前需要对列表的键排序），否则参数输出的循序是未知的。\\r\\n4.7.3. 可变参数列表\\r\\n最后，最常用的选择是指明一个函数可以使用任意数目的参数调用。这些参数将被包装\\r\\n进一个元组（参考 Tuples and Sequences 元组和序列 ）。在可变数目的参数前，可以有零\\r\\n或多个普通的参数。\\r\\ndef write_multiple_items(file, separator, *args):\\r\\nfile.write(separator.join(args))\\r\\n通常，这些 可变化的 参数在形参列表的最后定义，因为他们会收集传递给函数的所有\\r\\n剩下的输入参数。任何出现在 *args 参数之后的形参只能是“关键字参数”，即他们只能通\\r\\n过关键字而非位置参数使用。\\r\\n>>>def concat(*args, sep=\\\"/\\\"):\\r\\n... return sep.join(args)\\r\\n...\\r\\n>>>concat(\\\"earth\\\", \\\"mars\\\", \\\"venus\\\")\\r\\n\'earth/mars/venus\'\\r\\n>>>concat(\\\"earth\\\", \\\"mars\\\", \\\"venus\\\", sep=\\\".\\\")\\r\\n\'earth.mars.venus\'\\r\\n4.7.4. 拆分参数列表\\r\\n一种相反的情况是：当参数是一个列表或元组但函数需要分开的位置参数时，就需要拆\\r\\n分参数。比如，内建函数 range() 期望独立的 start 和 stop 参数。如果他们不是独立的有\\r\\n效（参数），调用函数时使用 *- 操作符将参数从列表或元组中拆分出来即可。\\r\\n>>>list(range(3, 6)) # normal call with separate arguments\\r\\n[3, 4, 5]\\r\\n>>>args = [3, 6]\\r\\n\"},{\"page\":28,\"content\":\"28\\r\\n>>>list(range(*args)) # call with arguments unpacked from a list\\r\\n[3, 4, 5]\\r\\n以此类推，字典可以使用 **- 操作符拆分成关键字参数。\\r\\n>>>def parrot(voltage, state=\'a stiff\', action=\'voom\'):\\r\\n... print(\\\"-- This parrot wouldn\'t\\\", action, end=\' \')\\r\\n... print(\\\"if you put\\\", voltage, \\\"volts through it.\\\", end=\' \')\\r\\n... print(\\\"E\'s\\\", state, \\\"!\\\")\\r\\n...\\r\\n>>>d = {\\\"voltage\\\": \\\"four million\\\", \\\"state\\\": \\\"bleedin\' demised\\\", \\\"action\\\": \\\"VOOM\\\"}\\r\\n>>>parrot(**d)\\r\\n-- This parrot wouldn\'t VOOM if you put four million volts through it. E\'s bleedin\'\\r\\ndemised !\\r\\n4.7.5. Lambda方式\\r\\n出于普遍需求，一些通常在函数式编程语言中出现的特性被加入到 Python中，如 Lisp。\\r\\n使用 lambda 关键字，可以创建短小的匿名函数。这里有一个返回两个参数之和的（Lambda）\\r\\n函数： lambda a, b: a+b 。 Lambda方式可是使用在任何需要函数对象的地方。出于语法\\r\\n的限制，他们只能是一个独立的表达式。从语义上讲，它们只是普通函数定义的语法糖。类\\r\\n似于嵌套函数定义，lambda方式可以从包含域内引用变量。\\r\\n>>>def make_incrementor(n):\\r\\n... return lambda x: x + n\\r\\n...\\r\\n>>>f = make_incrementor(42)\\r\\n>>>f(0)\\r\\n42\\r\\n>>>f(1)\\r\\n43\\r\\n4.7.6. 文档字符串\\r\\n这里是一些关于文档字符串内容和格式的约定。\\r\\n第一行应该总是关于对象用途的摘要。为了简便起见，无需明确说明对象的名称或类型，\\r\\n因为这些都可以通过其他方法获取（除非名字碰巧是描述一个函数操作的动词）。这一行应\\r\\n该以大写字母开头，并且以句号结束。\\r\\n如果文档字符串包含多行，第二行应该是空行，在视觉上将摘要（指第一行）与区域的\\r\\n描述内容分割。接下来应该是一段或多段（内容），用来描述对象调用约定和边界效应等。\\r\\n在 Python中，语法分析器不会从多行字符串中去除缩进，因此如果需要处理文档的工\\r\\n具必须自己去除缩进。这是通过以下的约定实现的：第一行 之后 的第一个非空行决定了整\\r\\n个文档字符串缩进的值。（我们不用第一行是因为它通常紧接在字符串起始引号，以致它在\\r\\n字符串中的缩进并不明显。）字符串中所有行开始的“相当于”缩进的空白都会被去除掉。不\\r\\n应出现缩进不足的行（指有的行缩进空格数少于整体），如果出现此情况所有的前导空白都\\r\\n应该被去除。在扩展制表符后需要对相等的空白做测试（通常为8个空格）。\\r\\n这里是一个多行文档字符串的示例：\\r\\n\"},{\"page\":29,\"content\":\"29\\r\\n>>> def my_function():\\r\\n... \\\"\\\"\\\"Do nothing, but document it.\\r\\n...\\r\\n... No, really, it doesn\'t do anything.\\r\\n... \\\"\\\"\\\"\\r\\n... pass\\r\\n...\\r\\n>>> print(my_function.__doc__)\\r\\nDo nothing, but document it.\\r\\nNo, really, it doesn\'t do anything.\\r\\n4.8. PS：编码风格\\r\\n现在你即将编写更长的，更复杂的 Python代码，是时候讨论一下 编码风格 了。大多\\r\\n数语言可以用不同的风格编写（或更简单的 格式化 ），其中有一些比其他具有更好的可读\\r\\n性。让其他人容易阅读你的代码总是一个好主意，而采用一个好的编码风格对此尤为有益。\\r\\n对于 Python而言， PEP 8 已经成为大多数项目使用的风格，它提供了一个非常可读\\r\\n的并且诱人的编码风格。每一位 Python开发者都应该找个时间读一下它，这里是为你概括\\r\\n的最重要的几点：\\r\\n使用4个空格的缩进，并杜绝制表符。\\r\\n4个空格是一个介于小缩进（允许更深层的嵌套）和大缩进（更利于阅读）好的折中（选\\r\\n择）。制表符会导致混乱（因为不同编辑器上的制表符表示的空格可能不同），最好让他滚蛋。\\r\\n换行，避免他们超过79个字符。\\r\\n这可以帮助使用小显示器的用户，并且使得在大显示器上并排显示几个代码文件成为可\\r\\n能。\\r\\n使用空行分割类和函数以及函数内部较大的代码块。\\r\\n如果可以，将注释独立成行。\\r\\n使用文档字符串\\r\\n在操作符两侧和逗号之后使用空格，但不要直接在括号内部使用：a = f(1, 2) + g(3, 4) 。\\r\\n使用统一风格命名你的类和函数：约定使用 CamelCase 方式命名类，使用\\r\\nlower_case_with_underscores 方式命名函数和方法。\\r\\n总是用 self 作为方法的第一个参数名（参考 A First Look at Classes 初识类 深入类和\\r\\n方法）。\\r\\n如果你希望你的代码被用在国际环境中，不要使用新奇的编码。 Python默认的 UTF-8\\r\\n编码甚至 ASCII编码在任何情况下都将工作的更好。\\r\\n同样的，如果仅有极少数说其他语言的人将要阅读或维护代码，不要使用非 ASCII字符\\r\\n的标识符。\\r\\nFootnotes\\r\\n[1\\r\\n]\\r\\n事实上，对象引用调用 可能是个更好的表述，因为如果传递一个可变对象（参数），\\r\\n调用者将会观察到被调用者对其所做的任何改变（向列表插入元素）。\\r\\n\"},{\"page\":30,\"content\":\"30\\r\\n5. 数据结构\\r\\n本章详细讨论了你已经学过的一些知识，同样也添加了一些新内容。\\r\\n5.1. 深入列表\\r\\nPython的列表数据类型包含更多的方法。这里是所有的列表对象方法：\\r\\nlist.append(x)\\r\\n在列表末尾添加一个元素，等同于 a[len(a):] = [x] 。\\r\\nlist.extend(L)\\r\\n通过添加指定列表的所有元素扩展列表，等同于 a[len(a):] = L 。\\r\\nlist.insert(i, x)\\r\\n在指定位置插入一个元素。第一个参数是将要插入在前面的元素的索引，因此 a.insert(0,\\r\\nx) 会插入在列表头部，同样 a.insert(len(a), x) 就等同于 a.append(x) 。\\r\\nlist.remove(x)\\r\\n删除列表中值为 x 的第一个元素。如果不存在这样的元素则引发错误。\\r\\nlist.pop([i])\\r\\n删除列表中指定位置元素并返回它（指元素值）。如果省略索引， a.pop() 会删除并返\\r\\n回列表中的最后一个元素。（方法中围绕 i 的方括号表示此参数是可选的，而不是你也要那\\r\\n个位置输入方括号。你会在 Python库参考手册中经常看到此用法。）\\r\\nlist.index(x)\\r\\n返回列表中值为 x 的第一个元素的索引。如果不存在这样的元素则引发错误。\\r\\nlist.count(x)\\r\\n返回列表中元素 x 出现的次数。\\r\\nlist.sort()\\r\\n对列表中的元素进行排序。\\r\\nlist.reverse()\\r\\n反转列表中的元素。\\r\\n一个演示列表大多数方法的列子：\\r\\n>>>a = [66.25, 333, 333, 1, 1234.5]\\r\\n>>>print(a.count(333), a.count(66.25), a.count(\'x\'))\\r\\n2 1 0\\r\\n>>>a.insert(2, -1)\\r\\n>>>a.append(333)\\r\\n>>>a\\r\\n[66.25, 333, -1, 333, 1, 1234.5, 333]\\r\\n>>>a.index(333)\\r\\n1\\r\\n>>>a.remove(333)\\r\\n>>>a\\r\\n[66.25, -1, 333, 1, 1234.5, 333]\\r\\n>>>a.reverse()\\r\\n>>>a\\r\\n[333, 1234.5, 1, 333, -1, 66.25]\\r\\n\"},{\"page\":31,\"content\":\"31\\r\\n>>>a.sort()\\r\\n>>>a\\r\\n[-1, 1, 66.25, 333, 333, 1234.5]\\r\\n5.1.1. 用列表实现堆栈\\r\\n列表方法使其可以很容易的实现堆栈功能，即最后添加的元素是第一个被返回的元素\\r\\n（LIFO）。要想在堆栈顶部添加一个元素，可以使用 append() 方法。要想返回堆栈顶部的\\r\\n元素，可以使用不指定索引参数的 pop() 方法。例如：\\r\\n>>>stack = [3, 4, 5]\\r\\n>>>stack.append(6)\\r\\n>>>stack.append(7)\\r\\n>>>stack\\r\\n[3, 4, 5, 6, 7]\\r\\n>>>stack.pop()\\r\\n7\\r\\n>>>stack\\r\\n[3, 4, 5, 6]\\r\\n>>>stack.pop()\\r\\n6\\r\\n>>>stack.pop()\\r\\n5\\r\\n>>>stack\\r\\n[3, 4]\\r\\n5.1.2. 用列表实现队列\\r\\n你也可以方便的使用列表实现一个队列，即第一个被添加的元素第一个被返回（FIFO）。\\r\\n想要在队列尾部添加一个元素，可以使用 append() 方法。想要返回队列首部的元素，可以\\r\\n使用指定参数为0的 pop() 方法（即 list.pop(0) ）。例如：\\r\\n>>>queue = [\\\"Eric\\\", \\\"John\\\", \\\"Michael\\\"]\\r\\n>>>queue.append(\\\"Terry\\\") # Terry arrives\\r\\n>>>queue.append(\\\"Graham\\\") # Graham arrives\\r\\n>>>queue.pop(0)\\r\\n\'Eric\'\\r\\n>>>queue.pop(0)\\r\\n\'John\'\\r\\n>>>queue\\r\\n[\'Michael\', \'Terry\', \'Graham\']\\r\\n5.1.3. 列表推导式\\r\\n列表推导式为从序列中创建列表提供了一个简单的方法。普通的应用程式通过将一些操\\r\\n作应用于序列的每个成员并通过返回的元素创建列表，或者通过满足特定条件的元素创建子\\r\\n序列。\\r\\n\"},{\"page\":32,\"content\":\"32\\r\\n列表推导式由包含一个表达式的括号组成，表达式后面跟随一个 for 子句，之后可以\\r\\n有零或多个 for 或 if 子句。结果是一个列表，由表达式依据其后面的 for 和 if 子句上下\\r\\n文计算而来的结果构成。如果希望表达式产生一个元组，则必须用括号包裹。\\r\\n这里我们通过将列表中的每个元素乘3返回一个新列表：\\r\\n>>>vec = [2, 4, 6]\\r\\n>>>[3*x for x in vec]\\r\\n[6, 12, 18]\\r\\n现在我们玩点小花样：\\r\\n>>>[[x, x**2] for x in vec]\\r\\n[[2, 4], [4, 16], [6, 36]]\\r\\n下面我们对序列中的每个元素应用方法：\\r\\n>>>freshfruit = [\' banana\', \' loganberry \', \'passion fruit \']\\r\\n>>>[weapon.strip() for weapon in freshfruit]\\r\\n[\'banana\', \'loganberry\', \'passion fruit\']\\r\\n我们还可以使用 if 子句进行过滤：\\r\\n>>>[3*x for x in vec if x > 3]\\r\\n[12, 18]\\r\\n>>>[3*x for x in vec if x < 2]\\r\\n[]\\r\\n经常可以不适用括号创建元组，但这里不行：\\r\\n>>>[x, x**2 for x in vec] # error - parens required for tuples\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\n[x, x**2 for x in vec]\\r\\n^\\r\\nSyntaxError: invalid syntax\\r\\n>>>[(x, x**2) for x in vec]\\r\\n[(2, 4), (4, 16), (6, 36)]\\r\\n这里有一个嵌套循环和其他小技巧的演示：\\r\\n>>>vec1 = [2, 4, 6]\\r\\n>>>vec2 = [4, 3, -9]\\r\\n>>>[x*y for x in vec1 for y in vec2]\\r\\n[8, 6, -18, 16, 12, -36, 24, 18, -54]\\r\\n>>>[x+y for x in vec1 for y in vec2]\\r\\n[6, 5, -7, 8, 7, -5, 10, 9, -3]\\r\\n>>>[vec1[i]*vec2[i] for i in range(len(vec1))]\\r\\n[8, 12, -54]\\r\\n列表推导式亦可以使用复杂的表达式和嵌套函数：\\r\\n>>>[str(round(355/113, i)) for i in range(1, 6)]\\r\\n\"},{\"page\":33,\"content\":\"33\\r\\n[\'3.1\', \'3.14\', \'3.142\', \'3.1416\', \'3.14159\']\\r\\n5.1.4. 嵌套列表推导式\\r\\n如果你已对此抱有兴趣，是的，列表推导式可以嵌套。他们是一种功能强大的工具，但\\r\\n和所有功能强大的工具一样，如果确实需要使用，你需要格外谨慎。\\r\\n考虑以下由包含三个列表的列表构成的3x3矩阵，每行一个列表。\\r\\n>>>mat = [\\r\\n... [1, 2, 3],\\r\\n... [4, 5, 6],\\r\\n... [7, 8, 9],\\r\\n... ]\\r\\n现在，如果想要交换行和列你应该使用列表推导式。\\r\\n>>>print([[row[i] for row in mat] for i in [0, 1, 2]])\\r\\n[[1, 4, 7], [2, 5, 8], [3, 6, 9]]\\r\\n嵌套 列表推导式需要特别注意：\\r\\n当嵌套列表推导式时，想要避免麻烦就从右到左读取。\\r\\n下面是一个关于这个片段（指上文中的嵌套列表推导式）更冗长的清晰版本：\\r\\nfor i in [0, 1, 2]:\\r\\nfor row in mat:\\r\\nprint(row[i], end=\\\"\\\")\\r\\nprint()\\r\\n在实际中，你应该更喜欢使用内置函数组成复杂流程语句。对此种情况 zip() 函数将会\\r\\n做的更好：\\r\\n>>>list(zip(*mat))\\r\\n[(1, 4, 7), (2, 5, 8), (3, 6, 9)]\\r\\n更多关于本行中使用的星号（*）的说明，参考 Unpacking Argument Lists 拆分参数列\\r\\n表 章节。\\r\\n5.2. del 语句\\r\\n有一个方法可以使用索引而不是值从列表中删除一个元素： del 语句。这个具有返回\\r\\n值的 pop() 方法不同。 del 语句也可以用来删除列表的一个片段或者清空整个列表（前面\\r\\n我们是通过给切片赋一个空列表）。例如：\\r\\n>>>a = [-1, 1, 66.25, 333, 333, 1234.5]\\r\\n>>>del a[0]\\r\\n>>>a\\r\\n[1, 66.25, 333, 333, 1234.5]\\r\\n>>>del a[2:4]\\r\\n>>>a\\r\\n[1, 66.25, 1234.5]\\r\\n\"},{\"page\":34,\"content\":\"34\\r\\n>>>del a[:]\\r\\n>>>a\\r\\n[]\\r\\ndel 也可以用来删除整个变量：\\r\\n>>>del a\\r\\n此后，任何对 a 名字的引用就会出错（至少在对它赋其它值前）。稍后，我们会发现 del\\r\\n的其他用法。\\r\\n5.3. 元组和序列\\r\\n我们知道列表和字符串具有很多通用的属性，例如索引和切片操作。他们是 序列 数据\\r\\n类型（参考 Sequence Types — str, bytes, bytearray, list, tuple, range ）的两个例子。因\\r\\n为 Python是一中不断进化的语言，也可能添加其他序列数据类型（支持）。这里是另一种标\\r\\n准序列数据类型： 元组（tuple） 。\\r\\n元组由若干逗号分隔的值组成，例如：\\r\\n>>>t = 12345, 54321, \'hello!\'\\r\\n>>>t[0]\\r\\n12345\\r\\n>>>t\\r\\n(12345, 54321, \'hello!\')\\r\\n>>># Tuples may be nested:\\r\\n...u = t, (1, 2, 3, 4, 5)\\r\\n>>>u\\r\\n((12345, 54321, \'hello!\'), (1, 2, 3, 4, 5))\\r\\n如你所见，元组输出时总是用括号包裹的，这便于正确的表达嵌套元组。在输入时两边\\r\\n的括号是可选的，但不论如何括号通常是必须得（如果元组是更大的表达式的一部分）。\\r\\n元组有很多用处。例如：(x, y)坐标点，数据库中员工的记录，等等。像字符串一样，\\r\\n元组是不可变的：不能给元组的独立元素赋值（尽管你可以使用切片和连接来模仿这些功\\r\\n能）。也可以使用包含可变对象创建元组，比如列表。\\r\\n一个特殊的问题就是构造包含0或1个元素的元组：为了适用此情况，语法上需要一个\\r\\n额外的做法。空元组由一对空括号构成，包含一个元素的元组需要在其后面跟一个逗号来构\\r\\n成（在括号中包含一个值是不够得）。丑陋，但这有效。比如：\\r\\n>>>empty = ()\\r\\n>>>singleton = \'hello\', # <-- note trailing comma\\r\\n>>>len(empty)\\r\\n0\\r\\n>>>len(singleton)\\r\\n1\\r\\n>>>singleton\\r\\n(\'hello\',)\\r\\nt = 12345, 54321, \'hello!\' 语句是 元组封装 的一个示例：值 12345 、54321 和 hello! 被\\r\\n\"},{\"page\":35,\"content\":\"35\\r\\n封装进一个元组。其逆反操作也是可以的：\\r\\n>>>x, y, z = t\\r\\n这非常适合称为 序列拆分 ，并且对所有的右操作序列都可以工作。序列拆分要求等号\\r\\n左边的变量数目和序列中的元素数目要相同。注意：多重赋值其实就是元组封装和序列拆分\\r\\n的结合。\\r\\n5.4. 集合\\r\\nPython同样包含一种 集合 数据类型。集合就是一个包含不同元组的无序集。基本功\\r\\n能包括关系测试和剔除重复记录。集合对象同样支持数学操作，像联合（union）、交\\r\\n（intersection）、差（difference）和对称差（symmetric difference）。\\r\\n大括号或 set() 函数可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而\\r\\n不是 {} 。后者用于创建空字典，我们在下一节中介绍的一种数据结构。\\r\\n一下是简单的演示：\\r\\n>>>basket = {\'apple\', \'orange\', \'apple\', \'pear\', \'orange\', \'banana\'}\\r\\n>>>print(basket)\\r\\n{\'orange\', \'banana\', \'pear\', \'apple\'}\\r\\n>>>fruit = [\'apple\', \'orange\', \'apple\', \'pear\', \'orange\', \'banana\']\\r\\n>>>fruit = set(basket) # create a set without duplicates\\r\\n>>>fruit\\r\\n{\'orange\', \'pear\', \'apple\', \'banana\'}\\r\\n>>>fruit = {\'orange\', \'apple\'} # {} syntax is equivalent to [] for lists\\r\\n>>>fruit\\r\\n{\'orange\', \'apple\'}\\r\\n>>>\'orange\' in fruit # fast membership testing\\r\\nTrue\\r\\n>>>\'crabgrass\' in fruit\\r\\nFalse\\r\\n>>># Demonstrate set operations on unique letters from two words\\r\\n...\\r\\n>>>a = set(\'abracadabra\')\\r\\n>>>b = set(\'alacazam\')\\r\\n>>>a # unique letters in a\\r\\n{\'a\', \'r\', \'b\', \'c\', \'d\'}\\r\\n>>>a - b # letters in a but not in b\\r\\n{\'r\', \'d\', \'b\'}\\r\\n>>>a | b # letters in either a or b\\r\\n{\'a\', \'c\', \'r\', \'d\', \'b\', \'m\', \'z\', \'l\'}\\r\\n>>>a & b # letters in both a and b\\r\\n{\'a\', \'c\'}\\r\\n>>>a ^ b # letters in a or b but not both\\r\\n{\'r\', \'d\', \'b\', \'m\', \'z\', \'l\'}\\r\\n\"},{\"page\":36,\"content\":\"36\\r\\n类似 for lists ，这里有一种集合推导式语法：\\r\\n>>>a = {x for x in \'abracadabra\' if x not in \'abc\'}\\r\\n>>>a\\r\\n{\'r\', \'d\'}\\r\\n5.5. 字典\\r\\n另一种使用的 Python内建数据类型是 字典 （参考 Mapping Types — dict ）。字典有\\r\\n时在其他语言中称为“关联记忆”（ associative memories ）或“关联数组”（ associative\\r\\narrays ）。与序列不同，序列是以连续的数字作为索引，而字典是以 关键字 作为索引。关\\r\\n键字可以是任意不可变类型，数字和字符串都可以作为关键字。如果元组只包含数字、字符\\r\\n串或元组，那么也可以作为关键字使用。如果元组直接或间接包含可变对象，那么就不可以\\r\\n作为关键字使用。你不能将列表作为关键字（使用），因为列表可以通过索引赋值、切片赋\\r\\n值或 append() 和 extend() 方法改变。\\r\\n最好将字典理解成一个无序的 key: value 对（集合），其中关键字必须是互不相同的（在\\r\\n统一字典中）。可以用一对大括号 {} 会创建一个空字典。在大括号中放置用逗号分隔的 key:\\r\\nvalue 对将给字典添加初始化值，这也是字段输出的方式。\\r\\n字典主要的操作就是根据关键字来存储或获取值。同样可以使用 del 删除 key: value\\r\\n对。如果你使用一个已存在的关键字存储（新值），旧的值将被覆盖。试图使用一个不存在\\r\\n的关键字获取值将导致错误。\\r\\n对一个字典执行 list(d.keys()) 将返回一个字典中所有关键字组成的无序列表（如果你\\r\\n想要排序，只需使用 sorted(d.keys()) ）。 [1] 使用 in 关键字（指 Python语法）可以检查\\r\\n字典中是否存在某个关键字（指字典）。\\r\\n这里是使用字典的一个小示例：\\r\\n>>>tel = {\'jack\': 4098, \'sape\': 4139}\\r\\n>>>tel[\'guido\'] = 4127\\r\\n>>>tel\\r\\n{\'sape\': 4139, \'guido\': 4127, \'jack\': 4098}\\r\\n>>>tel[\'jack\']\\r\\n4098\\r\\n>>>del tel[\'sape\']\\r\\n>>>tel[\'irv\'] = 4127\\r\\n>>>tel\\r\\n{\'guido\': 4127, \'irv\': 4127, \'jack\': 4098}\\r\\n>>>list(tel.keys())\\r\\n[\'irv\', \'guido\', \'jack\']\\r\\n>>>sorted(tel.keys())\\r\\n[\'guido\', \'irv\', \'jack\']\\r\\n>>>\'guido\' in tel\\r\\nTrue\\r\\n>>>\'jack\' not in tel\\r\\nFalse\\r\\ndict() 构造函数可以直接从 key-value 对中创建字典：\\r\\n\"},{\"page\":37,\"content\":\"37\\r\\n>>>dict([(\'sape\', 4139), (\'guido\', 4127), (\'jack\', 4098)])\\r\\n{\'sape\': 4139, \'jack\': 4098, \'guido\': 4127}\\r\\n此外，字典推导式可以从任意的键值表达式中创建字典：\\r\\n>>>{x: x**2 for x in (2, 4, 6)}\\r\\n{2: 4, 4: 16, 6: 36}\\r\\n如果关键字都是简单的字符串，有时通过关键字参数指定 key-value 对更为方便：\\r\\n>>>dict(sape=4139, guido=4127, jack=4098)\\r\\n{\'sape\': 4139, \'jack\': 4098, \'guido\': 4127}\\r\\n5.6. 遍历技巧\\r\\n当遍历字典时，关键字及其对应的值可以使用 items() 方法同时获得。\\r\\n>>>knights = {\'gallahad\': \'the pure\', \'robin\': \'the brave\'}\\r\\n>>>for k, v in knights.items():\\r\\n... print(k, v)\\r\\n...\\r\\ngallahad the pure\\r\\nrobin the brave\\r\\n当遍历一个序列时，位置索引及其对应的值可以使用 enumerate() 函数同时获取。\\r\\n>>>for i, v in enumerate([\'tic\', \'tac\', \'toe\']):\\r\\n... print(i, v)\\r\\n...\\r\\n0 tic\\r\\n1 tac\\r\\n2 toe\\r\\n想要同时遍历两个或更多序列，可以使用 zip() 函数将属性组合。\\r\\n>>>questions = [\'name\', \'quest\', \'favorite color\']\\r\\n>>>answers = [\'lancelot\', \'the holy grail\', \'blue\']\\r\\n>>>for q, a in zip(questions, answers):\\r\\n... print(\'What is your {0}? It is {1}.\'.format(q, a))\\r\\n...\\r\\nWhat is your name? It is lancelot.\\r\\nWhat is your quest? It is the holy grail.\\r\\nWhat is your favorite color? It is blue.\\r\\n想要反序遍历一个序列，首先以正序指定这个序列，然后对其调用 reversed() 函数。\\r\\n>>>for i in reversed(range(1, 10, 2)):\\r\\n... print(i)\\r\\n...\\r\\n9\\r\\n\"},{\"page\":38,\"content\":\"38\\r\\n7\\r\\n5\\r\\n3\\r\\n1\\r\\n想要按顺序遍历一个序列，使用 sorted() 函数返回一个新的排序列表，这不会改变原\\r\\n序列。\\r\\n>>>basket = [\'apple\', \'orange\', \'apple\', \'pear\', \'orange\', \'banana\']\\r\\n>>>for f in sorted(set(basket)):\\r\\n... print(f)\\r\\n...\\r\\napple\\r\\nbanana\\r\\norange\\r\\npear\\r\\n5.7. 深入条件控制\\r\\n在 while 和 if 语句中使用的条件可以是任何操作符，不仅仅是比较运算符。\\r\\nT比较操作符 in 和 not in 检查某个值是否存在（不存在）于某个序列中。操作符 is 和\\r\\nis not 比较两个对象是否是同一个对象，这只和类似列表这样的可变对象有关。所有的比较\\r\\n操作符具有相同的优先级，比所有的数值操作符低。\\r\\n比较操作可以串联（使用）。列如： a < b == c 会检查 a 是否小于 b ，并且 b 是否\\r\\n等于 c 。\\r\\n比较操作可以混合使用逻辑操作符 and 和 or ，并且比较的结果（或者任何其他逻辑\\r\\n表达式）可以使用 not 操作取反。这些操作符（指 and , or 和 not ）的优先级低于比较操\\r\\n作符，在它们之中 not 具有最高的优先级， or 则最低。所以 A and not B or C 与 (A and (not\\r\\nB)) or C 是等价的。当然，可以使用括号表达期望的比较操作。\\r\\n逻辑操作符 and 和 or 也被称作 短路 操作符。从左到右计算它们的参数，一旦结果\\r\\n确定就停止。例如：如果 A 和 C 是真，但 B 是假， A and B and C 就不会计算 C 表达式\\r\\n的值。当作为一个普通的值而非逻辑值时，短路操作的返回值是最后一个被计算的参数。\\r\\n可以将比较操作或其他逻辑表达式的结果赋值给一个变量。例如：\\r\\n>>>string1, string2, string3 = \'\', \'Trondheim\', \'Hammer Dance\'\\r\\n>>>non_null = string1 or string2 or string3\\r\\n>>>non_null\\r\\n\'Trondheim\'\\r\\n注意：在 Python中与 C语言不同，赋值操作不能出现在表达式中。 C程序员可能会对\\r\\n此抱怨，但是它避免了一个在 C程序中经常遇到的典型的问题：想要在一个表达式中使用\\r\\n== 操作时却输入了 = 。\\r\\n5.8. 比较序列和其他类型\\r\\n相同的序列对象可以进行比较操作。比较操作按 字典序 进行：首先比较前两个元素，\\r\\n\"},{\"page\":39,\"content\":\"39\\r\\n如果它们不同就会决定比较的结果；如果它们相等就会比较下两个元素，依次类推，直到两\\r\\n个序列末尾。如果被比较的两个元素也为相同类型的序列对象，就对其作递归字典序比较。\\r\\n如果两个序列的所有元素都相等，那么这两个序列就被认为是相等的。如果一个序列是另一\\r\\n个序列的初始子序列，较短的序列就小于另外一个。字符串的字典序按照单个字符的\\r\\nUnicode区位码顺序。一些同类型序列间比较操作的例子：\\r\\n(1, 2, 3) < (1, 2, 4)\\r\\n[1, 2, 3] < [1, 2, 4]\\r\\n\'ABC\' < \'C\' < \'Pascal\' < \'Python\'\\r\\n(1, 2, 3, 4) < (1, 2, 4)\\r\\n(1, 2) < (1, 2, -1)\\r\\n(1, 2, 3) == (1.0, 2.0, 3.0)\\r\\n(1, 2, (\'aa\', \'ab\')) < (1, 2, (\'abc\', \'a\'), 4)\\r\\n注意：只要对象含有合适的比较方法，不同类型对象之间通过 < 或 > 的比较是合法\\r\\n的。例如，不同数字类型会根据他们的值进行比较，因此0等于0.0，等等。此外，如果没有\\r\\n确定的排序，解释器将会抛出 TypeError 异常。\\r\\nFootnotes\\r\\n1]\\r\\n(1, 2)\\r\\n调用 d.keys() 会返回一个 dictionary view 对象。它支持类似关系测试和迭代的操\\r\\n作，但是它并非原始字典的副本——它仅是一个 视图 。\\r\\n6. 模块\\r\\n如果你退出 Python解释器并重新进入，你做的任何定义（变量和方法）都会丢失。因\\r\\n此，如果你想要编写一些更大的程序，为准备解释器输入使用一个文本编辑器会更好，并以\\r\\n那个文件替代作为输入执行。这就是传说中的 脚本 。随着你的程序变得越来越长，你可能\\r\\n想要将它分割成几个更易于维护的文件。你也可能想在不同的程序中使用顺手的函数，而不\\r\\n是把代码在它们之间中拷来拷去。\\r\\n为此，Python提供了一种将定义保存在一个文件中的方法，然后在脚本中或解释器的\\r\\n交互实例中使用。这个文件被称作 模块 ，模块中的定义可以被 导入 到其他的模块或者\\r\\nmain 模块（你在顶层进入执行脚本或计算模式下的变量的集合）。\\r\\n模块就是一个包含Python定义和语句的文件。文件名就是添加了 .py 扩展名的模块名。\\r\\n在一个模块中，模块的名字（字符串形式）和全局标量 __name__ 的值相同。例如，用你\\r\\n喜欢的编辑器在当前目录下建立一个包含以下内容的 fibo.py 文件。\\r\\n# Fibonacci numbers module\\r\\ndef fib(n): # write Fibonacci series up to n\\r\\na, b = 0, 1\\r\\nwhile b < n:\\r\\nprint(b, end=\' \')\\r\\na, b = b, a+b\\r\\nprint()\\r\\ndef fib2(n): # return Fibonacci series up to n\\r\\nresult = []\\r\\n\"},{\"page\":40,\"content\":\"40\\r\\na, b = 0, 1\\r\\nwhile b < n:\\r\\nresult.append(b)\\r\\na, b = b, a+b\\r\\nreturn result\\r\\n现在进入 Python解释器并使用以下命令导入这个模块：\\r\\n>>>import fibo\\r\\n这并不会在当前符号表内直接引入 fibo 中定义的函数名，这里仅引入了 fibo 的模块\\r\\n名。你可以通过模块名来使用那些方法：\\r\\n>>> fibo.fib(1000)\\r\\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\\r\\n>>> fibo.fib2(100)\\r\\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\\r\\n>>> fibo.__name__\\r\\n\'fibo\'\\r\\n如果打算频繁使用一个函数，你可以将它赋予一个本地变量：\\r\\n>>>fib = fibo.fib\\r\\n>>>fib(500)\\r\\n1 1 2 3 5 8 13 21 34 55 89 144 233 377\\r\\n6.1. 深入 Python模块\\r\\n除了包含函数定义外，模块也可以包含可执行语句。这些语句一般用来初始化模块。他\\r\\n们仅在 第一次 被导入的地方执行一次。 [1]\\r\\n每个模块都有自己私有的符号表，被模块内所有的函数定义作为全局符号表使用。因此，\\r\\n模块的作者可以在模块内部使用全局变量，而无需担心它与某个用户的全局变量意外冲突。\\r\\n从另一个方面讲，如果你确切的知道自己在做什么，你可以使用引用模块函数的表示法访问\\r\\n模块的全局变量， modname.itemname 。\\r\\n模块可以导入其他的模块。一个（好的）习惯是将所有的 import 语句放在模块的开始\\r\\n（或者是脚本），这并非强制。被导入的模块名会放入当前模块的全局符号表中。\\r\\n还有一种 import 语句的变体，可以从一个模块中将名字直接导入到当前模块的符号表\\r\\n中。例如：\\r\\n>>>from fibo import fib, fib2\\r\\n>>>fib(500)\\r\\n1 1 2 3 5 8 13 21 34 55 89 144 233 377\\r\\n这种方式不会把操作的模块名引入当前符号表中（所以在这个列子中， fibo 是未定义\\r\\n的）。\\r\\n更进一步，还有一种导入模块中定义的所有名称的变体：\\r\\n>>>from fibo import *\\r\\n>>>fib(500)\\r\\n\"},{\"page\":41,\"content\":\"41\\r\\n1 1 2 3 5 8 13 21 34 55 89 144 233 377\\r\\n这会导入那些所有除了以下划线（ _ ）开头的名称。大多数情况，Pythong程序员不\\r\\n会使用这个技巧。因为它会在解释器中引入一个未知的名称集合，很可能会将你已经定义的\\r\\n东西覆盖掉。\\r\\n出于效率的理由，在一个解释器会话中每个模块仅被导入一次。所以，如果你修改了你\\r\\n的模块，你必须重启你的解释器——或者如果只是一个你想要交互测试的模块，使用\\r\\nimp.reload() 方法。比如， import imp; imp.reload(modulename) 。\\r\\n6.1.1. Executing modules as scripts 像脚本一样执行模块\\r\\n当你使用以下方式运行 Python模块时，模块中的代码便会被执行。\\r\\npython fibo.py <arguments>\\r\\n就像你导入它一样，但是 __name__ 会被设置为 \'__main__\' 。这意味着，在你的模块\\r\\n末尾添加如下的代码：\\r\\nif __name__ == \\\"__main__\\\":\\r\\nimport sys\\r\\nfib(int(sys.argv[1]))\\r\\n你就可以让文件即是可导入的模块又是可用的脚本，因为这些命令解析的代码仅当模块\\r\\n被当做“主”文件执行时才会被运行。\\r\\n$ python fibo.py 50\\r\\n1 1 2 3 5 8 13 21 34\\r\\n如果只是导入模块，代码将不会运行：\\r\\n>>>import fibo\\r\\n>>>\\r\\n这通常被用来为模块提供一个方便的用户接口，或者为了测试目的（将模块当做脚本一\\r\\n样运行，以便执行一组测试）\\r\\n6.1.2. The Module Search Path 模块的搜索路径\\r\\n当一个名为 spam 的模块被导入时，解释器首先会在当前目录搜索一个名为 spam.py\\r\\n的文件，然后是在环境变量 PYTHONPATH 中定义的目录列表。这和 shell变量 PATH 具\\r\\n有一样的语法，即一系列目录名的列表。如果没有定义 PYTHONPATH ，或者按照里面的\\r\\n路径没有找到文件，解释器会继续在 Python默认安装路径中搜索。在 Unix系统上，这通常\\r\\n是 .:/usr/local/lib/python 。\\r\\n实际上，模块都是在变量 sys.path 定义的目录列表中查找，它是从包含输入脚本的目\\r\\n录（当前目录）、 PYTHONPATH 和 Python默认安装目录初始而来。这允许那些确切知道\\r\\n在做什么的 Pythong程序可以修改或替换模块搜索路径。注意：因为包含执行脚本的目录\\r\\n也在搜索路径中，所以重要的是脚本与 Python标准模块不应该具有相同的名字，否则当导\\r\\n入一个模块时 Python将会尝试把脚本当做模块加载。这通常会导致一个错误。更多信息请\\r\\n参考 Standard Modules 标准模块 。\\r\\n6.1.3. “Compiled” Python files “编译的”Python文件\\r\\n作为一个为使用大量标准模块的小程序启动时间加速的重要方式，如果在 spam.py 所\\r\\n在的目录存在一个名为 spam.pyc 的文件，这被认为是模块 spam 的“字节码预编译”版本。\\r\\n\"},{\"page\":42,\"content\":\"42\\r\\n创建 spam.pyc 时文件 spam.py 的修改时间版本会被记录在 spam.pyc 文件中，如果这两者\\r\\n不一致，那么 .pyc 文件就会被忽略。\\r\\n通常，你无需自行创建 spam.pyc 文件。每次 spam.py 成功编译后，都会尝试将编译\\r\\n版本写入 spam.pyc 文件。如果尝试写入失败，也不会引发什么错误。不论什么情况，如果\\r\\n文件没有被正确写入，目标文件 spam.pyc 会被认为是无效的并且会被忽略。 spam.pyc 文\\r\\n件的内容是平台无关的，所以一个 Python模块目录可以被不同体系架构的机器共享。\\r\\n一些专业的提示：\\r\\n当使用 -O 标志启动 Python解释器时，Python会生成优化过的代码并存储在 .pyo 文\\r\\n件中。当前的优化器只能去除 assert 语句，初次之后别无用处。当使用 -O 时， 所有 的\\r\\nbytecode 都会被优化： .py 文件会被编译成优化的字节码，并且忽略 .pyc 文件。\\r\\n为 Python解释器传递两个 -O 标志（ -OO ）将使字节码编译器最优化执行，这可能\\r\\n在一些罕见的情况下导致程序执行异常。目前只会将 __doc__ 字符串从字节码中移除，并\\r\\n保存为更加紧凑的 .pyo 文件。虽然很多程序可能依赖这些有效的（优化），但你还是应该\\r\\n在确定的情况下使用这个选项。\\r\\n程序不会因为从 .pyc 文件或 .pyo 文件中读取而比从 .py 文件中读取运行的更快。唯\\r\\n一提升的是他们的加载速度。\\r\\n当从命令行通过指定文件名执行一个脚本时，脚本的字节码不会被写到 .pyc 或 .pyo\\r\\n文件中。因此，通过将大多数代码放进一个模块，并使用一个导入此模块的引导脚本可能会\\r\\n减少脚本的启动时间。也可以在命令行中直接命名 .pyc 或 .pyo 文件。\\r\\n同一模块还可以只有 spam.pyc 文件（或者 spam.pyo ，当使用 -O 时）而没有 spam.py\\r\\n文件。这可以作为发布 Python代码库的形式，让反向工程者稍微难过点~\\r\\ncompileall 模块可以将同一目录的所有模块编译成 .pyc 文件（或者 .pyo 文件，当使用\\r\\n-O 时）。\\r\\n6.2. Standard Modules 标准模块\\r\\n伴随 Python发布版包含一个标准模块库，在独立的 Python库参考文档中描述（即后\\r\\n面的“库参考文档”）。有些模块内置在解释器里，这些或者为效率或者为支持类似系统调用\\r\\n等系统级访问控制提供了操作入口，虽然他们不是语言核心的组成部分但仍然是内置的。这\\r\\n些模块会根据底层平台进行不同的选择配置，比如 winreg 模块只在Windows系统上提供。\\r\\n有一个特别的模块应该注意：sys ，它内置在每个 Python解释器中。变量 sys.ps1 和 sys.ps2\\r\\n分别定义了主提示符和次提示符使用的字符串。\\r\\n>>>import sys\\r\\n>>>sys.ps1\\r\\n\'>>> \'\\r\\n>>>sys.ps2\\r\\n\'... \'\\r\\n>>>sys.ps1 = \'C> \'\\r\\nC> print(\'Yuck!\')\\r\\nYuck!\\r\\nC>\\r\\n这两个变量仅在解释器处于交互模式下定义。（译著：仅在Python命令行有效，在Python\\r\\nIDLE中无效）\\r\\n变量 sys.path 是一个字符串列表，决定了解释器搜索模块的路径。如果定义了环境变\\r\\n\"},{\"page\":43,\"content\":\"43\\r\\n量 PYTHONPATH ，它将以此初始化默认路径，否则就使用一个内置的默认值。你可以使\\r\\n用标准的列表操作符来修改这个值。\\r\\n>>>import sys\\r\\n>>>sys.path.append(\'/ufs/guido/lib/python\')\\r\\n6.3. dir() 函数\\r\\n内置函数 dir() 用来查找模块中定义的名称。它返回一个排序后的字符串列表。\\r\\n>>>import fibo, sys\\r\\n>>>dir(fibo)\\r\\n[\'__name__\', \'fib\', \'fib2\']\\r\\n>>>dir(sys)\\r\\n[\'__displayhook__\', \'__doc__\', \'__excepthook__\', \'__name__\', \'__stderr__\',\\r\\n\'__stdin__\', \'__stdout__\', \'_getframe\', \'api_version\', \'argv\',\\r\\n\'builtin_module_names\', \'byteorder\', \'callstats\', \'copyright\',\\r\\n\'displayhook\', \'exc_info\', \'excepthook\',\\r\\n\'exec_prefix\', \'executable\', \'exit\', \'getdefaultencoding\', \'getdlopenflags\',\\r\\n\'getrecursionlimit\', \'getrefcount\', \'hexversion\', \'maxint\', \'maxunicode\',\\r\\n\'meta_path\', \'modules\', \'path\', \'path_hooks\', \'path_importer_cache\',\\r\\n\'platform\', \'prefix\', \'ps1\', \'ps2\', \'setcheckinterval\', \'setdlopenflags\',\\r\\n\'setprofile\', \'setrecursionlimit\', \'settrace\', \'stderr\', \'stdin\', \'stdout\',\\r\\n\'version\', \'version_info\', \'warnoptions\']\\r\\n如果没有指定参数，函数 dir() 会列出当前你已经定义的名称。\\r\\n>>>a = [1, 2, 3, 4, 5]\\r\\n>>>import fibo\\r\\n>>>fib = fibo.fib\\r\\n>>>dir()\\r\\n[\'__builtins__\', \'__doc__\', \'__file__\', \'__name__\', \'a\', \'fib\', \'fibo\', \'sys\']\\r\\n注意：它会把所有类型的名称都列出来：变量，模块，函数等。\\r\\ndir() 函数并不会列出内置变量和函数的名称。如果你想这么做，它们被定义在 builtins\\r\\n标准模块。\\r\\n>>>import builtins\\r\\n>>>dir(builtins)\\r\\n[\'ArithmeticError\', \'AssertionError\', \'AttributeError\', \'BaseException\', \'Buffer\\r\\nError\', \'BytesWarning\', \'DeprecationWarning\', \'EOFError\', \'Ellipsis\', \'Environme\\r\\nntError\', \'Exception\', \'False\', \'FloatingPointError\', \'FutureWarning\', \'Generato\\r\\nrExit\', \'IOError\', \'ImportError\', \'ImportWarning\', \'IndentationError\', \'IndexErr\\r\\nor\', \'KeyError\', \'KeyboardInterrupt\', \'LookupError\', \'MemoryError\', \'NameError\',\\r\\n\'None\', \'NotImplemented\', \'NotImplementedError\', \'OSError\', \'OverflowError\', \'P\\r\\nendingDeprecationWarning\', \'ReferenceError\', \'RuntimeError\', \'RuntimeWarning\', \'\\r\\nStopIteration\', \'SyntaxError\', \'SyntaxWarning\', \'SystemError\', \'SystemExit\', \'Ta\\r\\n\"},{\"page\":44,\"content\":\"44\\r\\nbError\', \'True\', \'TypeError\', \'UnboundLocalError\', \'UnicodeDecodeError\', \'Unicod\\r\\neEncodeError\', \'UnicodeError\', \'UnicodeTranslateError\', \'UnicodeWarning\', \'UserW\\r\\narning\', \'ValueError\', \'Warning\', \'ZeroDivisionError\', \'__build_class__\', \'__deb\\r\\nug__\', \'__doc__\', \'__import__\', \'__name__\', \'__package__\', \'abs\', \'all\', \'any\',\\r\\n\'ascii\', \'bin\', \'bool\', \'bytearray\', \'bytes\', \'chr\', \'classmethod\', \'compile\', \'\\r\\ncomplex\', \'copyright\', \'credits\', \'delattr\', \'dict\', \'dir\', \'divmod\', \'enumerate\\r\\n\', \'eval\', \'exec\', \'exit\', \'filter\', \'float\', \'format\', \'frozenset\', \'getattr\',\\r\\n\'globals\', \'hasattr\', \'hash\', \'help\', \'hex\', \'id\', \'input\', \'int\', \'isinstance\',\\r\\n\'issubclass\', \'iter\', \'len\', \'license\', \'list\', \'locals\', \'map\', \'max\', \'memory\\r\\nview\', \'min\', \'next\', \'object\', \'oct\', \'open\', \'ord\', \'pow\', \'print\', \'property\'\\r\\n, \'quit\', \'range\', \'repr\', \'reversed\', \'round\', \'set\', \'setattr\', \'slice\', \'sort\\r\\ned\', \'staticmethod\', \'str\', \'sum\', \'super\', \'tuple\', \'type\', \'vars\', \'zip\']\\r\\n6.4. 包\\r\\n包是通过使用“点模块名称”创建 Python模块命名空间的一种方法。列如，模块名称 A.B\\r\\n表示一个在名为 A 的包下的名为 B 的子模块。就像使用模块让不同模块的作者无需担心\\r\\n彼此全局变量名称（冲突）一样，点模块名称让多模块包的作者无需担心彼此的模块名称（冲\\r\\n突），像 NumPy或 Python图像库。\\r\\n假设，你为了统一处理声音文件和数据想要设计一套模块（一个“包”）。现在有很多不\\r\\n同的声音文件格式，例如： .wav ， .aiff ， .au ，通常以他们的扩展名区分。所以为了在\\r\\n不同文件格式间转换，你可能需要创建并管理一个不断增长的模块集。还可能有很多你想用\\r\\n来处理声音数据的不同操作，比如：混音，添加回声，应用均衡器，创建人造立体声等。因\\r\\n此，为了进行这些操作你还需要另外编写一个永远也完不成的模块。这里是你的包的一种可\\r\\n能的结构（用层级文件系统表示）。\\r\\nsound/ Top-level package\\r\\n__init__.py Initialize the sound package\\r\\nformats/ Subpackage for file format conversions\\r\\n__init__.py\\r\\nwavread.py\\r\\nwavwrite.py\\r\\naiffread.py\\r\\naiffwrite.py\\r\\nauread.py\\r\\nauwrite.py\\r\\n...\\r\\neffects/ Subpackage for sound effects\\r\\n__init__.py\\r\\necho.py\\r\\nsurround.py\\r\\nreverse.py\\r\\n...\\r\\nfilters/ Subpackage for filters\\r\\n__init__.py\\r\\n\"},{\"page\":45,\"content\":\"45\\r\\nequalizer.py\\r\\nvocoder.py\\r\\nkaraoke.py\\r\\n...\\r\\n当导入这个包时，Python通过 sys.path 搜索路径查找包含这个包的子目录。\\r\\n为了让 Python将目录当做内容包，目录中必须包含 __init__.py 文件。这是为了避免一\\r\\n个含有烂俗名字的目录无意中隐藏了稍后在模块搜索路径中出现的有效模块，比如 string 。\\r\\n最简单的情况下，只需要一个空的 __init__.py 文件即可。当然它也可以执行包的初始化代\\r\\n码，或者定义稍后介绍的 __all__ 变量。\\r\\n用户可以每次只导入包里的特定模块，例如：\\r\\nimport sound.effects.echo\\r\\n这回加载 sound.effects.echo 子模块。你必须使用它的全名来引用。\\r\\nsound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\\r\\n导入子模块的一种可替换的方法：\\r\\nfrom sound.effects import echo\\r\\n这同样会加载 echo 子模块，并使它无需使用包前缀即可访问，如下所示：\\r\\necho.echofilter(input, output, delay=0.7, atten=4)\\r\\n还有另一种变化就是可以直接导入想要的变量或函数：\\r\\nfrom sound.effects.echo import echofilter\\r\\n再次，这会加载 echo 子模块，但这使它的函数 echofilter() 可以直接使用。\\r\\nechofilter(input, output, delay=0.7, atten=4)\\r\\n注意：当使用 from package import item 时， item 既可以是包的子模块（或子包），也\\r\\n可以是包中定义的其他名称，比如函数、类或变量。 import 语句首先检查包中是否定义了\\r\\nitem ，如果没有它就假设这是一个模块并尝试加载它。如果没有找到这个模块，就会抛出\\r\\n一个 ImportError 异常。\\r\\n相反的，当使用 import item.subitem.subsubitem 语法时，除了最后一项外所有的项必须\\r\\n是一个包。最后一项可以是一个模块或包，但不能是其前面项定义的一个类、函数或变量。\\r\\n6.4.1. 从一个包中导入 *\\r\\n那么，当用户写下 from sound.effects import * 时会发生什么呢？理论上，人们期望这\\r\\n会以某种方式友好的对待文件系统，找出包内出现的所有子模块并把它们全部导入。不幸的\\r\\n是，这个操作在 Windows平台上不能很好的工作，因为它的文件系统总是没有关于文件名\\r\\n大小写的精确信息！（即不区分文件名大小写）在这类平台上，没有一种明确的途径知道在\\r\\n导入 ECHO.PY 时是否应该被当做一个 echo ， Echo 或者 ECHO 模块导入。（比如，\\r\\nWindows 95就有把所有显示的文件名第一个字母大写烦人习惯。） DOS系统的8+3文件名\\r\\n约束给长模块名带来了另一个有趣的问题。\\r\\n唯一的解决办法就是由包作者为包提供一个精确的索引。导入语句会使用如下的转换规\\r\\n则：如果包文件 __init__.py 代码中定义了一个名为 __all__ 的列表，当使用 from package\\r\\nimport * 时它被当做应该被导入的模块名称的列表。当发布包的一个新版本时，应该由包作\\r\\n\"},{\"page\":46,\"content\":\"46\\r\\n者负责保持这个列表是最新的。如果包作者在包中没有发现导入*的用法，那么他们也可以\\r\\n决定不去做这些。例如， sounds/effects/__init__.py 文件可以包含如下代码：\\r\\n__all__ = [\\\"echo\\\", \\\"surround\\\", \\\"reverse\\\"]\\r\\n这意味着 from sound.effects import * 将会从 sound 包中导入三个指定的子模块。\\r\\n如果没有定义 __all__ ， from sound.effects import * 语句 不会 从 sound.effects 包中\\r\\n将其所有的子模块导入到当前命名空间。它只会确定 sound.effects 包已经被导入（可能是\\r\\n通过执行 __init__.py 文件中的某段初始化代码），然后导入包中定义的任何名称。这会引入\\r\\n__init__.py 文件中定义的所有名称（及其明确加载的模块）。它同样会引入通过之前导入语\\r\\n句明确加载的包中的所有模块。思考以下代码：\\r\\nimport sound.effects.echo\\r\\nimport sound.effects.surround\\r\\nfrom sound.effects import *\\r\\n在这个示例中， echo 和 surround 模块被导入到当前命名空间，因为当 from...import\\r\\n语句执行时它们就通过 sound.effects` 包被定义。（同样可以通过定义 __all__ 来做到这一\\r\\n点。）\\r\\n注意：通常从包或模块中导入 * 的习惯是不被推荐的，因为它经常会让代码难以阅读。\\r\\n不过，在交互会话中使用它来减少输入是不会有问题的，并且有些模块被设计成只能通过特\\r\\n定的方法导入。\\r\\n记住，使用 from package import specific_submodule 永远不会有错！事实上，这是被推\\r\\n荐使用的方法，除非在不同包中导入的模块使用了相同的名字。\\r\\n6.4.2. 包内引用\\r\\n当包被组织成子包时（就像示例中的 sound 包），你可以使用绝对导入来引用兄弟包的\\r\\n子模块。例如，如果 sound.filter.vocoder 模块需要使用 sound.effects 包中的 echo 模块，可\\r\\n以使用 from sound.effects import echo 。\\r\\n你仍然可以通过 from module import name 导入语句方式使用相对导入。在相对导入中，\\r\\n通过使用前导点号来表示是从当前包或是父包中导入。列如，从 surround 包中你可以使用：\\r\\nfrom . import echo\\r\\nfrom .. import formats\\r\\nfrom ..filters import equalizer\\r\\n注意：相对导入是以当前模块名称为基础的。因为主模块的名称总是 \\\"__main__\\\" ，所\\r\\n以 Python程序中打算用作主模块的模块必须使用绝对导入。\\r\\n6.4.3. 跨目录的包\\r\\n包还支持一个特殊的属性： __path__ 。这会在那个文件中的代码执行前被初始化为一\\r\\n个包含包文件 __init__.py 的目录名字的列表。你可以修改这个变量，用来影响对包中包含\\r\\n的子包和模块的搜索。\\r\\n尽管这个特性并不常用，但它可以用来扩展一个包中的模块集合。\\r\\nFootnotes\\r\\n[1] 实际上，函数定义也是 可执行 的 语句 ，执行环境从模块的全局符号表查找函\\r\\n数名。\\r\\n\"},{\"page\":47,\"content\":\"47\\r\\n7. 输入输出\\r\\nThere are several ways to present the output of a program; data can be printed in a\\r\\nhuman-readable form, or written to a file for future use. This chapter will discuss some of\\r\\nthe possibilities.\\r\\n一个程序可以有几种输出方式：以人类可读的方式打印数据，或者写入一个文件供以后\\r\\n使用。本章将讨论几种可能性。\\r\\n7.1. 格式化输出\\r\\n到目前为止，我们已经解除了两种输出值的方法： 表达式语句 和 print() 函数。（第三\\r\\n种方式是使用文件对象的 write() 方法，标准文件输出可以参考 sys.stdout 库手册。）\\r\\n通常，你想要对输出做更多的格式控制，而不是简单的打印使用空格分隔的值。有两种\\r\\n方法可以格式化你的输出：第一种方法是由你自己处理整个字符串，通过使用字符串切割和\\r\\n连接操作可以创建任何你想要的输出形式。标准模块 string 包含一些将字符串填充到指定\\r\\n列宽度的有用操作，随后就会讨论这些。第二种方法是使用 str.format() 方法。\\r\\nstring 模块包含一个模版类，还支持另一种将值替换为字符串的方法。\\r\\n当然，还有一个问题：你如何将值转换为字符串？幸运的是，Python有几种方法可以\\r\\n将任何值转换为一个字符串：将它传递给 repr() 函数或 str() 函数。\\r\\nstr() 函数返回值的人类可读的表示形式，而 repr() 函数则生成可以由解释器读取的表\\r\\n现形式（如果没有相等的语法则产生一个 SyntaxError 错误）。对于那些没有一个特别的可\\r\\n供人类使用的表示形式的对象， str() 和 repr() 将返回同样的值。大多数值在使用两个函数\\r\\n时都会有相同的表现形式，像数字或者类似列表和字典的结构。特别的，字符串和浮点数具\\r\\n有两种独特的表现形式。\\r\\n下面是一些示例：\\r\\n>>>s = \'Hello, world.\'\\r\\n>>>str(s)\\r\\n\'Hello, world.\'\\r\\n>>>repr(s)\\r\\n\\\"\'Hello, world.\'\\\"\\r\\n>>>str(0.1)\\r\\n\'0.1\'\\r\\n>>>repr(0.1)\\r\\n\'0.10000000000000001\'\\r\\n>>>x = 10 * 3.25\\r\\n>>>y = 200 * 200\\r\\n>>>s = \'The value of x is \' + repr(x) + \', and y is \' + repr(y) + \'...\'\\r\\n>>>print(s)\\r\\nThe value of x is 32.5, and y is 40000...\\r\\n>>># The repr() of a string adds string quotes and backslashes:\\r\\n...hello = \'hello, world\\\\n\'\\r\\n>>>hellos = repr(hello)\\r\\n>>>print(hellos)\\r\\n\'hello, world\\\\n\'\\r\\n\"},{\"page\":48,\"content\":\"48\\r\\n>>># The argument to repr() may be any Python object:\\r\\n...repr((x, y, (\'spam\', \'eggs\')))\\r\\n\\\"(32.5, 40000, (\'spam\', \'eggs\'))\\\"\\r\\nHere are two ways to write a table of squares and cubes:\\r\\n这里是两种输出平方和立方表格的方法：\\r\\n>>>for x in range(1, 11):\\r\\n... print(repr(x).rjust(2), repr(x*x).rjust(3), end=\' \')\\r\\n... # Note use of \'end\' on previous line\\r\\n... print(repr(x*x*x).rjust(4))\\r\\n...\\r\\n1 1 1\\r\\n2 4 8\\r\\n3 9 27\\r\\n4 16 64\\r\\n5 25 125\\r\\n6 36 216\\r\\n7 49 343\\r\\n8 64 512\\r\\n9 81 729\\r\\n10 100 1000\\r\\n>>>for x in range(1, 11):\\r\\n... print(\'{0:2d} {1:3d} {2:4d}\'.format(x, x*x, x*x*x))\\r\\n...\\r\\n1 1 1\\r\\n2 4 8\\r\\n3 9 27\\r\\n4 16 64\\r\\n5 25 125\\r\\n6 36 216\\r\\n7 49 343\\r\\n8 64 512\\r\\n9 81 729\\r\\n10 100 1000\\r\\n（注意：在第一个例子中使用 print() 函数时在每列之间添加了一个空格——它总是会\\r\\n在参数之间添加空格。）\\r\\n这个示例演示了字符串对象的 rjust() 方法，它通过在字符串左侧填充指定宽度的空格\\r\\n以使其右对齐。还有两个类似的方法： ljust() 和 center() 。这些方法不输出任何东西，它\\r\\n们仅仅返回一个新字符串。如果输入的字符串过长，它们不会截短它，而是原样返回。这也\\r\\n许会使你的列布局混乱，但总比截短它更好，那样会输出错误的值。（如果你确实想要截短，\\r\\n你总是可以使用切片操作，如 x.ljust(n)[:n] 。）\\r\\n还有另一个方法： zfill() ，使用零在数字字符串左侧填充（到指定宽度）。它可以理解\\r\\n\"},{\"page\":49,\"content\":\"49\\r\\n正负号。\\r\\n>>>\'12\'.zfill(5)\\r\\n\'00012\'\\r\\n>>>\'-3.14\'.zfill(7)\\r\\n\'-003.14\'\\r\\n>>>\'3.14159265359\'.zfill(5)\\r\\n\'3.14159265359\'\\r\\nstr.format() 方法基本的用法类似这样：\\r\\n>>>print(\'We are the {0} who say \\\"{1}!\\\"\'.format(\'knights\', \'Ni\'))\\r\\nWe are the knights who say \\\"Ni!\\\"\\r\\n括号及其包含的字符（称作格式化域）会被传递给格式化方法的对象替换。括号中的数\\r\\n字指代传递给格式化方法对象的位置。\\r\\n>>>print(\'{0} and {1}\'.format(\'spam\', \'eggs\'))\\r\\nspam and eggs\\r\\n>>>print(\'{1} and {0}\'.format(\'spam\', \'eggs\'))\\r\\neggs and spam\\r\\n如果在格式化方法中使用了关键字参数，它们的值可以通过参数名指代。\\r\\n>>>print(\'This {food} is {adjective}.\'.format(\\r\\n... food=\'spam\', adjective=\'absolutely horrible\'))\\r\\nThis spam is absolutely horrible.\\r\\n位置参数和关键字参数可以随意混合使用：\\r\\n>>>print(\'The story of {0}, {1}, and {other}.\'.format(\'Bill\', \'Manfred\',\\r\\nother=\'Georg\'))\\r\\nThe story of Bill, Manfred, and Georg.\\r\\n字段名称后面可以跟一个可选的 \':\' 符号和格式化分类符。这也是如何更好的控制格式\\r\\n化值的方法。下面的示例将 PI小数点后截短为三位。\\r\\n>>>import math\\r\\n>>>print(\'The value of PI is approximately {0:.3f}.\'.format(math.pi))\\r\\nThe value of PI is approximately 3.142.\\r\\n通过在 \':\' 后面传递一个整数可以限定那个字段的最小字符宽度。这对美化表格非常有\\r\\n用。\\r\\n>>>table = {\'Sjoerd\': 4127, \'Jack\': 4098, \'Dcab\': 7678}\\r\\n>>>for name, phone in table.items():\\r\\n... print(\'{0:10} ==> {1:10d}\'.format(name, phone))\\r\\n...\\r\\nJack ==> 4098\\r\\nDcab ==> 7678\\r\\nSjoerd ==> 4127\\r\\n\"},{\"page\":50,\"content\":\"50\\r\\n如果你有一个不想分割的确实很长的字符串，使用名称替代位置来引用被格式化的变量\\r\\n将会更好。这可以简单的通过传递一个字典并且使用方括号 \'[]\' 访问所有的键。\\r\\n>>>table = {\'Sjoerd\': 4127, \'Jack\': 4098, \'Dcab\': 8637678}\\r\\n>>>print(\'Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; \'\\r\\n\'Dcab: {0[Dcab]:d}\'.format(table))\\r\\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\\r\\n这同样可以使用“**”表示法将 table变量当作关键字参数传递做到（即对字典进行拆\\r\\n分）。\\r\\n>>>table = {\'Sjoerd\': 4127, \'Jack\': 4098, \'Dcab\': 8637678}\\r\\n>>>print(\'Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}\'.format(**table))\\r\\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\\r\\n这在与新的内置函数 vars() 结合时尤为有用，它返回一个包含所有本地变量的字典。\\r\\n字符串格式化方法 str.format() 的完整介绍请参考 Format String Syntax 。\\r\\n7.1.1. 旧式字符窜格式化\\r\\n% 操作符同样可以用来格式化字符串。它像 :cfunc:`sprintf- 格式化字符串风格一样解\\r\\n释左参数并作用于右参数，并且从该格式化操作中返回字符串结果。例如：\\r\\n>>>import math\\r\\n>>>print(\'The value of PI is approximately %5.3f.\' % math.pi)\\r\\nThe value of PI is approximately 3.142.\\r\\n因为 str.format() 方法十分新颖，大多数 Python代码仍然使用 % 操作。然后，因为这\\r\\n种旧式风格的格式化最终将从 Python中废除，一般应该使用 str.format() 方法。\\r\\n更多信息可以参考 Old String Formatting Operations 章节。\\r\\n7.2. 文件读写\\r\\nopen() 函数返回一个文件对象，并且它通常带有两个参数： open(filename, mode) 。\\r\\n>>>f = open(\'/tmp/workfile\', \'w\')\\r\\n第一个参数是一个包含文件名的字符串。第二个参数是另一个包含几个字符的字符串，\\r\\n描述了文件使用的方式。当文件为只读时 mode 取值为 \'r\' ，只写时为 \'w\' （如果存在同\\r\\n名的文件则会被覆盖）； \'a\' 表示以追加方式打开文件，所有的数据都会被自动的添加到文\\r\\n件末尾。 \'r+\' 表示以读写方式打开文件。参数 mode 是可选的，默认值为 \'r\' （即只读）。\\r\\n通常，文件是以 text mode （文本模式）方式打开，即你从文件中读写字符串都是以\\r\\n一种特殊编码（默认为 UTF-8）进行编码的。可以通过在常用模式后添加 \'b\' 选项从而以\\r\\nbinary mode （二进制模式）打开文件，现在数据就是以字节码对象形式来读写了。这种模\\r\\n式可以用在所有非文本文件中。\\r\\n在文本模式中，在读取文件时默认会将特定平台的行结束符（Unix为 \\\\n ，Windows\\r\\n为 \\\\r\\\\n ）转换为 \\\\n ，并在写入文件时转换回去。这种对文件数据的后台修改是对文本文\\r\\n件是无害的，但它会破坏像 JPEG 或 EXE 文件中的二进制数据。在读写这类文件时，你应\\r\\n该十分小心的使用二进制模式。\\r\\n\"},{\"page\":51,\"content\":\"51\\r\\n7.2.1. 文件对象的方法\\r\\n本节中剩下的示例都假设已经创建了一个名为 f 的文件对象。\\r\\n想要读取一个文件的内容，可以调用 f.read(size) 方法，该方法读取若干数量的数据并\\r\\n以字符串或字节码对象形式返回。 size 是一个可选的数值参数。如果没有指定 size 或者\\r\\n它为负数，就会读取并返回文件的全部内容。如果文件大小是你机器内容的两倍大时，这会\\r\\n让你面临问题。不过，你应该以尽可能大字节读取文件内容。如果已经达到文件尾， f.read()\\r\\n将返回一个空字符串（ \'\' ）。\\r\\n>>>f.read()\\r\\n\'This is the entire file.\\\\n\'\\r\\n>>>f.read()\\r\\n\'\'\\r\\nf.readline() 方法从文件中读取单独一行内容，字符串结尾会带有一个换行符（ \\\\n ），并\\r\\n且仅当文件最后一行结尾没有换行符时才会被省略。这样就让返回值清晰明了了，如果\\r\\nf.readline() 返回一个空字符串就表示到达文件尾了。当用 \'\\\\n\' 表示一个空行时，将返回一\\r\\n个只含有一个换行符的字符串。\\r\\n>>>f.readline()\\r\\n\'This is the first line of the file.\\\\n\'\\r\\n>>>f.readline()\\r\\n\'Second line of the file\\\\n\'\\r\\n>>>f.readline()\\r\\n\'\'\\r\\nf.readlines() 方法返回一个包含文件所有数据行的列表。如果指定了可选的 sizehint 参\\r\\n数，它就会从文件中读取至少包含指定字节数的完整行并返回之。这通常被用来从一个大文\\r\\n件中以行的形式高效的读取内容，而不是将整个文件加载到内存。此方法只返回完整的行。\\r\\n>>>f.readlines()\\r\\n[\'This is the first line of the file.\\\\n\', \'Second line of the file\\\\n\']\\r\\n一种替代的方法是通过遍历文件对象来读取文件行。这是一种内存高效、快速，并且代\\r\\n码简介的方式：\\r\\n>>>for line in f:\\r\\n... print(line, end=\'\')\\r\\n...\\r\\nThis is the first line of the file.\\r\\nSecond line of the file\\r\\n虽然这种替代方法更简单，但并不具备细节控制能力。因为这两种方法处理行缓存的方\\r\\n式不同，千万不能搞混。\\r\\nf.write(string) 方法将 string 的内容写入文件，并返回写入字符的长度。\\r\\n>>>f.write(\'This is a test\\\\n\')\\r\\n15\\r\\n想要写入其他非字符串内容，首先要将它转换为字符串。\\r\\n\"},{\"page\":52,\"content\":\"52\\r\\n>>>value = (\'the answer\', 42)\\r\\n>>>s = str(value)\\r\\n>>>f.write(s)\\r\\n18\\r\\nf.tell() 方法返回一个指代文件对象当前位置的整数，表示从文件开头到当前位置的字节\\r\\n数。想要改变文件对象位置，你可以使用 f.seek(offset, from_what) 方法。新的位置是通过\\r\\n将 offset 值与参考点相加计算得来的，参考点是由 from_what 参数确定的。如果\\r\\nfrom_what 值为0则代表从文件头开始计算，值为1时代表从当前文件位置开始计算，值为2\\r\\n时代表从文件尾开始计算。 from_what 参数可以省略并且其默认值为0，即使用文件头作\\r\\n为参考点。\\r\\n>>>f = open(\'/tmp/workfile\', \'rb+\')\\r\\n>>>f.write(b\'0123456789abcdef\')\\r\\n16\\r\\n>>>f.seek(5) # Go to the 6th byte in the file\\r\\n5\\r\\n>>>f.read(1)\\r\\nb\'5\'\\r\\n>>>f.seek(-3, 2) # Go to the 3rd byte before the end\\r\\n13\\r\\n>>>f.read(1)\\r\\nb\'d\'\\r\\n在文本文件中（那些没有使用 b 模式选项打开的文件），只允许从文件头开始计算相对\\r\\n位置（使用 seek(0, 2) 从文件尾计算时就会引发异常）。\\r\\n当你使用完一个文件时，调用 f.close() 方法就可以关闭它并释放其占用的所有系统资\\r\\n源。在调用 f.close() 方法后，试图再次使用文件对象将会自动失败。\\r\\n>>>f.close()\\r\\n>>>f.read()\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nValueError: I/O operation on closed file\\r\\n当处理文件对象时，使用 with 关键字是个好习惯。这是由好处的：在文件一系列操作\\r\\n后它会被适当的关闭，甚至从某种意义上说异常也会变的可爱。\\r\\n>>>with open(\'/tmp/workfile\', \'r\') as f:\\r\\n... read_data = f.read()\\r\\n>>>f.closed\\r\\nTrue\\r\\n文件对象还有一些其他的方法，像 isatty`和:meth:`truncate() ，但它们都不常用。关于\\r\\n文件对象完整示例请查阅库参考手册。\\r\\n7.2.2. `pickle`模块\\r\\n从文件中可以很容易的读写字符串。数字可能需要额外的处理，因为 read() 方法只能\\r\\n\"},{\"page\":53,\"content\":\"53\\r\\n返回字符串。必须将它传递给像 in() 一样的函数，此类函数接收一个字符串并返回它数值，\\r\\n像 \'123\' 就返回123。然而，当你想保存更复杂的数据类型时事情会变的尤为复杂，像列表、\\r\\n字典或者对象实例等。\\r\\n好在用户无需经常编写和调试保存复杂数据类型的代码，Python提供了一个名为 pickle\\r\\n的标准模块。这是一个惊艳的模块，它几乎可以将任何 Python对象（甚至是一些 Python\\r\\n代码！）转换为字符串表示形式，这个过程称为 pickling （封装）。从这个字符串表示形式\\r\\n中重建 Python对象被称为 unpickling （拆封）。在 pickling 和 unpickling 之间，字符串\\r\\n表示的对象可以存储在文件或数据中，或者可以通过网络连接发送给远程的机器。\\r\\n如果你有一个对象 x 对象和一个已经打开并等待写入的文件对象 f ，封装（pickling）\\r\\n对象的最简单方法之需要一行代码：\\r\\npickle.dump(x, f)\\r\\n想要拆封（unpickling）这个对象，如果存在一个已经打开并等待读取的文件对象 f ，\\r\\n即可：\\r\\nx = pickle.load(f)\\r\\n（当封装许多对象时，或者你不想把封装数据写入一个文件，这可以有其他的变化。请\\r\\n查阅 Python库文档获取关于 pickle 完整的文档。）\\r\\npickle 模块将 Python对象转换为可以存储并提供给其他程序或其自身以后调用的标准\\r\\n方法，术语称为 persistent 对象（持久化对象）。pickle 模块被如此广泛的使用，许多 Python\\r\\n扩展开发者都非常注意像矩阵这样的新数据类型是否可以被适当的封装和拆封。\\r\\n8. 错误和异常\\r\\n直到现在，我们仍未提及错误信息，但如果你试验过前面的例子，大概你已经看到过一\\r\\n些。这里有（至少）两种不同类型的错误： 语法错误 和 异常 。\\r\\n8.1. 语法错误\\r\\n语法错误，也被称作解析错误，也许是你学习 Python过程中最常见抱怨。\\r\\n>>>while True print(\'Hello world\')\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nwhile True print(\'Hello world\')\\r\\n^\\r\\nSyntaxError: invalid syntax\\r\\n语法分析器指出错误行，并且在检测到错误的位置前面显示一个小“箭头”。错误是由箭\\r\\n头 前面 的标记引起的（或者至少是这么检测的）：这个例子中，函数 print() 被发现存在错\\r\\n误，因为它前面少了一个冒号（ \':\' ）。错误会输出文件名和行号，所以如果是从脚本输入\\r\\n的你就知道去哪里检查错误了。\\r\\n8.2. 异常\\r\\n即使一条语句或表达式在语法上是正确的，当试图执行它时也可能会引发错误。运行期\\r\\n检测到的错误称为 异常 ，并且程序不会无条件的崩溃：很快，你将学到如何在 Python程\\r\\n\"},{\"page\":54,\"content\":\"54\\r\\n序中处理它们。然而，大多数异常都不会被程序处理，像这里展示的一样最终会产生一个错\\r\\n误信息：\\r\\n>>>10 * (1/0)\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nZeroDivisionError: int division or modulo by zero\\r\\n>>>4 + spam*3\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nNameError: name \'spam\' is not defined\\r\\n>>>\'2\' + 2\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nTypeError: Can\'t convert \'int\' object to str implicitly\\r\\n错误信息最后一行指出到底发生了什么。异常是以不同的类型出现的，并且类型也被当\\r\\n做信息的一部分打印出来：示例中包含 ZeroDivisionError ， NameError 和 TypeError 类型。\\r\\n异常发生时打印的异常类型字符串就是内置异常的名称。这对内置异常是正确的结果，但对\\r\\n用户自定义异常（尽管这是一个有用的规范）就不可而知了。标准异常的名称都是内置的标\\r\\n识符（不是保留关键字）。\\r\\n这行其他的部分提供了异常类型和是引发异常相关的详细信息。\\r\\n异常信息的前面部分以调用堆栈的形式显示了异常发生的上下文。通常，它包含一个调\\r\\n用堆栈的源代码行的清单，但从标准输入读取的行不会被显示。\\r\\n:ref:`bltin-exceptions`列出了内置异常及其用途。\\r\\n8.3. 异常处理\\r\\n通过编程处理选择的异常是可行的。看一下下面的例子：它会一直要求用户输入，直到\\r\\n输入一个合法的整数为止，但允许用户终端这个程序（使用 Control-C 或系统支持的任何方\\r\\n法）。注意：用户产生的终端会引发一个 KeyboardInterrupt 异常。\\r\\n>>>while True:\\r\\n... try:\\r\\n... x = int(input(\\\"Please enter a number: \\\"))\\r\\n... break\\r\\n... except ValueError:\\r\\n... print(\\\"Oops! That was no valid number. Try again...\\\")\\r\\n...\\r\\n:keyword:`try`语句按照以下方式工作：\\r\\n首先，执行 try子句 （在关键字 try 和 except 之间的语句）。\\r\\n如果没有发生异常， 异常子句 就会被跳过， try 语句执行完毕。\\r\\n如果在执行 try 子句时发生异常，剩下的子句就会被跳过。如果异常的类型与 except\\r\\n后面的异常名称相匹配，那么 except 子句就会被执行，然后继续执行 try 语句后的代码。\\r\\n如果一个异常没有任何 except 子句中的异常名称与之匹配，那么它就会被传递到上层\\r\\n的 try 语句。如果仍然没有找到处理这个异常的语句，它就成了一个 未处理的异常 并且\\r\\n\"},{\"page\":55,\"content\":\"55\\r\\n中断代码执行，像上面那样显示一条信息。\\r\\n一个 try 语句可以有多个 except 子句，用来明确的处理不同的异常。至多，只有一个\\r\\n异常处理子句会被执行。异常处理子句只处理对应的 try 子句中发生的异常，而不是其他\\r\\n的 try 语句发生的异常。一个 except 子句可以通过带括号的元组（tuple）定义多个异常\\r\\n类型，例如：\\r\\n... except (RuntimeError, TypeError, NameError):\\r\\n... pass\\r\\n最后一个 except 子句可以省略异常名称，以作为通配符使用。你需要慎用此法，因为\\r\\n它会轻易隐藏一个实际的程序错误！可以使用这种方法打印一条错误信息，然后重新抛出异\\r\\n常（允许调用者处理这个异常）。\\r\\nimport sys\\r\\ntry:\\r\\nf = open(\'myfile.txt\')\\r\\ns = f.readline()\\r\\ni = int(s.strip())\\r\\nexcept IOError as err:\\r\\nprint(\\\"I/O error: {0}\\\".format(err))\\r\\nexcept ValueError:\\r\\nprint(\\\"Could not convert data to an integer.\\\")\\r\\nexcept:\\r\\nprint(\\\"Unexpected error:\\\", sys.exc_info()[0])\\r\\nraise\\r\\ntry...:keyword:except 语句有一个可选的 else 子句，如果存在，它必须在所有的\\r\\nexcept 子句后面。如果 try 子句没有抛出异常，这对那些必须执行的代码就非常有用。\\r\\nfor arg in sys.argv[1:]:\\r\\ntry:\\r\\nf = open(arg, ‘r’)\\r\\nexcept IOError:\\r\\nprint(‘cannot open’, arg)\\r\\nelse:\\r\\nprint(arg, ‘has’, len(f.readlines()), ‘lines’) f.close()\\r\\n使用 else 子句比向 try 子句添加额外的代码更好，因为它避免了意外捕获的异常，它\\r\\n们并不是由 try...:keyword:except 语句保护的代码所抛出。\\r\\n当一个异常发生时，它可能含有一个相关值，就是传说中的异常 参数 。是否存在此参\\r\\n数及其类型取决于异常的类型。\\r\\nexcept 子句可以在异常名称后面指定一个变量。这个变量以存储在 instance.args 中的\\r\\n参数形式绑定到一个异常实例。方便起见，异常实例定义了 __str__() 方法，所以这个参数\\r\\n可以被直接打印出来而无需通过 .args 引用。你也可以在抛出异常前先实例化它，然后给它\\r\\n添加任何想要的属性。\\r\\n>>>try:\\r\\n... raise Exception(\'spam\', \'eggs\')\\r\\n\"},{\"page\":56,\"content\":\"56\\r\\n...except Exception as inst:\\r\\n... print(type(inst)) # the exception instance\\r\\n... print(inst.args) # arguments stored in .args\\r\\n... print(inst) # __str__ allows args to be printed directly,\\r\\n... # but may be overridden in exception subclasses\\r\\n... x, y = inst.args # unpack args\\r\\n... print(\'x =\', x)\\r\\n... print(\'y =\', y)\\r\\n...\\r\\n<class \'Exception\'>\\r\\n(\'spam\', \'eggs\')\\r\\n(\'spam\', \'eggs\')\\r\\nx = spam\\r\\ny = eggs\\r\\n对于那些未处理的异常，如果一个它们带有参数，那么就会被作为异常信息的最后部分\\r\\n（“详情”）打印出来。\\r\\n异常处理器不仅仅处理那些在 try 子句中立刻发生的异常，也会处理那些 try 子句中\\r\\n调用的函数内部发生的异常。例如：\\r\\n>>>def this_fails():\\r\\n... x = 1/0\\r\\n...\\r\\n>>>try:\\r\\n... this_fails()\\r\\n...except ZeroDivisionError as err:\\r\\n... print(\'Handling run-time error:\', err)\\r\\n...\\r\\nHandling run-time error: int division or modulo by zero\\r\\n8.4. 抛出异常\\r\\nraise 语句允许程序员强制抛出一个指定的异常。例如：\\r\\n>>>raise NameError(\'HiThere\')\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nNameError: HiThere\\r\\nraise 唯一的参数指定了要跑出的异常。它必须是一个异常实例，或者是异常类（继承\\r\\n自 Exception 的类）。\\r\\n如果你需要确定是否抛出了一个异常而并不想去处理它，一个简单的 raise 语句允许你\\r\\n重新抛出异常。\\r\\n>>>try:\\r\\n... raise NameError(\'HiThere\')\\r\\n...except NameError:\\r\\n\"},{\"page\":57,\"content\":\"57\\r\\n... print(\'An exception flew by!\')\\r\\n... raise\\r\\n...\\r\\nAn exception flew by!\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 2, in ?\\r\\nNameError: HiThere\\r\\n8.5. 用户自定义异常\\r\\n通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自\\r\\nException 类，通过直接或间接的方式。例如：\\r\\n>>> class MyError(Exception):\\r\\n... def __init__(self, value):\\r\\n... self.value = value\\r\\n... def __str__(self):\\r\\n... return repr(self.value)\\r\\n...\\r\\n>>> try:\\r\\n... raise MyError(2*2)\\r\\n... except MyError as e:\\r\\n... print(\'My exception occurred, value:\', e.value)\\r\\n...\\r\\nMy exception occurred, value: 4\\r\\n>>> raise MyError(\'oops!\')\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\n__main__.MyError: \'oops!\'\\r\\n在这个列子中， Exception 的默认方法 __init__() 被覆盖。新的行为只是简单的创建\\r\\nvalue 属性。这替换了创建 args 属性的默认行为。\\r\\n异常类可以定义成像其他类一样做任何事情，但一般都会保持简洁，通常只提供一些属\\r\\n性以便于异常处理器获取错误相关信息。当创建一个可以产生几种不同错误的模块时，一种\\r\\n通常的做法是为模块中定义的异常创建一个基础类，然后为不同的错误情况创建特定的子异\\r\\n常类。\\r\\nclass Error(Exception):\\r\\n\\\"\\\"\\\"Base class for exceptions in this module.\\\"\\\"\\\"\\r\\npass\\r\\nclass InputError(Error):\\r\\n\\\"\\\"\\\"Exception raised for errors in the input.\\r\\nAttributes:\\r\\nexpression -- input expression in which the error occurred\\r\\nmessage -- explanation of the error\\r\\n\"},{\"page\":58,\"content\":\"58\\r\\n\\\"\\\"\\\"\\r\\ndef __init__(self, expression, message):\\r\\nself.expression = expression\\r\\nself.message = message\\r\\nclass TransitionError(Error):\\r\\n\\\"\\\"\\\"Raised when an operation attempts a state transition that\'s not\\r\\nallowed.\\r\\nAttributes:\\r\\nprevious -- state at beginning of transition\\r\\nnext -- attempted new state\\r\\nmessage -- explanation of why the specific transition is not allowed\\r\\n\\\"\\\"\\\"\\r\\ndef __init__(self, previous, next, message):\\r\\nself.previous = previous\\r\\nself.next = next\\r\\nself.message = message\\r\\n大多数异常的名字都是以“Error”结尾，类似标准异常命名。\\r\\n许多标准模块定义它们自己的异常来报告那些可能发生在函数中错误。更多关于类的信\\r\\n息请参考 Classes 类 章节。\\r\\n8.6. 定义清理动作\\r\\ntry 语句有另外一个可选的子句，可以用来定义那些在所有情况下必须执行的清理动\\r\\n作。例如：\\r\\n>>>try:\\r\\n... raise KeyboardInterrupt\\r\\n...finally:\\r\\n... print(\'Goodbye, world!\')\\r\\n...\\r\\nGoodbye, world!\\r\\nKeyboardInterrupt\\r\\n无论是否发生异常，一个 finally 子句在离开 try 语句前总是会被执行。当在 try 子句\\r\\n中发生一个异常并且没有被 except 字句处理时（或者发生在 except 或 else 子句中），它\\r\\n将会在 finally 子句执行完后被重新抛出。即使通过 break ， continue 或者 return 等其他\\r\\n任何子句，当要离开 :keywor:`try` 语句时 finally 子句也会被执行。一个稍微复杂的列子：\\r\\n>>>def divide(x, y):\\r\\n... try:\\r\\n... result = x / y\\r\\n... except ZeroDivisionError:\\r\\n... print(\\\"division by zero!\\\")\\r\\n\"},{\"page\":59,\"content\":\"59\\r\\n... else:\\r\\n... print(\\\"result is\\\", result)\\r\\n... finally:\\r\\n... print(\\\"executing finally clause\\\")\\r\\n...\\r\\n>>>divide(2, 1)\\r\\nresult is 2.0\\r\\nexecuting finally clause\\r\\n>>>divide(2, 0)\\r\\ndivision by zero!\\r\\nexecuting finally clause\\r\\n>>>divide(\\\"2\\\", \\\"1\\\")\\r\\nexecuting finally clause\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nFile \\\"<stdin>\\\", line 3, in divide\\r\\nTypeError: unsupported operand type(s) for /: \'str\' and \'str\'\\r\\n如你所见，在任何事件下 finally 子句都会执行。通过将两个字符串相除引发的\\r\\nTypeError 异常并没有被 except 字句处理，因此在 finally 子句执行后被重新抛出。\\r\\n在真实的应用程式中，使用 finally 子句释放额外的资源（像文件或网络连接）是很棒\\r\\n的选择，不论对资源的操作是否成功。\\r\\n8.7. 预定义的清理动作\\r\\n一些对象定义了标准的清理动作，无论使用对象的操作是否成功，当对象不再需要时它\\r\\n们就在后台被调用执行。下面的例子尝试打开一个文件并将其内容打印在屏幕上。\\r\\nfor line in open(\\\"myfile.txt\\\"):\\r\\nprint(line)\\r\\n这段代码的问题是当代码执行完毕后不知会过多久它才会关闭文件。这在简单的脚本中\\r\\n还不构成额外难题，但在大的应用程式中问题就严重了。 with 语句保证像文件这样的对象\\r\\n在使用完之后总是可以被立即正确的清理。\\r\\nwith open(\\\"myfile.txt\\\") as f:\\r\\nfor line in f:\\r\\nprint(line)\\r\\n在这段语句执行后，文件 f 总是被关闭，甚至在处理文件行时遇到了问题。诸如文件\\r\\n之类的对象在它们的文档中会指出是否提供了预定义清理动作。\\r\\n9. 类\\r\\nPython的类机制通过最小的新语法和语义在语言中实现了类。它是 C++何 Modula-3\\r\\n语言中类机制的混合。就像模块一样，Python的类并没有在用户和定义之间设立绝对的屏\\r\\n障，而是依赖于用户不去“强行闯入定义”的优雅。另一方面，类的大多数重要特性都被完整\\r\\n\"},{\"page\":60,\"content\":\"60\\r\\n的保留下来：类继承机制允许多重继承，派生类可以覆盖（override）基类中的任何方法或\\r\\n类，可以使用相同的方法名称调用基类的方法。对象可以包含任意数量的私有数据。\\r\\n用在 C++中的术语讲，普通的类成员（包括数据成员）都是 公有 的（public）（除了\\r\\n下面提到的 Private Variables 私有变量 ），并且所有的成员函数都是 虚 的（virtual）。类\\r\\n并没有特殊的构造器和析构器。和在 Modula-3中一样，从方法中没有什么简洁的方式可以\\r\\n引用其对象成员，函数方法必须以代表对象的标识符（self）作为第一个明确的参数，在调\\r\\n用时被隐式的提供。和在 Smalltalk中一样，类本身就是对象，从更广发的意义上讲：在 Python\\r\\n中，所有的数据类型都是对象。这就为导入和重命名提供了支持。不似 C++和 Modula-3那\\r\\n样，内置类型可以被用户用作基类进行扩展。并且像在 C++中一样，而不是 Modula-3，所\\r\\n有内置带有特殊语法的操作符（算术操作符，下标操作符等）都可以针对类的实例进行重定\\r\\n义。\\r\\n9.1. 术语相关\\r\\n关于类因为缺少普遍的可以接受的术语，我暂时借用 Smalltalk和 C++中的术语。（我\\r\\n更想使用 Modula-3的术语，因为它的面向对象机制比 C++更接近 Python，但我想几乎没人\\r\\n听说过它）。\\r\\n对象具有特性，并且多个名称（在多个作用于中）可以绑定在同一个对象上。这在其它\\r\\n语言中被称为别名。在对 Python的第一印象中这通常会被忽略，并且当处理不可变基础类\\r\\n型（数字，字符串，元组）时可以被放心的忽略。但是，在调用列表、字典这类可变对象，\\r\\n或者大多数程序外部类型（文件，窗体等）描述实体时，别名对 Python代码的语义便具有\\r\\n（有意而为！）影响。这通常有助于程序的优化，因为在某些方面别名表现的就像是指针。\\r\\n例如，你可以轻易的传递一个对象，因为通过继承只是传递一个指针。并且如果一个方法修\\r\\n改了一个作为参数传递的对象，调用者可以接收这一变化——这消除了两种不同的参数传递\\r\\n机制的需要，像 Pascal语言。\\r\\n9.2. 作用域和命名空间\\r\\n在介绍类（class）之前，我必须先告诉你一些 Python作用域的规则。类定义非常巧妙\\r\\n的运用了命名空间，并且要想探求究竟你需要知道作用域和命名空间是如何工作的。顺便说\\r\\n一句，这个主题的相关知识对任何高级 Python程序员非常重要。\\r\\n让我们从一些定义说起。\\r\\n命名空间 就是一个从名称到对象的映射。大多数命名空间目前都被实现为 Python字\\r\\n典，但那通常不会被注意（除非为了性能考虑），并且在将来它可能会被改变。命名空间的\\r\\n一些实例：内置名称集（函数，像 abs() ，和内置异常名称），一个模块中的全局名称，函\\r\\n数调用时的局部名称。某种意义上讲，一个对象的属性集合也构成了一个命名空间。关于命\\r\\n名空间需要了解的一件重要的事情就是在不同命名空间中的名称之间没有任何的关系。比\\r\\n如，两个不同的模块可能都定义了一个“maximize”函数而不会混淆——用户必须使用模块名\\r\\n为前缀（来使用模块）。\\r\\n顺便说一下，在 Python中我习惯将任何跟在一个点（.）后的名称叫作 属性 。列如，\\r\\n在 z.real 表达式中， real 就是对象 z 的一个属性。严格来讲，从模块中引用名称就是引用\\r\\n其属性：在 modname.funcname 表达式中， modname 是一个模块对象，同时 funcname 就\\r\\n是它的一个属性。以此而论，在模块属性和模块内部定义的全局名称之间恰好是直接的映射：\\r\\n它们共享相同的命名空间！[#]_\\r\\n属性可以是只读的或可写的。在后一种情况下（指可写），允许对属性赋值。模块属性\\r\\n\"},{\"page\":61,\"content\":\"61\\r\\n都是可写的：你可以这样使用 modname.the_answer = 42 。可写属性也可以使用 del 语句\\r\\n删除。例如， del modname.the_answer 就会从名为 modname 的对象中删除 the_answer 属\\r\\n性。\\r\\n命名空间是在不同的时刻创建的，并且具有不同的生命周期。包含内置名称的命名空间\\r\\n在 Python解释器启动时即被创建，并且从不会被删除。模块的全局命名空间在模块定义被\\r\\n读取时即被创建，通常模块的命名空间会一直保存到解释器退出。通过解释器顶层调用执行\\r\\n的语句，不论是交互的还是从脚本文件读取的，都被认为是 __main__ 模块的一部分，因此\\r\\n他们也有自己的全局命名空间。（内置名称实际上也存在于一个模块，称为： builtins 。）\\r\\n当调用函数时，就会为它创建一个局部命名空间，并且在函数返回或抛出一个并没有在\\r\\n函数内部处理的异常时被删除。（实际上，用遗忘来形容到底发生了什么更为贴切。）当然，\\r\\n每个递归调用都有自己的局部命名空间。\\r\\n作用域 就是一个 Python程序可以直接访问命名空间的正文区域。这里的 直接访问 意\\r\\n思是一个对名称的错误引用会尝试在命名空间内查找。\\r\\n尽管作用域都是静态定义，但它们都被动态的使用。在执行的任何时刻，至少有三个命\\r\\n名空间可以直接访问的嵌套作用域：最先被查找的最内层作用域，包含局部名称；所有封闭\\r\\n函数的命名空间被从最近的封闭作用域内开始搜索；其次被查找的中间层作用域，包含当前\\r\\n模块的全局名称；最后被查找的最外层作用域，包含内建名称的命名空间。\\r\\n如果一个名称被声明为全局的，那么所有的赋值和引用都会直接从包含模块全局名称的\\r\\n中层作用域开始。那些在最内层作用域以外的变量，可以使用 nonlocal 语句重新绑定，如\\r\\n果没有声明为 nonlocal 它们则是只读的。（试图改变这样的变量只会在最内层作用域中简\\r\\n单的创建一个 新 的局部变量，而外部那个相同标识符的变量不会改变）\\r\\n通常，局部作用域引用当前函数（正文的）的局部名称。在函数外部，局部作用域将这\\r\\n一命名空间看做全局作用域：模块命名空间。类定义也会在局部作用域引入另一个命名空间。\\r\\n重要的是要理解作用域是由正文确定：在模块中定义的函数的全局作用域是该模块的命\\r\\n名空间，而不论从何处或者通过什么别名调用函数。换句话说，对名称的实际搜索是在运行\\r\\n时动态完成的。然而，Python语言的定义正朝着“编译”时静态名称确定进化，因此不要依\\r\\n赖动态名称确定！（事实上，局部变量已经是静态确定的。）\\r\\nPython的一个特别之处就是对名称的赋值总是在最内层作用域内，当然含有 global 或\\r\\nnonlocal 语句的除外。赋值操作并不会拷贝数据——他们只是将名称绑定到对象。删除操作\\r\\n亦是如此：语句 del x 从局部作用域引用的命名空间中删除名称``x``的绑定。实际上，所\\r\\n有引入新名称的操作都是用局部作用域：特别是 import 语句和函数定义语句，它们将模块\\r\\n或函数名称绑定在局部作用域。（可以用 global 语句指明某个特定的变量为全局作用域。）\\r\\nglobal 语句用以指明某个特定的变量为全局作用域，并重新绑定它。 nonlocal 语句用\\r\\n以指明某个特定的变量为封闭作用域，并重新绑定它。\\r\\n9.2.1. 作用域和命名空间示例\\r\\n以下是一个示例，演示了如何引用不同作用域和命名空间，以及 global 和 nonlocal 如\\r\\n何影响变量绑定：\\r\\ndef scope_test():\\r\\ndef do_local():\\r\\nspam = \\\"local spam\\\"\\r\\ndef do_nonlocal():\\r\\nnonlocal spam\\r\\nspam = \\\"nonlocal spam\\\"\\r\\ndef do_global():\\r\\n\"},{\"page\":62,\"content\":\"62\\r\\nglobal spam\\r\\nspam = \\\"global spam\\\"\\r\\nspam = \\\"test spam\\\"\\r\\ndo_local()\\r\\nprint(\\\"After local assignment:\\\", spam)\\r\\ndo_nonlocal()\\r\\nprint(\\\"After nonlocal assignment:\\\", spam)\\r\\ndo_global()\\r\\nprint(\\\"After global assignment:\\\", spam)\\r\\nscope_test()\\r\\nprint(\\\"In global scope:\\\", spam)\\r\\n以上示例代码的输出为：\\r\\nAfter local assignment: test spam\\r\\nAfter nonlocal assignment: nonlocal spam\\r\\nAfter global assignment: nonlocal spam\\r\\nIn global scope: global spam\\r\\n注意： local 赋值语句是无法改变 scope_test 的 spam 绑定。 nonlocal 赋值语句改\\r\\n变了 scope_test 的 spam 绑定，并且 global 赋值语句从模块级改变了 spam 绑定。\\r\\n你也可以看到在 global 赋值语句之前对 spam 是没有预先绑定的。\\r\\n9.3. 初识类\\r\\n类引入了一些新语法：三种新的对象类型和一些新的语义。\\r\\n9.3.1. 类定义语法\\r\\n类定义最简单的形式如下：\\r\\nclass ClassName:\\r\\n<statement-1>\\r\\n.\\r\\n.\\r\\n.\\r\\n<statement-N>\\r\\n类定义，就像函数定义（ def 语句）一样，必须先执行才能生效。（你当然可以在一条\\r\\nif 语句分支或一个函数内部定义一个类。）\\r\\n实践中，类定义内部的语句通常都是函数定义，但也允许包含其他语句，有时这非常有\\r\\n用——稍后我们将对此介绍。类内部的函数定义通常有一个特殊形式的参数列表，用于方法\\r\\n调用约定——稍后我们也将对此介绍。\\r\\n当进入类定义时，就会创建一个新的命名空间，并且用作局部作用域。因此，所有对局\\r\\n部变量的赋值都会在这个新命名空间内进行。特别的，函数定义就是将新函数的名称绑定在\\r\\n此。\\r\\n\"},{\"page\":63,\"content\":\"63\\r\\n当类定义完成时（正常结束），就创建了一个 类对象 。这是一个在类定义创建的命名\\r\\n空间内容周围的基本包装，我们将在下一节中学习更多关于类对象的知识。原来的局部（在\\r\\n进入类定义之前生效的那个）作用域得以恢复，并且类对象在这被绑定到类定义头部指定的\\r\\n类名称（参考 ClassName 示例）。\\r\\n9.3.2. 类对象\\r\\n类对象支持两种操作：属性引用和实例化。\\r\\n属性引用 使用在 Python中所有属性引用一样的标准语法： obj.name 。当创建类对象\\r\\n时，所有在类命名空间中的名称都是有效的属性名。因此，如果定义一个这样的类：\\r\\nclass MyClass:\\r\\n\\\"\\\"\\\"A simple example class\\\"\\\"\\\"\\r\\ni = 12345\\r\\ndef f(self):\\r\\nreturn \'hello world\'\\r\\n那么， MyClass.i 和 MyClass.f 都是有效的属性引用，分别反馈一个整数和一个函数对\\r\\n象。也可以对类属性进行赋值，所以你可以通过给 MyClass.i 赋值来修改它。 __doc__ 也是\\r\\n一个有效的属性，返回类的 docstring （文档字符串）： \\\"A simple example class\\\" 。\\r\\n类的 实例化 使用函数（调用）表示法。只要将类对象看作是一个返回新的类实例的无\\r\\n参函数。例如（假设实例化上面的类）\\r\\nx = MyClass()\\r\\n创建一个类的新 实例 ，并将其赋值给一个局部变量 x 。\\r\\n这个实例化操作（“调用”一个类对象）会将建一个空对象。很多类都喜欢创建含有特别\\r\\n的自定义初始化状态的实例对象。因而，你可以定义一个包含特殊方法 __init__() 的类，像\\r\\n下面这样：\\r\\ndef __init__(self):\\r\\nself.data = []\\r\\n当一个类定义了 __init__() 方法时，类实例化会为新创建的类实例自动调用 __init__()\\r\\n方法。所以，在这个例子中，可以获得一个初始化的新实例：\\r\\nx = MyClass()\\r\\n当然，为了更好的灵活性 __init__() 方法可以包含参数。如果那样的话，类实例化操作\\r\\n时给出的参数都会传递给 __init__() 方法。例如：\\r\\n>>> class Complex:\\r\\n... def __init__(self, realpart, imagpart):\\r\\n... self.r = realpart\\r\\n... self.i = imagpart\\r\\n...\\r\\n>>> x = Complex(3.0, -4.5)\\r\\n>>> x.r, x.i\\r\\n(3.0, -4.5)\\r\\n9.3.3. 实例对象\\r\\n现在，我们可以用实例对象做什么呢？实例对象唯一可用的操作就是属性引用。这里有\\r\\n\"},{\"page\":64,\"content\":\"64\\r\\n两种有效的属性名称：数据属性（字段）和方法。\\r\\n数据属性 相当于 Smalltalk中的“实例变量”，或者 C++中的“数据成员”。数据属性无需\\r\\n声明。和局部变量一样，它们在第一次赋值时就会产生。例如：如果 x 是上面创建的类\\r\\nMyClass 的实例，那么下面的代码片段将会打印出 16 这个值而没有任何错误。\\r\\nx.counter = 1\\r\\nwhile x.counter < 10:\\r\\nx.counter = x.counter * 2\\r\\nprint(x.counter)\\r\\ndel x.counter\\r\\n另外一种实例属性引用就是 方法 。方法即使“属于”某个对象的函数。（在 Python中，\\r\\n术语“方法”不仅存在于类实例，其他对象类型也包含方法。例如，列表对象含有 append，\\r\\ninsert，remove，sort等方法。然而，在下面的讨论中，除非特别说明，我们所用得术语“方\\r\\n法”专指类实例对象的方法。）\\r\\n一个实例对象的方法名是否有效取决于它的类。按照定义，一个类中所有函数对象定义\\r\\n与它的实例方法是相对应的。因此在我们的例子中， x.f 是一个有效的方法引用，因为\\r\\nMyClass.f 是一个方法；但是 x.i 则不是，因为 MyClass.i 不是一个方法。然而 x.f 与\\r\\nMyClass.f 并不是相同的东西——它是一个 方法对象 ，而非函数对象。\\r\\n9.3.4. 方法对象\\r\\n通常，方法通过右绑定方式调用。\\r\\nx.f()\\r\\n在 MyClass 示例中，这将会返回 \'hello world\' 字符串。然而，你无需立刻就调用一个方\\r\\n法： x.f 是一个方法对象，并且它可以被保存起来以便稍后调用。比如：\\r\\nxf = x.f\\r\\nwhile True:\\r\\nprint(xf())\\r\\n会不断打印 hello world 字符串，直到程序终止。\\r\\n当调用一个方法是具体做了什么呢？你可能已经注意到上面我们调用 x.f() 时并没有\\r\\n使用参数，尽管在 f() 的定义中指定了一个参数。这个参数怎么了呢？当然，当不使用任何\\r\\n参数调用需要一个参数的函数时，Python就会抛出一个异常——即使这个参数没有实际使\\r\\n用…\\r\\n实际上，你可能已经猜到了答案：方法有一个特性就是实例对象被当做第一个参数传递\\r\\n给了函数。在我们的例子中， x.f() 调用实际上等价于 MyClass.f(x) 调用。通常，使用包含\\r\\nn 个参数的列表调用一个方法，相当于使用通过将方法的对象插入到参数列表第一个参数\\r\\n前面后创建的参数列表调用相应的函数。\\r\\n如果你还不理解方法是如何工作的，了解一下它的实现可能会明白真相。当引用一个非\\r\\n数据属性的实例属性时，就会搜索它的类。如果这个名称表示一个有效的函数对象类属性，\\r\\n就会将实例对象和函数对象封装（用指针指向）进一个抽象对象，从而创建一个方法对象：\\r\\n这就是方法对象。当使用一个参数列表调用方法对象时，它会被重新拆封，用实例对象和原\\r\\n始参数列表构造一个新的参数列表，然后用这个新的参数列表调用函数对象。\\r\\n\"},{\"page\":65,\"content\":\"65\\r\\n9.4. 一些说明\\r\\n数据属性会覆盖同名的方法属性。为了避免意外的名称冲突，这在大型程序中是极难发\\r\\n现的 Bug，使用一些约定来减少冲突的机会是明智的。可能的约定包括：大写方法名称的首\\r\\n字母，使用一个唯一的小字符串（也许只是一个下划线）作为数据属性名称的前缀，或者方\\r\\n法使用动词而数据属性使用名词。\\r\\n数据属性可以被方法引用，也可以由一个对象的普通用户（客户）使用。换句话说，类\\r\\n不能用来实现纯净的数据类型。事实上，Python中不可能强制隐藏数据——一切基于约定。\\r\\n（如果需要，使用 C编写的 Python实现可以完全隐藏实现细节并控制对象的访问。这可以\\r\\n用来通过 C语言扩展 Python。）\\r\\n客户应该谨慎的使用数据属性——客户可能通过践踏他们的数据属性而使那些由方法\\r\\n维护的常量变得混乱。注意：只要能避免冲突，客户可以向一个实例对象添加他们自己的数\\r\\n据属性，而不会影响方法的正确性——再次强调，命名约定可以避免很多麻烦。\\r\\n从方法内部引用数据属性（或其他方法）并没有快捷方式。我觉得这实际上增加了方法\\r\\n的可读性：当浏览一个方法时，在局部变量和实例变量之间不会出现令人费解的情况。\\r\\n一般，方法的第一个参数被命名为 self 。这仅仅是一个约定：对 Python而言，名称 self\\r\\n绝对没有任何特殊含义。（但是请注意：如果不遵循这个约定，对其他的 Python程序员而言\\r\\n你的代码可读性就会变差，而且有些 类查看器 程序也可能是遵循此约定编写的。）\\r\\n类属性的任何函数对象都为那个类的实例定义了一个方法。函数定义代码不一定非得定\\r\\n义在类中：也可以将一个函数对象赋值给类中的一个局部变量。例如：\\r\\n# Function defined outside the class\\r\\ndef f1(self, x, y):\\r\\nreturn min(x, x+y)\\r\\nclass C:\\r\\nf = f1\\r\\ndef g(self):\\r\\nreturn \'hello world\'\\r\\nh = g\\r\\n现在， f ， g 和 h 都是指向函数对象的类 C 的属性，因此它们都是 C 实例的方法\\r\\n—— h 严格等于 g 。注意：这种习惯通常只会让程序的读者迷惑。\\r\\n通过使用方法属性的 self 参数，方法可以调用其他方法。\\r\\nclass Bag:\\r\\ndef __init__(self):\\r\\nself.data = []\\r\\ndef add(self, x):\\r\\nself.data.append(x)\\r\\ndef addtwice(self, x):\\r\\nself.add(x)\\r\\nself.add(x)\\r\\n方法可以像普通函数一样引用全局名称。方法可见的全局作用域是包含此类定义的模\\r\\n块。（类自身永远不会作为全局作用域！）虽然在方法中使用全局数据只有极少好的理由，还\\r\\n是有很多合法的用法使用全局作用域：首先，在全局作用域中导入的模块和方法可以被方法\\r\\n\"},{\"page\":66,\"content\":\"66\\r\\n使用，也可以调用其中定义的类和函数。通常，包含此方法的类也会在这个全局作用域中被\\r\\n定义。在下一节中，我们会了解为何一个方法想要引用自己的类！\\r\\nPython中，每个值都是一个对象，并具有一个*类*（称作它的*类型*）。这被存储为\\r\\n``object.__class__``。\\r\\n9.5. 继承\\r\\n当然，如果一种语言不支持继承的特性，那么 类 就没有什么意义。派生类的定义语法\\r\\n如下所示：\\r\\nclass DerivedClassName(BaseClassName):\\r\\n<statement-1>\\r\\n.\\r\\n.\\r\\n.\\r\\n<statement-N>\\r\\n名称 BaseClassName 必须定义在包含派生类定义的作用域内。在基类名称的位置，允\\r\\n许出现任何表达式。当基类在另一个模块中定义时，这种做法非常有用。比如：\\r\\nclass DerivedClassName(modname.BaseClassName):\\r\\n派生类定义的执行过程和基类是相同的。当构造类对象时，基类就会被记住。这在解析\\r\\n属性引用时被使用：如果一个请求的属性在类中没有找到，就会继续在基类中查找。如果基\\r\\n类自身也是从其他类派生而来，这个规则就会被递归的应用。\\r\\n派生类的实例化并没有什么特别之处： DerivedClassName() 调用会为类创建一个新的\\r\\n实例。方法引用按照如下决定：搜索相应的类属性，必要时沿着基类链逐层搜索，如果发现\\r\\n一个函数对象这个方法引用就是有效的。\\r\\n派生类可能会覆盖它们基类的方法。因为方法没有任何特权，所以本意想要调用基类中\\r\\n的另一个方法时，可能会被派生类中覆盖它的方法终止。（对于 C++程序员：Python中所\\r\\n有的方法实际上都是 virtual 的。）\\r\\n在派生类中覆盖方法，实际上可能是想要扩展基类中同名的方法，而非简单的替代。有\\r\\n一个简单的方法可以直接调用基类中的方法：只需调用 BaseClassName.methodname(self,\\r\\narguments) 。偶尔，这也会对客户有所帮助。（注意：只有基类在同一作用域内定义或导入\\r\\n时才可以这样使用。）\\r\\nPython有两个和集成相关的内置函数：\\r\\n使用 isinstance() 函数可以检测一个对象的类型：仅当 obj.__class__ 是 int 或者从 int\\r\\n中派生的类时， isinstance(obj, int) 才返回 True 。\\r\\n使用 issubclass() 函数可以检查类的继承关系：因为 bool 是 int 的子类，所以\\r\\nissubclass(bool, int) 返回 True 。但是， issubclass(float, int) 是 False ，因为 float 不是 int 的\\r\\n子类。\\r\\n9.5.1. 多重继承\\r\\nPython也支持多重继承的形式：使用多个基类进行类定义。如下所示：\\r\\nclass DerivedClassName(Base1, Base2, Base3):\\r\\n<statement-1>\\r\\n.\\r\\n\"},{\"page\":67,\"content\":\"67\\r\\n.\\r\\n.\\r\\n<statement-N>\\r\\n大多数情况下，最简单来讲，你可以认为对从父类继承的属性搜索遵循深度优先，从左\\r\\n向右，不会对重叠的相同层次的同一个类搜索两次。因此，如果一个属性在 DerivedClassName\\r\\n中找不到，就会继续在 Base1 中查找，然后（递归的）在 Base1 的基类中查找。如果还没\\r\\n有找到，就会继续从 Base2 类中查找，依次类推。\\r\\n实际上，它比以上要稍微复杂一些，解决方法就是为支持协同调用 super() 而动态改变\\r\\n排序。这个方法在一些其他多重继承的语言中称作 call-next-method ，并且要比单继承语\\r\\n言中的 super 调用更强大。\\r\\n动态排序是必须的，因为多重继承中所有的情况都会呈现为一个或多个菱形关系（从最\\r\\n低层的类开始，至少存在一个父类可以通过多条路径访问）。比如，所有的类继承自 oject ，\\r\\n索引任何情况下的多重继承都存在不止一条路径可以访问 object 。想要避免基类被多次访\\r\\n问，动态算法在每个类中通过维护一个从左向右的特殊顺序的方式将搜索顺序线性化，从而\\r\\n每个父类支部调用一次，并且那是不变的（即继承一个类不会一项它父类的优先级）。总之，\\r\\n这些属性让使用多重继承设计可靠的和可扩展的类成为可能。更多信息请参考：\\r\\nhttp://www.python.org/download/releases/2.3/mro/ 。\\r\\n9.6. 私有变量\\r\\nPython对类私有标识符提供了有限的支持。形如 __spam （至少两个下划线前缀，至\\r\\n多一个下划线后缀）的任何标识符都会被原文的替换成 _classname__spam 形式，这里\\r\\nclassname 就是当前的类名。这种变换不会关注标识符的语法位置，因此可以用来定义类私\\r\\n有实例和类变量、方法、全局变量，甚至把*其他*类实例变量保存为私有实例变量。当变\\r\\n换的名字超过255个字符时就会被截短，在类外部或者类名只有一个下划线组成时则不会被\\r\\n截短。\\r\\n名字变换是一种实现类定义“私有”实例变量和方法的简单的途径，无需担心与派生类定\\r\\n义的实例变量混淆，或与类外部代码的实例变量混淆。注意：变换规则的设计主要是用来避\\r\\n免冲突，执意访问或修改被认为是私有的变量仍然是可行的。这在特殊环境下尤为有用，比\\r\\n如调试的时候，这也是为何一直没有堵上这个漏洞的原因之一。（号外：派生类和基类具有\\r\\n相同的名字即可使用基类的私有变量。）\\r\\n注意：传递给 exec() 或 eval() 函数的代码不会将调用类的类名作为当前类。这和\\r\\nglobal 语句的情况相似，它的作用限制于一起进行字节码编译的代码。同样的限制也适用于\\r\\ngetattr() ， setattr() 和 delattr() 函数，以及直接引用 __dict__ 时。\\r\\n9.7. 备注\\r\\n有时拥有一种类似 Pascal的“记录（record）”或 C的“结构（struct）”的数据类型是非\\r\\n常有用的，可以将一些已命名的数据项绑定在一起。定义一个空的类便可以很好的做到这点：\\r\\nclass Employee:\\r\\npass\\r\\njohn = Employee() # Create an empty employee record\\r\\n\"},{\"page\":68,\"content\":\"68\\r\\n# Fill the fields of the record\\r\\njohn.name = \'John Doe\'\\r\\njohn.dept = \'computer lab\'\\r\\njohn.salary = 1000\\r\\n一段需要一个特别的抽象数据类型的 Python代码通常可以传入一个模仿那种数据类型\\r\\n方法的类来代替。例如，如果你有一个格式化文件对象数据的函数，你可以定义一个包含\\r\\nread() 和 readline() 方法的类，它可以替代从字符串缓冲中获取数据并作为参数传递。\\r\\n实例方法对象也包含属性： m.__self__ 就是方法 m() 的实例对象，并且 m.__func__\\r\\n就是方法对应的函数对象。\\r\\n9.8. 异常也是类\\r\\n用户自定义的异常也被当做类。利用这一原理便可以创建可扩展的异常分类。\\r\\n以下是两种有效的（语义上）异常抛出形式：\\r\\nraise Class\\r\\nraise Instance\\r\\n在第一种方式中， Class 必须是一个 type 或其派生类的实例。第一种方式为以下形式\\r\\n的简写：\\r\\nraise Class()\\r\\n在 except 从句中的类是与异常相兼容的，这里的异常是指同一个类或者是一个基类\\r\\n（但是不能反过来说—— except 从句中列出的派生类与基类是不兼容的）。例如，下面的\\r\\n代码将依次输出 B，C，D：\\r\\nclass B(Exception):\\r\\npass\\r\\nclass C(B):\\r\\npass\\r\\nclass D(C):\\r\\npass\\r\\nfor c in [B, C, D]:\\r\\ntry:\\r\\nraise c()\\r\\nexcept D:\\r\\nprint(\\\"D\\\")\\r\\nexcept C:\\r\\nprint(\\\"C\\\")\\r\\nexcept B:\\r\\nprint(\\\"B\\\")\\r\\n注意：如果 except 从句被颠倒了（最先使用 except B ），它只会打印 B，B，B——首\\r\\n先被匹配的异常被触发。\\r\\n\"},{\"page\":69,\"content\":\"69\\r\\n当打印一个未处理异常的错误信息时，异常的类名也会被打印出来，然后紧跟一个冒号\\r\\n和一个空格，最后使用内置函数 str() 将实例转换为字符串。\\r\\n9.9. 迭代器\\r\\n到现在，你可能已经注意到大多数容器对象都可以使用 for 语句遍历：\\r\\nfor element in [1, 2, 3]:\\r\\nprint(element)\\r\\nfor element in (1, 2, 3):\\r\\nprint(element)\\r\\nfor key in {\'one\':1, \'two\':2}:\\r\\nprint(key)\\r\\nfor char in \\\"123\\\":\\r\\nprint(char)\\r\\nfor line in open(\\\"myfile.txt\\\"):\\r\\nprint(line)\\r\\n这种访问风格清晰、简洁并且方便。迭代器的使用在 Python中非常普遍而且统一。在\\r\\n幕后， for 语句会对容器对象调用 iter() 函数。这个函数返回一个定义了 __next__() 方法\\r\\n的迭代对象，每次访问容器中的一个元素。当没有可以继续访问的元素时，:meth: __next__\\r\\n方法会跑出一个 StopIteration 异常，这将会通知 for 语句结束循环。你可以使用内置 next()\\r\\n函数调用 __next__() 方法。以下是一个完整的示例：\\r\\n>>>s = \'abc\'\\r\\n>>>it = iter(s)\\r\\n>>>it\\r\\n<iterator object at 0x00A1DB50>\\r\\n>>>next(it)\\r\\n\'a\'\\r\\n>>>next(it)\\r\\n\'b\'\\r\\n>>>next(it)\\r\\n\'c\'\\r\\n>>>next(it)\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in ?\\r\\nnext(it)\\r\\nStopIteration\\r\\n了解了迭代器协议背后的机制，你可以轻松的给类添加迭代器行为。定义一个 __iter__()\\r\\n方法，使其返回一个带有 __next__() 方法的对象。如果这个类定义了 __next__() 方法，那\\r\\n么 __iter__() 方法只需要返回 self 即可。\\r\\nclass Reverse:\\r\\n\\\"Iterator for looping over a sequence backwards\\\"\\r\\ndef __init__(self, data):\\r\\n\"},{\"page\":70,\"content\":\"70\\r\\nself.data = data\\r\\nself.index = len(data)\\r\\ndef __iter__(self):\\r\\nreturn self\\r\\ndef __next__(self):\\r\\nif self.index == 0:\\r\\nraise StopIteration\\r\\nself.index = self.index - 1\\r\\nreturn self.data[self.index]\\r\\n>>> for char in Reverse(\'spam\'):\\r\\n... print(char)\\r\\n...\\r\\nm\\r\\na\\r\\np\\r\\ns\\r\\n9.10. 生成器\\r\\nGenerators 是创建迭代器简单而又强大的工具。它们写起来就像正式的函数，但是在\\r\\n需要返回数据时使用 yield 语句。每次对其调用 next() 函数，生成器就会从上次脱离的位\\r\\n置继续（它记忆所有的数据值和最后执行的语句）。下例说明可以辩解的创建一个生成器：\\r\\ndef reverse(data):\\r\\nfor index in range(len(data)-1, -1, -1):\\r\\nyield data[index]\\r\\n>>> for char in reverse(\'golf\'):\\r\\n... print(char)\\r\\n...\\r\\nf\\r\\nl\\r\\no\\r\\ng\\r\\n任何可以使用生成器做的事情，也可以使用前一节介绍的基于迭代器的类来完成。生成\\r\\n器之所以如此简单是因为在生成器中 __iter__() 和 __next__() 方法是自动创建的。\\r\\n另一个关键特性是在调用之间局部变量和执行状态都被自动的保存。这就使得函数编写\\r\\n更容易，并且比像 self.index 和 self.data 形式这样手动调用示例变量更清晰。\\r\\n除自动创建方法和保存程序状态外，当生成器到达结尾时，它们会自动抛出\\r\\nStopIteration 异常。综合来说，这些特性使得创建迭代器就像书写一个普通函数一般简单。\\r\\n9.11. 生成器表达式\\r\\n有些简单的生成器可以使用类似列表推导式的符号简单编码为表达式，但无需带有中括\\r\\n\"},{\"page\":71,\"content\":\"71\\r\\n号。这些表达式是为某种情景而设计的，在那里生成器被一个封闭函数使用。生成器表达式\\r\\n并完整的生成器定义更为简洁，但没有那么通用，而且比等价的列表推导式更容易记住。\\r\\n>>>sum(i*i for i in range(10)) # sum of squares\\r\\n285\\r\\n>>>xvec = [10, 20, 30]\\r\\n>>>yvec = [7, 5, 3]\\r\\n>>>sum(x*y for x,y in zip(xvec, yvec)) # dot product\\r\\n260\\r\\n>>>from math import pi, sin\\r\\n>>>sine_table = {x: sin(x*pi/180) for x in range(0, 91)}\\r\\n>>>unique_words = set(word for line in page for word in line.split())\\r\\n>>>valedictorian = max((student.gpa, student.name) for student in graduates)\\r\\n>>>data = \'golf\'\\r\\n>>>list(data[i] for i in range(len(data)-1, -1, -1))\\r\\n[\'f\', \'l\', \'o\', \'g\']\\r\\nFootnotes\\r\\n1]\\r\\n有个例外：模块对象有一个隐秘的只读属性 __dict__ ，返回一个作为模块命名空\\r\\n间的字典。名称 __dict__ 是一个属性，但不是全局名称。显然，这样使用违法了命名\\r\\n空间实现的抽象概念，并且应该严格限制在希望在测试之后进一步研究的场合。\\r\\n10. Python标准库概览\\r\\n10.1. 操作系统接口\\r\\nos 模块提供了很多与操作系统交互的函数。\\r\\n>>>import os\\r\\n>>>os.system(\'time 0:02\')\\r\\n0\\r\\n>>>os.getcwd() # Return the current working directory\\r\\n\'C:\\\\\\\\Python31\'\\r\\n>>>os.chdir(\'/server/accesslogs\')\\r\\n一定要使用 import os 风格而不是 from os import * ！这会使 os.open() 函数覆盖内置\\r\\n的 open() 函数，因为它们的操作有很多不同。\\r\\n内置函数 dir() 和 help() 对交互的使用像 os 这样的大模块非常有用。\\r\\n>>>import os\\r\\n>>>dir(os)\\r\\n<returns a list of all module functions>\\r\\n\"},{\"page\":72,\"content\":\"72\\r\\n>>>help(os)\\r\\n<returns an extensive manual page created from the module\'s docstrings>\\r\\n对于日常文件和目录管理任务， shutil 模块提供了易于使用的更高层的交互。\\r\\n>>>import shutil\\r\\n>>>shutil.copyfile(\'data.db\', \'archive.db\')\\r\\n>>>shutil.move(\'/build/executables\', \'installdir\')\\r\\n10.2. 文件通配符\\r\\nglob 模块提供了一个函数用来从目录通配符搜索中生产文件列表。\\r\\n>>>import glob\\r\\n>>>glob.glob(\'*.py\')\\r\\n[\'primes.py\', \'random.py\', \'quote.py\']\\r\\n10.3. 命令行参数\\r\\n常用的实用脚本通常需要处理命令行参数。这些参数以一个列表的形式存储在 sys 模\\r\\n块的 argv 属性中。例如在命令行中运行 python demo.py one two three 可以得到下面的输\\r\\n出：\\r\\n>>>import sys\\r\\n>>>print(sys.argv)\\r\\n[\'demo.py\', \'one\', \'two\', \'three\']\\r\\ngetopt 模块以 Unix的 getopt() 函数方式处理 sys.argv 。更多灵活有效的命令行参数\\r\\n处理由 optparse 模块提供。\\r\\n10.4. 错误输出重定向和程序终止\\r\\nsys 模块还包含 stdin ， stdout 和 stderr 属性。即使在 stdout 被重定向时，后者\\r\\n也可以用于显示警告和错误信息。\\r\\n>>>sys.stderr.write(\'Warning, log file not found starting a new one\\\\n\')\\r\\nWarning, log file not found starting a new one\\r\\n退出一个脚本最直接的方法是使用``sys.exit()``。\\r\\n10.5. 字符串模式匹配\\r\\nre 模块为高级字符串处理提供了正则表达式工具。正则表达式为复杂的字符串匹配和\\r\\n处理提供了简洁，优化的方法：\\r\\n>>>import re\\r\\n>>>re.findall(r\'\\\\bf[a-z]*\', \'which foot or hand fell fastest\')\\r\\n[\'foot\', \'fell\', \'fastest\']\\r\\n>>>re.sub(r\'(\\\\b[a-z]+) \\\\1\', r\'\\\\1\', \'cat in the the hat\')\\r\\n\"},{\"page\":73,\"content\":\"73\\r\\n\'cat in the hat\'\\r\\n当仅需简单的功能时，应该首先考虑使用字符串方法，因为他们容易阅读和调试。\\r\\n>>>\'tea for too\'.replace(\'too\', \'two\')\\r\\n\'tea for two\'\\r\\n10.6. 数学\\r\\nmath 模块为浮点数运算提供了对底层 C函数库的访问支持。\\r\\n>>>import math\\r\\n>>>math.cos(math.pi / 4)\\r\\n0.70710678118654757\\r\\n>>>math.log(1024, 2)\\r\\n10.0\\r\\nrandom 模块为随机选择功能提供了工具支持。\\r\\n>>>import random\\r\\n>>>random.choice([\'apple\', \'pear\', \'banana\'])\\r\\n\'apple\'\\r\\n>>>random.sample(range(100), 10) # sampling without replacement\\r\\n[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\\r\\n>>>random.random() # random float\\r\\n0.17970987693706186\\r\\n>>>random.randrange(6) # random integer chosen from range(6)\\r\\n4\\r\\nSciPy项目<http://scipy.org>包括很多其他数字计算模块。\\r\\n10.7. 互联网访问\\r\\nPython包含许多访问互联网和处理互联网协议的模块。其中最简单的两个是通过 URL\\r\\n地址获取数据的 urllib.request 和发送邮件的 smtplib 。\\r\\n>>>from urllib.request import urlopen\\r\\n>>>for line in urlopen(\'http://tycho.usno.navy.mil/cgi-bin/timer.pl\'):\\r\\n... if \'EST\' in line or \'EDT\' in line: # look for Eastern Time\\r\\n... print(line)\\r\\n<BR>Nov. 25, 09:43:32 PM EST\\r\\n>>>import smtplib\\r\\n>>>server = smtplib.SMTP(\'localhost\')\\r\\n>>>server.sendmail(\'soothsayer@example.org\', \'jcaesar@example.org\',\\r\\n...\\\"\\\"\\\"To: jcaesar@example.org\\r\\n...From: soothsayer@example.org\\r\\n\"},{\"page\":74,\"content\":\"74\\r\\n...\\r\\n...Beware the Ides of March.\\r\\n...\\\"\\\"\\\")\\r\\n>>>server.quit()\\r\\n（注意：第二个示例需要在本机运行邮件服务器。）\\r\\n10.8. 日期和时间\\r\\ndatetime 模块为日期和时间处理提供了简单和复杂的类支持。由于为日期和时间的算\\r\\n术运算提供了支持，格式化输出和处理实现的重点就是高校的成员提取。这个模块同样支持\\r\\n时区处理。\\r\\n# dates are easily constructed and formatted\\r\\n>>> from datetime import date\\r\\n>>> now = date.today()\\r\\n>>> now\\r\\ndatetime.date(2003, 12, 2)\\r\\n>>> now.strftime(\\\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\\\")\\r\\n\'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.\'\\r\\n# dates support calendar arithmetic\\r\\n>>> birthday = date(1964, 7, 31)\\r\\n>>> age = now - birthday\\r\\n>>> age.days\\r\\n14368\\r\\n10.9. 数据压缩\\r\\nPython模块还直接支持常用数数据打包和压缩格式，包括： zlib ，gzip ，bz2 ， zipfile\\r\\n和 tarfile 等。\\r\\n>>>import zlib\\r\\n>>>s = \'witch which has which witches wrist watch\'\\r\\n>>>len(s)\\r\\n41\\r\\n>>>t = zlib.compress(s)\\r\\n>>>len(t)\\r\\n37\\r\\n>>>zlib.decompress(t)\\r\\n\'witch which has which witches wrist watch\'\\r\\n>>>zlib.crc32(s)\\r\\n226805979\\r\\n\"},{\"page\":75,\"content\":\"75\\r\\n10.10. 性能评测\\r\\n有些 Python开发对处理同一问题的不同方法之间的性能差异抱有浓厚的兴趣。Python\\r\\n提供了一个测试工具可以立即找到这些问题的答案。\\r\\n例如，使用元组的封装和拆封特性代替传统的方法交换参数是很诱人的。 timeit 模块\\r\\n快速的演示了这一微小性能优势：\\r\\n>>>from timeit import Timer\\r\\n>>>Timer(\'t=a; a=b; b=t\', \'a=1; b=2\').timeit()\\r\\n0.57535828626024577\\r\\n>>>Timer(\'a,b = b,a\', \'a=1; b=2\').timeit()\\r\\n0.54962537085770791\\r\\n与 timeit 的细粒度相比， profile 和 pstate 模块提供了在大代码块中识别时间临界区\\r\\n的工具。\\r\\n10.11. 质量控制\\r\\n开发高质量软件的一种方法是在开发时为每个函数编写测试，并在开发过程中经常运行\\r\\n这些测试。\\r\\ndoctest 模块为模块扫描和验证内嵌在程序文档字符串中的测试提供了一个工具。测试\\r\\n编制就是简单的把一个典型的调用及它的结果剪切并粘贴到文档字符串里。这通过为用户提\\r\\n供一个示例改善了文档，并且它允许 doctext 模块确认代码和文档相符。\\r\\ndef average(values):\\r\\n\\\"\\\"\\\"Computes the arithmetic mean of a list of numbers.\\r\\n>>> print(average([20, 30, 70]))\\r\\n40.0\\r\\n\\\"\\\"\\\"\\r\\nreturn sum(values) / len(values)\\r\\nimport doctest\\r\\ndoctest.testmod() # automatically validate the embedded tests\\r\\nunittest 模块不像 doctest 那么容易使用，不过它可以在一个独立的文件里提供更全面\\r\\n的测试集。\\r\\nimport unittest\\r\\nclass TestStatisticalFunctions(unittest.TestCase):\\r\\ndef test_average(self):\\r\\nself.assertEqual(average([20, 30, 70]), 40.0)\\r\\nself.assertEqual(round(average([1, 5, 7]), 1), 4.3)\\r\\nself.assertRaises(ZeroDivisionError, average, [])\\r\\nself.assertRaises(TypeError, average, 20, 30, 70)\\r\\n\"},{\"page\":76,\"content\":\"76\\r\\nunittest.main() # Calling from the command line invokes all tests\\r\\n10.12. “瑞士军刀”\\r\\nPython展现了“瑞士军刀”的哲学。这可以通过它更大的包的高级和健壮的功能来得到\\r\\n最好的展现。列如：\\r\\nxmlrpc.client 和 xmlrpc.server 模块让远程过程调用变得轻而易举。尽管模块有这样的名\\r\\n字，用户无需拥有 XML的知识或处理 XML。\\r\\nemail 包是一个管理邮件信息的库，包括 MIME和其它基于 RFC 2822的信息文档。不\\r\\n同于实际发送和接收信息的 smtplib 和 poplib 模块， email 包包含一个构造或解析复杂消\\r\\n息结构（包括附件）及实现互联网编码和头协议的完整工具集。\\r\\nxml.dom 和 xml.sax 包为这些流行的数据交换格式解析提供了强健的支持。同样的，\\r\\ncsv 模块支持从一种通用的数据库格式中直接读写。总之，这些模块和包大大简化了 Python\\r\\n应用程序和其他工具之间的数据交换。\\r\\n有若干模块可以实现国际化操作，包括： gettext ， locale 和 codecs 包。\\r\\n11. 标准库概览 — 第二部分\\r\\n本部分覆盖了支持专业编程需要的更高级的模块。这些模块在小脚本中很少出现。\\r\\n11.1. 输出格式化\\r\\nreprlib 模块为大型的或深度嵌套的容器缩写显示提供了 repr() 函数的一个定制版本。\\r\\n>>>import reprlib\\r\\n>>>reprlib.repr(set(\'supercalifragilisticexpialidocious\'))\\r\\n\\\"set([\'a\', \'c\', \'d\', \'e\', \'f\', \'g\', ...])\\\"\\r\\npprint 模块为内置和用户自定义对象提供更精确的输出控制，从某种程度上更利于解释\\r\\n器阅读。当结果比一行更长时，“美化打印器”就会添加行中断和缩进，一边更清晰的显示数\\r\\n据结构。\\r\\n>>>import pprint\\r\\n>>>t = [[[[\'black\', \'cyan\'], \'white\', [\'green\', \'red\']], [[\'magenta\',\\r\\n... \'yellow\'], \'blue\']]]\\r\\n...\\r\\n>>>pprint.pprint(t, width=30)\\r\\n[[[[\'black\', \'cyan\'],\\r\\n\'white\',\\r\\n[\'green\', \'red\']],\\r\\n[[\'magenta\', \'yellow\'],\\r\\n\'blue\']]]\\r\\ntextwrap 模块格式文本段落，以便适应指定的屏幕宽度。\\r\\n>>>import textwrap\\r\\n\"},{\"page\":77,\"content\":\"77\\r\\n>>>doc = \\\"\\\"\\\"The wrap() method is just like fill() except that it returns\\r\\n...a list of strings instead of one big string with newlines to separate\\r\\n...the wrapped lines.\\\"\\\"\\\"\\r\\n...\\r\\n>>>print(textwrap.fill(doc, width=40))\\r\\nThe wrap() method is just like fill()\\r\\nexcept that it returns a list of strings\\r\\ninstead of one big string with newlines\\r\\nto separate the wrapped lines.\\r\\nlocale 模块用来访问特殊数据格式的文化数据库。 locale 的分组格式化函数属性为数\\r\\n字的分组分割格式化提供了直接的方法。\\r\\n>>>import locale\\r\\n>>>locale.setlocale(locale.LC_ALL, \'English_United States.1252\')\\r\\n\'English_United States.1252\'\\r\\n>>>conv = locale.localeconv() # get a mapping of conventions\\r\\n>>>x = 1234567.8\\r\\n>>>locale.format(\\\"%d\\\", x, grouping=True)\\r\\n\'1,234,567\'\\r\\n>>>locale.format(\\\"%s%.*f\\\", (conv[\'currency_symbol\'],\\r\\n... conv[\'frac_digits\'], x), grouping=True)\\r\\n\'$1,234,567.80\'\\r\\n11.2. 模板\\r\\nstring 模块包含一个通用的 Template 类，为最终用户的编辑提供了简化的语法。这允\\r\\n许用户无需改变就可以定制他们的应用程序。\\r\\n这个格式使用 $ 加有效的 Python标志符（数字，字母和下划线）形式的占位符名称。\\r\\n通过在占位符两侧使用大括号便可以不用空格分割在其后面跟随更多的字母和数字字符。使\\r\\n用 $$ 来创建一个单独 $ 转码字符。\\r\\n>>>from string import Template\\r\\n>>>t = Template(\'${village}folk send $$10 to $cause.\')\\r\\n>>>t.substitute(village=\'Nottingham\', cause=\'the ditch fund\')\\r\\n\'Nottinghamfolk send $10 to the ditch fund.\'\\r\\n当一个占位符在字典或关键字参数中没有被提供时， substitute() 方法就会抛出一个\\r\\nKeyError 异常。对于邮件合并风格的应用程序，用户提供的数据可能并不完整，这时使用\\r\\nsafe_substitute() 方法可能更适合 — 如果数据不完整，它就不会改变占位符。\\r\\n>>> t = Template(\'Return the $item to $owner.\')\\r\\n>>> d = dict(item=\'unladen swallow\')\\r\\n>>> t.substitute(d)\\r\\nTraceback (most recent call last):\\r\\n. . .\\r\\nKeyError: \'owner\'\\r\\n\"},{\"page\":78,\"content\":\"78\\r\\n>>> t.safe_substitute(d)\\r\\n\'Return the unladen swallow to $owner.\'\\r\\n模板子类可以指定一个自定义分隔符。例如，图像查看器的批量重命名工具可能选择使\\r\\n用百分号作为占位符，像当前日期，图片序列号或文件格式。\\r\\n>>>import time, os.path\\r\\n>>>photofiles = [\'img_1074.jpg\', \'img_1076.jpg\', \'img_1077.jpg\']\\r\\n>>>class BatchRename(Template):\\r\\n... delimiter = \'%\'\\r\\n>>>fmt = input(\'Enter rename style (%d-date %n-seqnum %f-format): \')\\r\\nEnter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f\\r\\n>>>t = BatchRename(fmt)\\r\\n>>>date = time.strftime(\'%d%b%y\')\\r\\n>>>for i, filename in enumerate(photofiles):\\r\\n... base, ext = os.path.splitext(filename)\\r\\n... newname = t.substitute(d=date, n=i, f=ext)\\r\\n... print(\'{0} --> {1}\'.format(filename, newname))\\r\\nimg_1074.jpg --> Ashley_0.jpg\\r\\nimg_1076.jpg --> Ashley_1.jpg\\r\\nimg_1077.jpg --> Ashley_2.jpg\\r\\n模板的另一个应用是把多样的输出格式细节从程序逻辑中分类出来。这便使得 XML文\\r\\n件，纯文本报表和 HTMLWEB报表定制模板成为可能。\\r\\n11.3. 使用二进制数据记录布局\\r\\nstruct 模块为使用变长的二进制记录格式提供了 pack() 和 unpack() 函数。下面的示\\r\\n例演示了在不使用 zipfile 模块的情况下如何迭代一个 ZIP文件的头信息。压缩码 \\\"H\\\" 和\\r\\n\\\"I\\\" 分别表示2和4字节无符号数字， \\\"<\\\" 表明它们都是标准大小并且按照 little-endian 字\\r\\n节排序。\\r\\nimport struct\\r\\ndata = open(\'myfile.zip\', \'rb\').read()\\r\\nstart = 0\\r\\nfor i in range(3): # show the first 3 file headers\\r\\nstart += 14\\r\\nfields = struct.unpack(\'<IIIHH\', data[start:start+16])\\r\\ncrc32, comp_size, uncomp_size, filenamesize, extra_size = fields\\r\\nstart += 16\\r\\nfilename = data[start:start+filenamesize]\\r\\nstart += filenamesize\\r\\nextra = data[start:start+extra_size]\\r\\nprint(filename, hex(crc32), comp_size, uncomp_size)\\r\\n\"},{\"page\":79,\"content\":\"79\\r\\nstart += extra_size + comp_size # skip to the next header\\r\\n11.4. 多线程\\r\\n线程是一种为了分离那些无顺序依赖关系任务的技术。线程可以用来提高应用程序的响\\r\\n应速度，那些应用程序可以在接收用户输入的同时在后台运行其他任务。一种相关的应用就\\r\\n是在运行 I/O的同时在另一个线程中执行计算。\\r\\n下列代码演示了:mod:`threading`高级模块如何在主程序继续执行的同时又在后台运\\r\\n行任务。\\r\\nimport threading, zipfile\\r\\nclass AsyncZip(threading.Thread):\\r\\ndef __init__(self, infile, outfile):\\r\\nthreading.Thread.__init__(self)\\r\\nself.infile = infile\\r\\nself.outfile = outfile\\r\\ndef run(self):\\r\\nf = zipfile.ZipFile(self.outfile, \'w\', zipfile.ZIP_DEFLATED)\\r\\nf.write(self.infile)\\r\\nf.close()\\r\\nprint(\'Finished background zip of:\', self.infile)\\r\\nbackground = AsyncZip(\'mydata.txt\', \'myarchive.zip\')\\r\\nbackground.start()\\r\\nprint(\'The main program continues to run in foreground.\')\\r\\nbackground.join() # Wait for the background task to finish\\r\\nprint(\'Main program waited until background was done.\')\\r\\n多线程应用程序的主要挑战是协调线程，诸如线程间共享数据或其它资源。为了达到那\\r\\n个目的，线程模块提供了许多同步化的原生支持，包括：锁，事件，条件变量和信号灯。\\r\\n尽管这些工具很强大，微小的设计错误也可能造成难以挽回的故障。因此，任务协调的\\r\\n首选方法是把对一个资源的所有访问集中在一个单独的线程中，然后使用 queue 模块用那\\r\\n个线程服务其他线程的请求。为内部线程通信和协调而使用 Queue 对象的应用程序更易于\\r\\n设计，更可读，并且更可靠。\\r\\n11.5. 日志\\r\\nlogging 模块提供了一个完整功能和灵活的日志系统。最简单的形式就是把日志信息发\\r\\n送到一个文件或 sys.stderr 。\\r\\nimport logging\\r\\nlogging.debug(\'Debugging information\')\\r\\nlogging.info(\'Informational message\')\\r\\nlogging.warning(\'Warning:config file %s not found\', \'server.conf\')\\r\\n\"},{\"page\":80,\"content\":\"80\\r\\nlogging.error(\'Error occurred\')\\r\\nlogging.critical(\'Critical error -- shutting down\')\\r\\n输出如下：\\r\\n默认情况下，提示信息和调试信息都会被捕获并被发送到标注错误输出。其他的输出选\\r\\n项包括通过邮箱路由信息，数据报文，sockets或者 HTTP服务器。新的过滤器可以基于信\\r\\n息优先权选择不同的路由： DEBUG ， INFO ， WARNING ， ERROR 和 CRITICAL 。\\r\\n可以从 Python中直接配置日志系统，或者为定制日志从一个用户可编辑的的配置文件\\r\\n中加载而无需修改应用程序。\\r\\n11.6. 弱引用\\r\\nPython自动进行内容管理（为大多数对象做引用计数并为消除循环引用作 garbage\\r\\ncollection ）。在对象最后一个引用消除后，内存就会立即被释放。\\r\\n这种方法在大多数应用程序中工作良好，但偶尔也需要在对象被其它东西使用时追踪对\\r\\n象。不幸的，仅仅为跟踪它们而创建的引用会使其持久存在。 weakref 模块提供了无需创\\r\\n建引用便可跟踪对象的工具。当对象不再需要时，它会被从一个弱引用表中自动的删除并且\\r\\n会为弱引用对象触发回调。典型的应用程序的创建都是昂贵的，包括的缓存对象。\\r\\n>>> import weakref, gc\\r\\n>>> class A:\\r\\n... def __init__(self, value):\\r\\n... self.value = value\\r\\n... def __repr__(self):\\r\\n... return str(self.value)\\r\\n...\\r\\n>>> a = A(10) # create a reference\\r\\n>>> d = weakref.WeakValueDictionary()\\r\\n>>> d[\'primary\'] = a # does not create a reference\\r\\n>>> d[\'primary\'] # fetch the object if it is still alive\\r\\n10\\r\\n>>> del a # remove the one reference\\r\\n>>> gc.collect() # run garbage collection right away\\r\\n0\\r\\n>>> d[\'primary\'] # entry was automatically removed\\r\\nTraceback (most recent call last):\\r\\nFile \\\"<stdin>\\\", line 1, in <module>\\r\\nd[\'primary\'] # entry was automatically removed\\r\\nFile \\\"C:/python31/lib/weakref.py\\\", line 46, in __getitem__\\r\\no = self.data[key]()\\r\\nKeyError: \'primary\'\\r\\n11.7. 列表工具\\r\\n很多数据结构要求可能用内置的列表类型就可以满足。然而，有时出于不同性能取舍需\\r\\n要从中选择一种实现。\\r\\n\"},{\"page\":81,\"content\":\"81\\r\\narray 模块提供了一个类似列表的 array() 对象，它存储同一类型的数据并且更为简洁。\\r\\n以下示例演示了一个存储2字节无符号二进制数字（编码类型 \\\"H\\\" ）数字数组，而非常见的\\r\\n每个项为16字节的 Python整型对象的正规列表。\\r\\n>>>from array import array\\r\\n>>>a = array(\'H\', [4000, 10, 700, 22222])\\r\\n>>>sum(a)\\r\\n26932\\r\\n>>>a[1:3]\\r\\narray(\'H\', [10, 700])\\r\\ncollections 模块提供了一个类似列表的 deque() 对象，它从左边添加（append）和弹出\\r\\n（pop）更快，但在中间查找时更慢。这些对象更适合实现队列和广度优先的搜索树。\\r\\n>>>from collections import deque\\r\\n>>>d = deque([\\\"task1\\\", \\\"task2\\\", \\\"task3\\\"])\\r\\n>>>d.append(\\\"task4\\\")\\r\\n>>>print(\\\"Handling\\\", d.popleft())\\r\\nHandling task1\\r\\nunsearched = deque([starting_node])\\r\\ndef breadth_first_search(unsearched):\\r\\nnode = unsearched.popleft()\\r\\nfor m in gen_moves(node):\\r\\nif is_goal(m):\\r\\nreturn m\\r\\nunsearched.append(m)\\r\\n除了替代列表的实现外，该库还提供了其它工具，像操作排序列表的 bisect 模块函数。\\r\\n>>>import bisect\\r\\n>>>scores = [(100, \'perl\'), (200, \'tcl\'), (400, \'lua\'), (500, \'python\')]\\r\\n>>>bisect.insort(scores, (300, \'ruby\'))\\r\\n>>>scores\\r\\n[(100, \'perl\'), (200, \'tcl\'), (300, \'ruby\'), (400, \'lua\'), (500, \'python\')]\\r\\nheapq 模块为基于正规列表的堆实现提供了函数。最小的值入口总是在位置0上。这对\\r\\n那些希望重复访问最小元素而不想做一次完整列表排序的应用程序很有用。\\r\\n>>>from heapq import heapify, heappop, heappush\\r\\n>>>data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\\r\\n>>>heapify(data) # rearrange the list into heap order\\r\\n>>>heappush(data, -5) # add a new entry\\r\\n>>>[heappop(data) for i in range(3)] # fetch the three smallest entries\\r\\n[-5, 0, 1]\\r\\n\"},{\"page\":82,\"content\":\"82\\r\\n11.8. 十进制浮点数计算\\r\\ndecimal 模块为十进制浮点数计算提供了一个 Decimal 数据类型。与内置的 float 二\\r\\n进制浮点数实现相比，新类对商业应用程序和其他诸如需要精确十进制表示、控制精度、为\\r\\n法律或管理的需要控制舍入、确保小数点的有效位数的应用要求，或者那些用户想要控制数\\r\\n学计算结果的应用程序尤为有用。\\r\\n例如，计算一次70分钟电话费对应的5%的税费，使用十进制浮点数和二进制浮点数的\\r\\n结果是不同的。如果要对最接近的分钟数进行舍入，这种差别就变得很重要。\\r\\n>>>from decimal import *\\r\\n>>>Decimal(\'0.70\') * Decimal(\'1.05\')\\r\\nDecimal(\\\"0.7350\\\")\\r\\n>>>.70 * 1.05\\r\\n0.73499999999999999\\r\\nDecimal 的结果总会保留结尾中的0，还会从带有两个小数位的被乘数自动推断为4个小\\r\\n数位。 Decimal 让数学计算像手动处理一样，并且避免了当二进制浮点数无法精确的表示\\r\\n小数位时可能出现的结果。\\r\\n高精度使得 Decimal 类可以进行那些不适合二进制浮点数的模运算和等式测试。\\r\\n>>>Decimal(\'1.00\') % Decimal(\'.10\')\\r\\nDecimal(\\\"0.00\\\")\\r\\n>>>1.00 % 0.10\\r\\n0.09999999999999995\\r\\n>>>sum([Decimal(\'0.1\')]*10) == Decimal(\'1.0\')\\r\\nTrue\\r\\n>>>sum([0.1]*10) == 1.0\\r\\nFalse\\r\\nDecimal 模块为算术提供了需要的高精度支持。\\r\\n>>>getcontext().prec = 36\\r\\n>>>Decimal(1) / Decimal(7)\\r\\nDecimal(\\\"0.142857142857142857142857142857142857\\\")\\r\\n12. 现在做什么呢？\\r\\n阅读本指南可能已经增加了你使用 Python的兴趣 — 你应该已经迫不及待的希望使用\\r\\nPython来解决实际中的问题了。你应该从哪里学习更多的知识呢？\\r\\n本指南是 Python文档集的一部分。还有其他一些文档：\\r\\nThe Python Standard Library:\\r\\n你应该浏览此手册，它包含关于标准库中类型，函数和模块的完整（虽然简炼）参考资\\r\\n料。标准 Python发布版包含了 大量 的附加示例代码。有读取 Unix mailboxes的模块，从\\r\\nHTTP中获取文档的模块，生成随机数的模块，解析命令行参数的模块，编写 CGI程序的模\\r\\n块，压缩数据的模块，以及完成许多其他任务的模块。浏览库参考你会了解都有哪些可用的\\r\\n\"},{\"page\":83,\"content\":\"83\\r\\n模块。\\r\\nInstalling Python Modules:\\r\\n解释如好安装其他 Python用户编写的扩展模块。\\r\\nThe Python Language Reference:\\r\\nPython句法和语法的详细说明。比较难以阅读，但作为一个完全指南对理解语言自身\\r\\n很有帮助。\\r\\nMore Python resources: 更多 Python资源（PS：我就不翻译了～）\\r\\n• http://www.python.org: The major Python Web site. It contains code,\\r\\ndocumentation, and pointers to Python-related pages around the Web. This Web site is\\r\\nmirrored in various places around the world, such as Europe, Japan, and Australia; a mirror\\r\\nmay be faster than the main site, depending on your geographical location.\\r\\n• http://docs.python.org: Fast access to Python’s documentation.\\r\\n• http://pypi.python.org: The Python Package Index, previously also nicknamed the\\r\\nCheese Shop, is an index of user-created Python modules that are available for download.\\r\\nOnce you begin releasing code, you can register it here so that others can find it.\\r\\n• http://aspn.activestate.com/ASPN/Python/Cookbook/: The Python Cookbook is a\\r\\nsizable collection of code examples, larger modules, and useful scripts. Particularly notable\\r\\ncontributions are collected in a book also titled Python Cookbook (O’Reilly & Associates,\\r\\nISBN 0-596-00797-3.)\\r\\n• http://scipy.org: The Scientific Python project includes modules for fast array\\r\\ncomputations and manipulations plus a host of packages for such things as linear algebra,\\r\\nFourier transforms, non-linear solvers, random number distributions, statistical analysis\\r\\nand the like.\\r\\nFor Python-related questions and problem reports, you can post to the newsgroup\\r\\ncomp.lang.python, or send them to the mailing list at python-list@python.org. The\\r\\nnewsgroup and mailing list are gatewayed, so messages posted to one will automatically\\r\\nbe forwarded to the other. There are around 120 postings a day (with peaks up to several\\r\\nhundred), asking (and answering) questions, suggesting new features, and announcing\\r\\nnew modules. Before posting, be sure to check the list of Frequently Asked Questions (also\\r\\ncalled the FAQ), or look for it in the Misc/ directory of the Python source distribution.\\r\\nMailing list archives are available at http://mail.python.org/pipermail/. The FAQ answers\\r\\nmany of the questions that come up again and again, and may already contain the solution\\r\\nfor your problem.\\r\\n13. 交互的输入编辑和历史记录\\r\\n一些版本的Python解释器支持对当前输入行和历史记录的编辑，就像Korn Shell和GNU\\r\\nBash Shell提供的工具一样。这是使用支持 Emacs风格和 VI风格的 GNU Readline 库实现\\r\\n的。这个库包含自己的文档，这里我就不列出了，但最基本的用法是很容易理解的。这里描\\r\\n述的交互编辑和历史记录功能在 Unix和 Cygwin版本的解释器中都是可选的有效功能。\\r\\n本章 不 包括 Mark Hammond编写的 PythonWin包中编辑功能或 Python携带的基于\\r\\nTk的 IDLE环境的文档。在 NT上的 DOS窗口或其他 DOS中，以及Windows系列系统上，\\r\\n命令行历史记录是糟糕的。\\r\\n\"},{\"page\":84,\"content\":\"84\\r\\n13.1. 行编辑\\r\\n如果支持的话，输入行编辑功能在解释器中总是可用的。当前行可以使用常见的 Emacs\\r\\n控制字符进行编辑。最重要的一些包括： C-A （Control-A），将光标移动到左边； C-F ，\\r\\n将光标移动到右边； :kdb:`C-K` ，删除行中光标右边的内容； :kdb:`C-Y` ，删除行中光\\r\\n标左边的内容； :kdb:`C-underscore` ，撤销最后的编辑修改，可以重复撤销。\\r\\n13.2. 历史记录\\r\\n历史记录按照如下方式工作：所有非空的输入行都会被存储在一个历史缓冲区内，当一\\r\\n个新提示符出现时，你被置于这个缓冲区底部的一个新行上。使用 C-P 可以在这个历史缓\\r\\n冲区内向上（往后）移动一行，而 C-N 是向下（往前）移动一行。历史缓冲区内的任何行\\r\\n都是可编辑的，当对某行作编辑后就会在提示符前面显示一个星号（*）来标示。按下 Return\\r\\n键就可以将当前行传递给 Python解释器。\\r\\n13.3. 键绑定\\r\\n关于 Readline库的键绑定和一些其他参数可以在一个叫做 ~/.inputrc 的初始化文件中\\r\\n通过放置命令自定义。键绑定的书写格式是：\\r\\nkey-name: function-name\\r\\n或者：\\r\\n\\\"string\\\": function-name\\r\\n并且可以通过如下方式设定选项：\\r\\nset option-name value\\r\\n例如：\\r\\n# I prefer vi-style editing:\\r\\nset editing-mode vi\\r\\n# Edit using a single line:\\r\\nset horizontal-scroll-mode On\\r\\n# Rebind some keys:\\r\\nMeta-h: backward-kill-word\\r\\n\\\"\\\\C-u\\\": universal-argument\\r\\n\\\"\\\\C-x\\\\C-r\\\": re-read-init-file\\r\\n注意：在 Python中， Tab 默认绑定为插入一个 Tab 字符代替 Readline的默认文件名\\r\\n补全函数。如果你较真，你可以通过在 ~/.inputrc 文件中加入以下键绑定覆盖它。\\r\\nTab: complete\\r\\n（当然，如果你已经习惯使用 Tab 来补全文件名，这会让输入缩进延续行变得困难。）\\r\\n对于变量和模块名也可以使用自动补全。想要在解释器的交互模式中使用它，你需要在\\r\\n\"},{\"page\":85,\"content\":\"85\\r\\n启动文件中添加以下代码： [1]\\r\\nimport rlcompleter, readline\\r\\nreadline.parse_and_bind(\'tab: complete\')\\r\\n这会把 Tab 键绑定到补全函数上，所以当敲击两次 Tab 键时就会提示补全字符。它会\\r\\n查看 Python声明的名称，当前局部变量和有效的模块名。对于类似 string.a 的点号表示，\\r\\n它将这个表示看作最后的 \'.\' 并且从结果对象的属性中给出补全建议。注意：如果一个带有\\r\\n__getattr__() 方法的对象是这个表示的一部分，这可能会执行程序定义代码。\\r\\n一个更有效的启动文件看上去可能类似这个示例。注意：由这个文件创建的名称一旦不\\r\\n再需要就会被删除；在同一个命名空间中，像交互命令，从启动文件被执行时就会完成这些\\r\\n绑定，并且通过删除名称来避免给交互环境带来副作用。你可能会发现这对维持一些导入的\\r\\n模块很方便，像 os ，它们被证明在大多数解释器会话中是必须的。\\r\\n# Add auto-completion and a stored history file of commands to your Python\\r\\n# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is\\r\\n# bound to the Esc key by default (you can change it - see readline docs).\\r\\n#\\r\\n# Store the file in ~/.pystartup, and set an environment variable to point\\r\\n# to it: \\\"export PYTHONSTARTUP=/home/user/.pystartup\\\" in bash.\\r\\n#\\r\\n# Note that PYTHONSTARTUP does *not* expand \\\"~\\\", so you have to put in the\\r\\n# full path to your home directory.\\r\\nimport atexit\\r\\nimport os\\r\\nimport readline\\r\\nimport rlcompleter\\r\\nhistoryPath = os.path.expanduser(\\\"~/.pyhistory\\\")\\r\\ndef save_history(historyPath=historyPath):\\r\\nimport readline\\r\\nreadline.write_history_file(historyPath)\\r\\nif os.path.exists(historyPath):\\r\\nreadline.read_history_file(historyPath)\\r\\natexit.register(save_history)\\r\\ndel os, atexit, readline, rlcompleter, save_history, historyPath\\r\\n13.4. 注释\\r\\n与更早的解释器版本相比，这个功能是一个庞大的步骤。然而，一些要求被舍弃：如果\\r\\n在连续行中使用适当的缩进一切就 OK了（当下一行要求一个缩进标记时，语法分析器知道\\r\\n如何处理）。完整的结构可能使用解释器的 table标志。使用命令检查（或提示）匹配的圆\\r\\n\"},{\"page\":86,\"content\":\"86\\r\\n括号，引号等也是很有用的。\\r\\nFootnotes\\r\\n1]\\r\\n当交互解释器启动时，Python会执行环境变量 PYTHONSTARTUP 定义的文件内\\r\\n容。\\r\\n\"}],\"totalPages\":86}', 4);
INSERT INTO `course_chapters` VALUES (16, 3, 'sparkSQL回顾', 3, 'VIDEO', 0, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/videos/1752218181383_13_sparkSQL回顾.mp4', '00:07:51', 13467648, '2025-07-11 15:16:30', NULL, 4);
INSERT INTO `course_chapters` VALUES (17, 3, 'python学习文档', 3, 'DOCUMENT', 0, 'documents/1752218851016_python学习文档.doc', '00:10:00', 13467, '2025-07-11 15:27:30', '{\"pages\":[{\"page\":1,\"content\":\"为什么使用Python\\r\\n\\n假设我们有这么一项任务:简单测试局域网中的电脑是否连通.这些电脑的ip范围从192.168.0.101到192.168.0.200.   \\r\\n\\n思路:用shell编程.(Linux通常是bash而Windows是批处理脚本).例如,在Windows上用ping ip 的命令依次测试各个机器并得到控制台输出.由于ping通的时候控制台文本通常是\\\"Reply from ... \\\" 而不通的时候文本是\\\"time out ... \\\" ,所以,在结果中进行字符串查找,即可知道该机器是否连通.\\r\\n\\n实现:Java代码如下:\\r\\n\\nString cmd=\\\"cmd.exe ping \\\";\\r\\n\\nString ipprefix=\\\"192.168.10.\\\";\\r\\n\\nint begin=101;\\r\\n\\nint end=200;\\r\\n\\nProcess p=null;\\r\\n\\nfor(int i=begin;i<end;i++){\\r\\n\\n\"},{\"page\":2,\"content\":\" p= Runtime.getRuntime().exec(cmd+i);\\r\\n\\n String line = null;\\r\\n\\n BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\\r\\n\\n while((line = reader.readLine()) != null)\\r\\n\\n {\\r\\n\\n     //Handling line , may logs it. \\r\\n\\n }\\r\\n\\nreader.close();\\r\\n\\np.destroy();\\r\\n\\n}\\r\\n\\n\"},{\"page\":3,\"content\":\"这段代码运行得很好,问题是为了运行这段代码,你还需要做一些额外的工作.这些额外的工作包括:\\r\\n\\n编写一个类文件\\r\\n\\n编写一个main方法\\r\\n\\n将之编译成字节代码\\r\\n\\n由于字节代码不能直接运行,你需要再写个小小的bat或者bash脚本来运行.\\r\\n\\n当然,用C/C++同样能完成这项工作.但C/C++不是跨平台语言.在这个足够简单的例子中也许看不出C/C++和Java实现的区别,但在一些更为复 杂的场景,比如要将连通与否的信息记录到网络数据库.由于Linux和Windows的网络接口实现方式不同,你不得不写两个函数的版本.用Java就没 有这样的顾虑.\\r\\n\\n同样的工作用Python实现如下:\\r\\n\\nimport subprocess\\r\\n\\ncmd=\\\"cmd.exe\\\"\\r\\n\\nbegin=101\\r\\n\\n\"},{\"page\":4,\"content\":\"end=200\\r\\n\\nwhile begin<end:\\r\\n\\np=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,\\r\\n\\n               stdin=subprocess.PIPE,\\r\\n\\n               stderr=subprocess.PIPE)\\r\\n\\np.stdin.write(\\\"ping 192.168.1.\\\"+str(begin)+\\\"\\\\n\\\")\\r\\n\\np.stdin.close()\\r\\n\\np.wait()\\r\\n\\nprint \\\"execution result: %s\\\"%p.stdout.read()\\r\\n\\n对比Java,Python的实现更为简洁,你编写的时间更快.你不需要写main函数,并且这个程序保存之后可以直接运行.另外,和Java一样,Python也是跨平台的.\\r\\n\\n\"},{\"page\":5,\"content\":\"有经验的C/Java程序员可能会争论说用C/Java写会比Python写得快.这个观点见仁见智.我的想法是当你同时掌握Java和Python之 后,你会发现用Python写这类程序的速度会比Java快上许多.例如操作本地文件时你仅需要一行代码而不需要Java的许多流包装类.各种语言有其天 然的适合的应用范围.用Python处理一些简短程序类似与操作系统的交互编程工作最省时省力.\\r\\n\\nPython应用场合\\r\\n\\n足够简单的任务,例如一些shell编程.如果你喜欢用Python设计大型商业网站或者设计复杂的游戏,悉听尊便.\\r\\n\\n2 快速入门\\r\\n\\n2.1 Hello world\\r\\n\\n安装完Python之后(我本机的版本是2.5.4),打开IDLE(Python GUI) , 该程序是Python语言解释器,你写的语句能够立即运行.我们写下一句著名的程序语句:\\r\\n\\nprint \\\"Hello,world!\\\" \\r\\n\\n并按回车.你就能看到这句被K&R引入到程序世界的名言.\\r\\n\\n\"},{\"page\":6,\"content\":\"在解释器中选择\\\"File\\\"--\\\"New Window\\\" 或快捷键 Ctrl+N , 打开一个新的编辑器.写下如下语句:\\r\\n\\nprint \\\"Hello,world!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n保存为a.py文件.按F5,你就可以看到程序的运行结果了.这是Python的第二种运行方式.\\r\\n\\n找到你保存的a.py文件,双击.也可以看到程序结果.Python的程序能够直接运行,对比Java,这是一个优势.\\r\\n\\n2.2 国际化支持\\r\\n\\n我们换一种方式来问候世界.新建一个编辑器并写如下代码:\\r\\n\\nprint \\\"欢迎来到奥运中国!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n\"},{\"page\":7,\"content\":\"在你保存代码的时候,Python会提示你是否改变文件的字符集,结果如下:\\r\\n\\n# -*- coding: cp936 -*- \\r\\n\\nprint \\\"欢迎来到奥运中国!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n将该字符集改为我们更熟悉的形式:\\r\\n\\n# -*- coding: GBK -*- \\r\\n\\nprint \\\"欢迎来到奥运中国!\\\" # 使用中文的例子\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n程序一样运行良好.\\r\\n\\n\"},{\"page\":8,\"content\":\"2.3 方便易用的计算器\\r\\n\\n用微软附带的计算器来计数实在太麻烦了.打开Python解释器,直接进行计算:\\r\\n\\na=100.0\\r\\n\\nb=201.1\\r\\n\\nc=2343\\r\\n\\nprint (a+b+c)/c\\r\\n\\n2.4 字符串,ASCII和UNICODE\\r\\n\\n可以如下打印出预定义输出格式的字符串:\\r\\n\\nprint \\\"\\\"\\\"\\r\\n\\n\"},{\"page\":9,\"content\":\"Usage: thingy [OPTIONS]\\r\\n\\n -h                        Display this usage message\\r\\n\\n -H hostname               Hostname to connect to\\r\\n\\n\\\"\\\"\\\" \\r\\n\\n字符串是怎么访问的?请看这个例子:\\r\\n\\nword=\\\"abcdefg\\\"\\r\\n\\na=word[2]\\r\\n\\nprint \\\"a is: \\\"+a\\r\\n\\nb=word[1:3]\\r\\n\\nprint \\\"b is: \\\"+b # index 1 and 2 elements of word.\\r\\n\\n\"},{\"page\":10,\"content\":\"c=word[:2]\\r\\n\\nprint \\\"c is: \\\"+c # index 0 and 1 elements of word.\\r\\n\\nd=word[0:]\\r\\n\\nprint \\\"d is: \\\"+d # All elements of word.\\r\\n\\ne=word[:2]+word[2:]\\r\\n\\nprint \\\"e is: \\\"+e # All elements of word.\\r\\n\\nf=word[-1]\\r\\n\\nprint \\\"f is: \\\"+f # The last elements of word.\\r\\n\\ng=word[-4:-2]\\r\\n\\nprint \\\"g is: \\\"+g # index 3 and 4 elements of word.\\r\\n\\n\"},{\"page\":11,\"content\":\"h=word[-2:]\\r\\n\\nprint \\\"h is: \\\"+h # The last two elements.\\r\\n\\ni=word[:-2]\\r\\n\\nprint \\\"i is: \\\"+i # Everything except the last two characters\\r\\n\\nl=len(word)\\r\\n\\nprint \\\"Length of word is: \\\"+ str(l) \\r\\n\\n请注意ASCII和UNICODE字符串的区别:\\r\\n\\nprint \\\"Input your Chinese name:\\\"\\r\\n\\ns=raw_input(\\\"Press enter to be continued\\u0001\\\");\\r\\n\\nprint \\\"Your name is \\u0001 : \\\" +s;\\r\\n\\n\"},{\"page\":12,\"content\":\"l=len(s)\\r\\n\\nprint \\\"Length of your Chinese name in asc codes is:\\\"+str(l);\\r\\n\\na=unicode(s,\\\"GBK\\\")\\r\\n\\nl=len(a)\\r\\n\\nprint \\\"I\'m sorry we should use unicode char!Characters number of your Chinese \\\\\\r\\n\\nname in unicode is:\\\"+str(l); \\r\\n\\n2.5 使用List\\r\\n\\n类似Java里的List,这是一种方便易用的数据类型:\\r\\n\\nword=[\'a\',\'b\',\'c\',\'d\',\'e\',\'f\',\'g\']\\r\\n\\n\"},{\"page\":13,\"content\":\"a=word[2]\\r\\n\\nprint \\\"a is: \\\"+a\\r\\n\\nb=word[1:3]\\r\\n\\nprint \\\"b is: \\\"\\r\\n\\nprint b # index 1 and 2 elements of word.\\r\\n\\nc=word[:2]\\r\\n\\nprint \\\"c is: \\\"\\r\\n\\nprint c # index 0 and 1 elements of word.\\r\\n\\nd=word[0:]\\r\\n\\nprint \\\"d is: \\\"\\r\\n\\n\"},{\"page\":14,\"content\":\"print d # All elements of word.\\r\\n\\ne=word[:2]+word[2:]\\r\\n\\nprint \\\"e is: \\\"\\r\\n\\nprint e # All elements of word.\\r\\n\\nf=word[-1]\\r\\n\\nprint \\\"f is: \\\"\\r\\n\\nprint f # The last elements of word.\\r\\n\\ng=word[-4:-2]\\r\\n\\nprint \\\"g is: \\\"\\r\\n\\nprint g # index 3 and 4 elements of word.\\r\\n\\n\"},{\"page\":15,\"content\":\"h=word[-2:]\\r\\n\\nprint \\\"h is: \\\"\\r\\n\\nprint h # The last two elements.\\r\\n\\ni=word[:-2]\\r\\n\\nprint \\\"i is: \\\"\\r\\n\\nprint i # Everything except the last two characters\\r\\n\\nl=len(word)\\r\\n\\nprint \\\"Length of word is: \\\"+ str(l)\\r\\n\\nprint \\\"Adds new element\\u0001\\\"\\r\\n\\nword.append(\'h\')\\r\\n\\n\"},{\"page\":16,\"content\":\"print word \\r\\n\\n2.6 条件和循环语句\\r\\n\\n# Multi-way decision\\r\\n\\nx=int(raw_input(\\\"Please enter an integer:\\\"))\\r\\n\\nif x<0:\\r\\n\\nx=0\\r\\n\\nprint \\\"Negative changed to zero\\\"\\r\\n\\nelif x==0:\\r\\n\\nprint \\\"Zero\\\"\\r\\n\\n\"},{\"page\":17,\"content\":\"else:\\r\\n\\nprint \\\"More\\\"\\r\\n\\n# Loops List\\r\\n\\na = [\'cat\', \'window\', \'defenestrate\']\\r\\n\\nfor x in a:\\r\\n\\nprint x, len(x)\\r\\n\\n2.7 如何定义函数\\r\\n\\n# Define and invoke function.\\r\\n\\ndef sum(a,b):\\r\\n\\n\"},{\"page\":18,\"content\":\"return a+b\\r\\n\\nfunc = sum\\r\\n\\nr = func(5,6)\\r\\n\\nprint r\\r\\n\\n# Defines function with default argument\\r\\n\\ndef add(a,b=2):\\r\\n\\nreturn a+b\\r\\n\\nr=add(1)\\r\\n\\nprint r\\r\\n\\nr=add(1,5)\\r\\n\\n\"},{\"page\":19,\"content\":\"print r \\r\\n\\n并且,介绍一个方便好用的函数:\\r\\n\\n# The range() function\\r\\n\\na =range(5,10)\\r\\n\\nprint a\\r\\n\\na = range(-2,-7)\\r\\n\\nprint a\\r\\n\\na = range(-7,-2)\\r\\n\\nprint a\\r\\n\\na = range(-2,-11,-3) # The 3rd parameter stands for step\\r\\n\\n\"},{\"page\":20,\"content\":\"print a \\r\\n\\n2.8 文件I/O\\r\\n\\nspath=\\\"D:/download/baa.txt\\\"\\r\\n\\nf=open(spath,\\\"w\\\") # Opens file for writing.Creates this file doesn\'t exist.\\r\\n\\nf.write(\\\"First line 1.\\\\n\\\")\\r\\n\\nf.writelines(\\\"First line 2.\\\")\\r\\n\\nf.close()\\r\\n\\nf=open(spath,\\\"r\\\") # Opens file for reading\\r\\n\\nfor line in f:\\r\\n\\n\"},{\"page\":21,\"content\":\"print line\\r\\n\\nf.close() \\r\\n\\n2.9 异常处理\\r\\n\\ns=raw_input(\\\"Input your age:\\\")\\r\\n\\nif s ==\\\"\\\":\\r\\n\\nraise Exception(\\\"Input must no be empty.\\\")\\r\\n\\ntry:\\r\\n\\ni=int(s)\\r\\n\\nexcept ValueError:\\r\\n\\n\"},{\"page\":22,\"content\":\"print \\\"Could not convert data to an integer.\\\"\\r\\n\\nexcept:\\r\\n\\nprint \\\"Unknown exception!\\\"\\r\\n\\nelse: # It is useful for code that must be executed if the try clause does not raise an exception\\r\\n\\nprint \\\"You are %d\\\" % i,\\\" years old\\\"\\r\\n\\nfinally: # Clean up action\\r\\n\\nprint \\\"Goodbye!\\\" \\r\\n\\n2.10 类和继承\\r\\n\\nclass Base:\\r\\n\\n\"},{\"page\":23,\"content\":\"def __init__(self):\\r\\n\\n    self.data = []\\r\\n\\ndef add(self, x):\\r\\n\\n    self.data.append(x)\\r\\n\\ndef addtwice(self, x):\\r\\n\\n    self.add(x)\\r\\n\\n    self.add(x)\\r\\n\\n# Child extends Base\\r\\n\\nclass Child(Base):\\r\\n\\ndef plus(self,a,b):\\r\\n\\n\"},{\"page\":24,\"content\":\"    return a+b\\r\\n\\noChild =Child()\\r\\n\\noChild.add(\\\"str1\\\")\\r\\n\\nprint oChild.data\\r\\n\\nprint oChild.plus(2,3) \\r\\n\\n2.11 包机制\\r\\n\\n每一个.py文件称为一个module,module之间可以互相导入.请参看以下例子:\\r\\n\\n# a.py\\r\\n\\ndef add_func(a,b):\\r\\n\\n\"},{\"page\":25,\"content\":\"return a+b \\r\\n\\n# b.py\\r\\n\\nfrom a import add_func # Also can be : import a\\r\\n\\nprint \\\"Import add_func from module a\\\"\\r\\n\\nprint \\\"Result of 1 plus 2 is: \\\"\\r\\n\\nprint add_func(1,2)    # If using \\\"import a\\\" , then here should be \\\"a.add_func\\\" \\r\\n\\nmodule可以定义在包里面.Python定义包的方式稍微有点古怪,假设我们有一个parent文件夹,该文件夹有一个child子文件 夹.child中有一个module a.py . 如何让Python知道这个文件层次结构?很简单,每个目录都放一个名为_init_.py 的文件.该文件内容可以为空.这个层次结构如下所示: \\r\\n\\nparent \\r\\n\\n--__init_.py\\r\\n\\n--child\\r\\n\\n\"},{\"page\":26,\"content\":\"-- __init_.py\\r\\n\\n--a.py\\r\\n\\nb.py \\r\\n\\n那么Python如何找到我们定义的module?在标准包sys中,path属性记录了Python的包路径.你可以将之打印出来:\\r\\n\\nimport sys\\r\\n\\nprint sys.path\\r\\n\\n通常我们可以将module的包路径放到环境变量PYTHONPATH中,该环境变量会自动添加到sys.path属性.另一种方便的方法是编程中直接指定我们的module路径到sys.path 中:\\r\\n\\nimport sys\\r\\n\\nsys.path.append(\'D:\\\\\\\\download\')\\r\\n\\nfrom parent.child.a import add_func\\r\\n\\n\"},{\"page\":27,\"content\":\"print sys.path\\r\\n\\nprint \\\"Import add_func from module a\\\"\\r\\n\\nprint \\\"Result of 1 plus 2 is: \\\"\\r\\n\\nprint add_func(1,2) \\r\\n\\n总结\\r\\n\\n你会发现这个教程相当的简单.许多Python特性在代码中以隐含方式提出,这些特性包括:Python不需要显式声明数据类型,关键字说明,字符串函数 的解释等等.我认为一个熟练的程序员应该对这些概念相当了解,这样在你挤出宝贵的一小时阅读这篇短短的教程之后,你能够通过已有知识的迁移类比尽快熟悉 Python,然后尽快能用它开始编程.\\r\\n\\n当然,1小时学会Python颇有哗众取宠之嫌.确切的说,编程语言包括语法和标准库.语法相当于武术招式,而标准库应用实践经验则类似于内功,需要长期 锻炼.Python学习了Java的长处,提供了大量极方便易用的标准库供程序员\\\"拿来主义\\\".(这也是Python成功的原因),在开篇我们看到了 Python如何调用Windows cmd的例子,以后我会尽量写上各标准库的用法和一些应用技巧,让大家真正掌握Python.\\r\\n\\n但不管怎样,至少你现在会用Python代替繁琐的批处理写程序了.希望那些真的能在一小时内读完本文并开始使用Python的程序员会喜欢这篇小文章,谢谢!\\r\\n\\n\"}],\"totalPages\":27}', 4);
INSERT INTO `course_chapters` VALUES (18, 4, '初识JAVA', 1, 'VIDEO', 0, 'https://lesson-online.oss-cn-beijing.aliyuncs.com/videos/1752219000600_13_sparkSQL回顾.mp4', '00:07:51', 13467648, '2025-07-11 15:30:12', NULL, 4);
INSERT INTO `course_chapters` VALUES (19, 4, 'Java知识总结完整版', 2, 'DOCUMENT', 0, 'documents/1752219104812_(完整word版)java知识总结完整版-推荐文档.doc', '00:10:00', 13467, '2025-07-11 15:31:44', '{\"pages\":[],\"totalPages\":0}', 4);
INSERT INTO `course_chapters` VALUES (20, 5, '前端规范开发文档', 1, 'DOCUMENT', 0, 'documents/1752219313194_前端开发规范文档.docx', '00:10:00', 13467, '2025-07-11 15:35:12', '{\"pages\":[{\"page\":1,\"content\":\"前端开发规范文档\\n规范目的\\n为提高团队协作效率，便于后端开发人员添加功能及前端后期优化维护，输出高质量的代码，特制定该文档。本规范文档一经确认, 前端开发人员必须按本文档规范进行前端开发。本文档如有不对或者不合适的地方请及时提出。经讨论决定后方可更改。\\n基本准则\\n符合web标准，语义化html，结构表现行为分离，兼容性优良。页面性能方面，代码要求简洁明了有序，尽可能的减小服务器负载，保证最快的解析速度。\\n一、html 文件命名及编写规范\\n1、命名规则\\n采用小写英文字母 || _的组合命名，菜单名_功能名称，后缀.html。如：manage_list.html（管理列表）、manage_add.html（新增）、manage_edit.html（修改）、manage_detail.html（详情）。同时将页面放在其对应的模块划分目录中。\\n\"},{\"page\":2,\"content\":\"2、编写规范：\\n(1)文档类型声明及编码统一为html5声明类型“<!DOCTYPE html>”; \\n(2)编码统一为<meta charset=\\\"utf-8\\\" />, 书写时利用IDE实现层次分明的缩进;\\n(3)区域块、功能组件以及需要标注的地方，插入注释。\\n(4)在布局文件结构时，应遵循语义化标签（该用p不要用div、该用ul、li不要用p，h标签应根据标题层级合理利用）、代码结构简单、清晰明了，少用标签、少套结构（一段结构布局中 1个标签能解决的不要用2个，套2层结构能解决的不要套3层）的基本原则。\\n代码标签、结构嵌套示例：\\n    代码分析：根据目标效果图，实现的代码部分别使用了 ul/li /h4/ img /div /h3/ p 这些标签。首先这是一个产品列表，所以用了ul li进行包裹；其次，这块分别有两个重要的内容展示，一个是产品名称，一个是企名称，根据权重，代码层分别采用了h3、h4标签；其它的文字展示信息采用了p标签；图片采用标签img引入。整个实现，代码结构清晰、标签使用合理，符合语义化、遵循SEO搜索等原则。\\n二、CSS文件命名及编写规范\\n1、命名规则\\n用小写英文字母命名（可跟据CSS作用域以及、区域模块、公用组件、等等分别命名），后缀.css。如：common.css（公用）、reset.css（重置）、base.css（页面主体）、form.css（表单）、popup.css（弹层）等等。\\n\"},{\"page\":3,\"content\":\"2、编写规范：\\n(1)除重置样式使用元素选择器（html\\\\body\\\\div\\\\p\\\\ul\\\\li……）外，其它原则上使用类选择器（.nav\\\\.header……）编写样式，如无特别需要，应避免使用ID选择器（#btn\\\\#foot……）；\\n(2)编写格式：为提高样式代码的可读性、方便开发人员查找、维护，因此采用单行编写格式，一行编写一个属性和属性值。如果一个类选择器属性只有2到3个，考虑到节省空间问题，可不换行在同行编写；\\n(3)区域块、组件及需要标注的地方请插入注释。\\n(4)样式命名：采用“小写英文(模块、组件及功能名称)”+“ _(拼接)”+“--(修饰符)”规则命名。如：“toggle_title”，通常是指切换模块的标题样式名；“toggle_title--special”，通常指一个有别于其它切换模块标题的、具有独立样式的标题样式名。\\n3、CSS文件的引入：\\n统一在html文件中的head标签内使用link 标签引入，如：<link href=\\\"../css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">。为方便代码的维护、扩展、调式，避免写行内样式（div style=”font-size:14px; width:300px;”）,应采用‘div class=”list_1”’等方式引用。\\n4、CSS文件存放目录结构配置：\\n统一将样式文件放在CSS根目录下（图1所示）。如样式文件过多，可根据项目模块划分，在根目录下建模块文件夹，将该模块样式文件对应放入（图2所示）。\\n图例：\\n\"},{\"page\":4,\"content\":\"CSS文件夹                                      CSS文件夹\\n          reset.css                                        reset.css    \\n          common.css                                    common.css\\n          base.css                                        base.css  \\n                                                          userCenter\\n                                                                     base.css\\n                                                                     popup.css\\n图1：所有CSS文件统一在根目下                  图2：建了模块文件夹\\n三、JS文件命名及编写规范\\n1、命名规则\\n\"},{\"page\":5,\"content\":\"采用小写英文字母命名，后缀.js。如： common.js，如编写插件，则以“plugin_”开头，以具体功能名称结尾，如：plugin_ dialog.js。\\n编写规范：每个功能函数及需要作标注的地方插入注释。注意语法规范，以分号结尾。为提高性能及用户体验，JS文件及代码应放在html文件的最底部（除了一些特定的JS文件，在页面刷新时必须先加载的，需要放在head中之外。如移动端适配的“flexible.js”）。\\n2、JS文件的引入：\\n(1)在html文件中以“script”标签引入，如：<script src=\\\"../js/jquery.min.js\\\"></script>；\\n(2)在html文件底部内嵌JS代码，如：\\n <script>\\n//日期控件\\n  $(\'#start1\').click(function(){\\n      WdatePicker({\\n          maxDate:\'#F{$dp.$D(\\\\\'end1\\\\\',{d:-1});}\',\\n\"},{\"page\":6,\"content\":\"          readOnly:true\\n      });\\n  });\\n  $(\'#end1\').click(function(){\\n      WdatePicker({\\n          minDate:\'#F{$dp.$D(\\\\\'start1\\\\\',{d:1});}\',\\n          readOnly:true\\n      });\\n  });\\n</script>\\n\"},{\"page\":7,\"content\":\"3、JS文件存放目录结构配置：\\n  统一将脚本文件放在JS根目录下。如文件过多，可根据项目模块划分，在根目录下建模块文件夹，将该模块JS文件对应放入。插件单独建文件夹“plugins”，所有JS插件都放在其内。文件存放结构布局参考上文中的“CSS文件存放目录结构配置”。\\n注：如果使用的JS插件含有独立的图片及样式文件，需将整个插件所有文件均放入JS/plugins文件夹内，不要分离该插件的资源文件。\\n四、图片命名\\n1、命名规则\\n采用小写英文字母 || 数字 || _ 的组合，其中不得包含汉字 || 空格 || 特殊字符；尽量用易懂的词汇, 便于团队其他成员理解; 另, 命名分头尾两部分, 用下划线隔开, 比如ad_left01.gif || btn_submit.gif;\\n2、背景图片（采用CSS background- position定位的图片）命名：\\n(1)sprite拼图命名规则：\\n      图标：icon_sprite，如有多张，可以 icon后面跟数字，如：icon01_sprite；\\n      组件：组件名称_sprite，如：nav_sprite、foot_sprite、header_sprite、form_sprite；\\n\"},{\"page\":8,\"content\":\"      页面内容中用到的背景图片：cont_sprite，如有多张，可以在cont后面跟数字，如：cont01_sprite；\\n(2)单张图片命名规则：\\n采用小写英文字母和数字相接合，如：notfand.png、phone.jpg、 cont01.png、cont02.png……\\n3、前景图片（采用标签元素 img src引入的图片）命名：\\n命名规则：采用小写英文字母和数字相接合（可按区域块），如：list01.jpg、img01.jpg、pic01.png……\\n注意：页面中如果图片元素是作为动态数据来展示的，采用前景图片引入法，即<img src=”***.jpg”>。这些图片仅对前端编写html文件提供效果展示。除此之外的图片应使用背景图片定位方式导入，比如小图标等等。\\n\"}],\"totalPages\":8}', 4);
INSERT INTO `course_chapters` VALUES (21, 5, 'vue文档小结', 2, 'DOCUMENT', 0, 'documents/1752219344687_vue文档小结.pdf', '00:10:00', 13467, '2025-07-11 15:35:44', '{\"pages\":[{\"page\":1,\"content\":\"Vue⽂档⼩结\\r\\n1. 解析  DOM 模板时的注意事项\\r\\n有些 HTML 元素，诸如 <ul>、<ol>、<table> 和 <select>，对于哪些元素可以出现在其内部是有严格限制的。⽽有些元素，诸如\\r\\n<li>、<tr> 和 <option>，只能出现在其它某些特定的元素内部。\\r\\n2. 事件名  - 全⼩写\\r\\n跟组件和 prop 不同，事件名不会被⽤作⼀个 JavaScript 变量名或属性名，所以就没有理由使⽤ camelCase 或 PascalCase 了。并且 v-on\\r\\n事件监听器在 DOM 模板中会被⾃动转换为全⼩写 (因为 HTML 是⼤⼩写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致\\r\\nmyEvent 不可能被监听到。\\r\\n3. .sync 修饰符\\r\\n  this.$emit(\'update:title\', newTitle)\\r\\n  <text-document\\r\\n    v-bind:title=\\\"doc.title\\\"\\r\\n    v-on:update:title=\\\"doc.title = $event\\\"\\r\\n  ></text-document>\\r\\n  // 简写\\r\\n  <text-document v-bind:title.sync=\\\"doc.title\\\"></text-document>\\r\\n4. 插槽  [⽗组件控制⼦组件页⾯内容显⽰ : js控制 (通过数据传递 ,控制权在⼦组件 ) html控制 (通过html传递 , 控\\r\\n制权在⽗组件 ,满⾜⽗组件的私有化 ,传⼊结构不确定，情况经常变化 )]\\r\\n⽗组件可以拿到⼦组件的数据,对数据处理后放⼊插槽\\r\\n作⽤域\\r\\n有的时候你希望提供的组件带有⼀个可从⼦组件获取数据的可复⽤的插槽\\r\\n\"}],\"totalPages\":1}', 4);
INSERT INTO `course_chapters` VALUES (22, 6, 'c语言文档编辑器的设计与实现', 1, 'DOCUMENT', 0, 'documents/1752219532719_c语言文档编辑器的设计与实现.txt', '00:10:00', 13467, '2025-07-11 15:38:52', '{\"pages\":[{\"page\":1,\"content\":\"#include<stdio.h>\\n#include<stdlib.h>\\n#include<malloc.h>\\n#include<string.h>\\n\\n#define N 10\\n#define S 200\\n#define MAXSIZE 1000\\nchar Buffer[MAXSIZE],Buffer2[MAXSIZE];      //Buffer[MAXSIZE]�洢��׼������ļ�,Buffer2[MAXSIZE]�洢ԭ�����ļ�����\\nFILE *fp;\\n\\nstruct Word\\n{\\n\\tint length;           //ÿ�����ʳ���\\n\\tint t;              //ÿ�����ʳ��ִ���\\n\\tchar str[N];\\n};\\ntypedef struct Word Word;\\n\\nchar* Sta(); \\nvoid Print(char *p);   //��׼���\\nint Luru(char *p1,Word *p2);         //¼��ṹ��\\nvoid Sum(Word *p,int n);    //ͳ�ƺ���\\nvoid Select(Word *p,int n);  //��ѯ����\\nvoid Chose(char *p);   //�滻����\\nvoid Sort(Word *p,int n);     //����\\nvoid Chouqu(Word *p,int n);\\nint Tongji(Word *p,char *q,int n);\\nint CountSubstr( const char * str1, const char * str2 );   //ͳ�Ƶ��ʳ��ֵĴ���\\n\\n\\n\\n                                                              \\nint main()\\n{ \\n \\n\\tint i,k,n;\\n\\tchar ch;\\n\\tWord p[200];\\n    char* file=(char*)malloc(sizeof(char)*MAXSIZE);\\n   \\n    printf(\\\"������Ҫ�򿪵��ļ���(��·��):\\\\n\\\"); \\n    gets(file);\\n    if(!(fp=fopen(file,\\\"r+\\\")))\\n\\t{\\n\\t\\tputs(\\\"���ļ�ʧ��!\\\\n\\\"); \\n\\t\\treturn 0;\\n\\t}\\n\\t\\n\\n\"},{\"page\":2,\"content\":\"\\n\\t\\n\\tfor(i=0;(ch=fgetc(fp))!=EOF;i++)\\n    \\tBuffer2[i]=ch;\\t\\n\\tBuffer2[i]=\'\\\\0\';\\n\\tprintf(\\\"ԭ�ļ�Ϊ��\\\\n\\\");\\n \\tfor(i=0;(ch=Buffer2[i])!=\'\\\\0\';i++)//��ʾ�����Ľ��\\n    \\tputchar(ch);\\n\\tSta();\\n\\tn=Luru(Buffer,p);\\n\\tfor(i=0;i<n;i++)\\n\\t    p[i].t=Tongji(p,p[i].str,n);\\n\\t\\n\\t\\n\\tdo\\n\\t{\\n\\t\\tprintf(\\\" \\\\n              �ı��ļ��������˵�\\\\n\\\");\\n\\t\\tprintf(\\\"********************************************************\\\\n\\\");\\n\\t\\tprintf(\\\"|           1.�ļ���׼������                          |\\\\n\\\");\\n\\t\\tprintf(\\\"|           2.ͳ�Ƴ����������ٵĵ��ʡ�                |\\\\n\\\");\\n\\t\\tprintf(\\\"|           3.����ĳ�����ʡ�                            |\\\\n\\\");\\n\\t\\tprintf(\\\"|           4.�滻ĳ�����ʡ�                            |\\\\n\\\");\\n\\t\\tprintf(\\\"|           5.��ȡ���ʲ�������                          |\\\\n\\\");\\n\\t\\tprintf(\\\"|           6.�����ʳ�������                          |\\\\n\\\");\\n\\t\\tprintf(\\\"********************************************************\\\\n\\\");\\n\\t\\tprintf(\\\"��ѡ����Ҫִ�еĲ���(1��6):\\\\n\\\");\\n\\t\\tscanf(\\\"%d\\\",&k);\\n\\t\\tswitch(k)\\n\\t\\t{\\n\\t\\tcase 1:Print(Buffer);    break;\\n\\t\\tcase 2:Sum(p,n);     break;\\n\\t\\tcase 3:Select(p,n);  break;\\n\\t\\tcase 4:Chose(Buffer);   break;\\n    \\tcase 5:Chouqu(p,n);  break;\\n\\t\\tcase 6: Sort(p,n);        break;\\n\\t\\tdefault:\\n\\t\\t\\tprintf(\\\"Error input!\\\");\\n\\t\\t}\\n\\t\\t\\n\\t}while(k<=6&&k>=1);\\n\\t\\n\\tfree(file);\\n\\tfclose(fp); //���ʵ���ĸ������¼��\\n\\tprintf(\\\"��ӭ�ٴν����ĵ��༭\\\\n\\\");\\n\\treturn 0;\\n}\\n\\n\\n\\nchar* Sta()\\n\"},{\"page\":3,\"content\":\"{\\n\\tint i=0,j=0;\\n\\tchar ch;\\n    \\n\\twhile(Buffer2[i]==\' \')\\ti++;\\n\\tif(i==0)\\n\\t{\\n\\t\\ti++;\\n\\t\\tBuffer[j++]=Buffer2[0];\\n\\t}\\n\\nlp:;                                    //goto  ���\\n\\twhile(Buffer2[i]==\' \')\\n\\t\\ti++;\\t\\t\\t\\n\\tBuffer2[i-1]=0;\\t\\t\\t\\t\\t\\t//����ǰ�ÿո���ܻ�����һ��\\n\\tfor(;(ch=Buffer2[i])!=\'\\\\0\';i++)\\n\\t\\tif(ch!=\' \')\\n\\t\\t{\\n\\t\\t\\tif(ch==\'\\\\n\')\\t\\t\\t\\t//������\'\\\\r\'\\n\\t\\t\\t{\\n\\t\\t\\t\\tBuffer[j++]=ch;\\n\\t\\t\\t\\ti++;\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tgoto lp;\\t\\t\\t\\t//ȥɾ��ǰ�ÿո�\\n\\t\\t\\t}\\n\\t\\t\\telse if(Buffer2[i-1]==\' \')\\t\\t//i>=1;\\n\\t\\t\\t\\tBuffer[j++]=\' \';\\t\\t\\t//û����ǰ�ÿո�ĸ��ţ����ʼ�ͱȽϺ�����һ���ո���\\n\\t\\t\\tBuffer[j++]=ch;\\n\\t\\t}\\n\\tBuffer[j]=\'\\\\0\';\\n\\treturn Buffer;\\n}\\n\\t\\n\\nvoid Print(char *p)\\n{\\n\\tint i;\\n\\tchar ch;\\n    FILE*fp4;\\n\\tfp4=fopen(\\\"Biaozhun.txt\\\",\\\"w\\\");\\n\\tif(!fp4)\\n\\t{\\n\\t\\tprintf(\\\"Can not create a file.\\\\n\\\");\\n\\t\\texit(0);\\n\\t}\\n\\tfor(i=0;(ch=p[i])!=\'\\\\0\';i++)             //��ʾ�����Ľ��\\n\\t    putchar(ch);\\n\\tprintf(\\\"\\\\n\\\");\\n    printf(\\\"��׼����������ѱ�����biaozhun.txt��\\\\n\\\");\\n\\tfprintf(fp4,\\\"%s\\\",p);\\n\\tfclose(fp4);\\n\"},{\"page\":4,\"content\":\"}\\n\\n\\n\\nvoid Select(Word *p,int n)\\n{                                  //�ַ������ִ������Һ���\\n\\tint t,count=0;\\n\\tchar str[50];\\n\\tprintf(\\\"��������Ҫ���ҵ��ַ�����\\\\n\\\");\\n\\tscanf(\\\"%s\\\",str);\\n\\tt=strlen(str);\\n\\tcount=Tongji(p,str,n);\\n\\tprintf(\\\"����%d��\\\\n\\\\n\\\",count);\\n}\\n\\n\\n\\n\\n\\n\\nvoid Chose(char *p)\\n{                                          //�滻�������滻������ļ�������Replace.txt��\\n\\tchar str[50],str2[50],SSH[500];\\n\\tint i,j,x=0,z,m,n,flag;\\n\\tFILE*fp3;\\n\\tfp3=fopen(\\\"Replace.txt\\\",\\\"w\\\");\\n\\tif(!fp3)\\n\\t{\\n\\t\\tprintf(\\\"Can not create a file.\\\\n\\\");\\n\\t\\texit(0);\\n\\t}\\n\\tprintf(\\\"��������Ҫ�滻���Ĵʣ�\\\\n\\\");\\n\\tscanf(\\\"%s\\\",str);\\n\\tprintf(\\\"�滻��ʲô?\\\\n\\\");\\n\\tscanf(\\\"%s\\\",str2);\\n\\tm=strlen(p);\\n\\tn=strlen(str);\\n\\tz=strlen(str2);\\n\\tif(m==0||n==0||n>m)\\t\\t\\t\\n\\t{\\n\\t\\tprintf(\\\"Can not find.\\\\n\\\");\\n\\t\\treturn ;\\n\\t}\\n\\tfor(i=0;i<=(m-n);i++)\\n\\t{\\n\\t\\tflag=1;\\n\\t\\tfor(j=0;j<n;j++)\\n\\t\\t{\\n\\t\\t\\tif(p[i+j]!=str[j])\\n\\t\\t\\t{\\t\\n\"},{\"page\":5,\"content\":\"\\t\\t\\t\\tflag=0;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(flag==1)\\n\\t\\t{\\n\\t\\t\\tfor(j=0;j<z;j++)\\n\\t\\t\\t\\tSSH[x++]=str2[j];\\n\\t\\t\\ti+=n-1;\\t\\t\\t\\n\\t\\t}\\n\\t\\telse \\n\\t\\t\\tSSH[x++]=p[i];\\n\\t}\\n\\tfor(;i<m+1;i++)\\t\\t\\t\\t\\t//ɨβ������\'\\\\0\'\\n\\t\\tSSH[x++]=p[i];\\n\\tprintf(\\\"�滻�������Ϊ��\\\\n%s \\\\n �������ѱ�����Replace.txt��\\\\n\\\",SSH);\\n\\tfprintf(fp3,\\\"%s\\\",SSH);\\n\\tfclose(fp3);\\n\\treturn ;\\n}\\n\\n\\n\\n\\n\\n\\n\\nvoid Sum(Word *p,int n)\\n{\\n\\tint i=0,j,max,min;\\n\\tchar *q1,*q2;\\n\\tmax=min=p[0].t;\\n\\tq1=q2=p[0].str;\\n\\tfor(i=1;i<n;i++)\\n\\t{\\n\\t\\tif(max<p[i].t)\\n\\t\\t{\\n\\t\\t\\tmax=p[i].t;\\n\\t\\t\\tq1=p[i].str;\\n\\t\\t}\\n\\n\\t\\tif(min>p[i].t)\\n\\t\\t{\\n\\t\\t\\tmin=p[i].t;\\n\\t\\t\\tq2=p[i].str;\\n\\t\\t}\\n\\t}\\n\\tif(max==1)\\n\\t\\tprintf(\\\"��ֻ����һ��!\\\\n\\\");\\n\\telse\\n\"},{\"page\":6,\"content\":\"\\t{\\n\\t    if(min=1)\\n\\t\\t{\\n\\t    \\tfor(j=0;j<n;j++)\\n\\t\\t    \\tif(p[j].t==1)\\n                    printf(\\\"�������ٵĵ���: %s������%d��.\\\\n\\\",p[j].str,min);\\n\\t\\t}\\n\\t        \\tprintf(\\\"�������ĵ���: %s������%d��.\\\\n\\\",q1,max);\\n\\t}\\n    \\n}\\n\\n\\n\\n\\n\\n\\n\\nint Luru(char *p1,Word *p2)\\n{\\n\\tint i=0,j=0,m;\\n\\tfor(m=0;p1[m]!=\'\\\\0\';m++)\\n        if(p1[m]<=\'z\'&&p1[m]>=\'a\'||p1[m]<=\'Z\'&&p1[m]>=\'A\')\\n\\t\\t{\\n\\t\\t\\tif(p1[m]>=\'A\'&&p1[m]<=\'Z\')\\n\\t\\t\\t\\tp2[i].str[j++]=p1[m];\\n\\t\\t\\telse\\n\\t\\t\\t    p2[i].str[j++]=p1[m];\\n\\t\\t\\tp2[i].length=j;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tif(p1[m]==\' \'||p1[m]==\',\'||p1[m]==\'.\'||p1[m]==\'\\\\n\')\\n\\t\\t\\t{\\n\\t\\t       p2[i].str[j]=\'\\\\0\';\\n\\t\\t\\t   i++;\\n\\t\\t       j=0;\\n\\t\\t\\t}\\n\\n\\tif(p1[m]==\'\\\\0\')\\n\\t\\tp2[i].str[j]=p1[m];\\n\\t\\treturn i+1; \\n}\\n\\n\\n\\n\\n\\n\\n\\nvoid Sort(Word* p,int n)       \\n\"},{\"page\":7,\"content\":\"{\\n\\tint i,j,min;\\n\\tWord temp;                 \\n\\tfor(i=0;i<n-1;i++)         \\n\\t{\\n\\t\\tmin=i;                 \\n\\t\\tfor(j=i+1;j<n;j++)\\n\\t\\t\\tif(p[j].length<p[min].length)   \\n\\t\\t\\t\\tmin=j;\\n\\t\\t\\tif(min!=i)\\n\\t\\t\\t{\\n\\t\\t\\t\\ttemp=p[i];\\n\\t\\t\\t\\tp[i]=p[min];\\n\\t\\t\\t\\tp[min]=temp;\\n\\t\\t\\t}\\n\\t}\\n\\tfor(i=0;i<n;i++)\\n\\t\\tprintf(\\\"%s \\\",p[i].str);\\n}\\n\\n\\n\\n\\n\\n\\nint CountSubstr( const char * str1, const char * str2 ) \\n{ \\n\\tchar *cp;\\n\\tchar *s1, *s2;\\n    int count = 0; \\n\\tif ( !*str2 ) \\n\\t\\treturn 0; \\n\\tcp=(char*)str1; \\n \\n\\t\\n\\twhile ( *cp ) \\n\\t{ \\n\\t\\ts1 = cp; \\n\\t\\ts2 = ( char * ) str2; \\n\\t\\t\\n\\t\\twhile ( *s1&& *s2&& !(*s1-*s2)) \\n\\t\\t\\t++s1, ++s2; \\n\\t\\t\\n\\t\\tif ( !*s2 ) \\n\\t\\t\\t++count; \\n\\t\\t++cp; \\n\\t} \\n\\treturn count; \\n}\\n\\n\"},{\"page\":8,\"content\":\"\\n\\nvoid Chouqu(Word *p,int n)\\n{\\n\\tint i,j=0;\\n\\tFILE *fp5=fopen(\\\"Chouqu.txt\\\",\\\"w\\\");\\n\\tif(fp5==NULL)\\n\\t{\\n\\t\\tprintf(\\\"Can not open file!\\\");\\n\\t\\texit(0);\\n\\t}\\n\\tfor(i=0;i<n;i++)\\n\\t   if(p[i].t==1)\\n\\t   {\\n\\t\\t   fputs(p[i].str,fp5); \\n\\t\\t   fputc(\' \',fp5);\\n\\t   }\\n\\t   else\\n\\t   {\\n\\t        for(j=0,p[i].t=0;j<i;j++)\\n\\t\\t        p[i].t+=CountSubstr(p[j].str,p[i].str);\\n\\t\\t   \\n\\t\\t     if(!p[i].t)\\n\\t\\t\\t {\\n                fputs(p[i].str,fp5);\\n\\t\\t\\t\\tfputc(\' \',fp5);\\n\\t\\t\\t }\\n\\t   }\\n\\n\\n\\tfclose(fp5);\\n\\tprintf(\\\"�ļ�����chouqu.txt��!\\\\n\\\");\\n}\\n\\n\\n\\n\\n\\nint Tongji(Word *p,char *q,int n)\\n{\\n\\tint i,m,t,count=0;\\n\\tt=strlen(q);\\n\\tfor(i=0;i<n;i++)\\n\\t{\\n\\t\\tif(t==p[i].length)\\n\\t\\t{\\n\\t\\t\\tfor(m=0;m<t;m++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(p[i].str[m]==q[m])\\n\\t\\t\\t\\t\\tcontinue;\\n\"},{\"page\":9,\"content\":\"\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif(m==t)\\n\\t\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\treturn count;\\n}\\n\"}],\"totalPages\":9}', 4);
INSERT INTO `course_chapters` VALUES (23, 6, '单片机常用的14个C语言算法', 2, 'DOCUMENT', 0, 'documents/1752219553083_单片机常用的14个c语言算法.docx', '00:10:00', 13467, '2025-07-11 15:39:12', '{\"pages\":[{\"page\":1,\"content\":\"引言概述：\\n在单片机的开发中，C语言是最常用的编程语言之一。掌握一些常用的C语言算法对于单片机的开发非常重要。本文将介绍单片机常用的14个C语言算法之二，包括排序算法、查找算法、递归算法、动态规划算法和图算法。\\n正文内容：\\n一、排序算法\\n1. 冒泡排序：通过不断地交换相邻元素的位置，将大的元素冒泡到数组的末尾。\\n2. 快速排序：通过选择一个基准元素，将小于基准元素的数移动到基准元素左边，将大于基准元素的数移动到基准元素右边，然后分别对左右两部分递归地进行快速排序。\\n3. 插入排序：将数组分为已排序和未排序两部分，每次从未排序部分取一个元素，将其插入已排序部分的合适位置。\\n4. 选择排序：每次从未排序部分选择最小的元素，将其放在已排序部分的末尾。\\n5. 归并排序：将数组不断划分为更小的子数组，然后将子数组合并为有序数组。\\n二、查找算法\\n\"},{\"page\":2,\"content\":\"1. 顺序查找：逐个比较数组中的元素，直到找到目标元素或者遍历完整个数组。\\n2. 二分查找：对于已排序的数组，通过不断将目标值与中间元素比较，并缩小搜索范围，最终找到目标元素的位置。\\n3. 插值查找：与二分查找类似，不同之处在于确定中间元素的位置时使用插值公式，使得查找范围更接近目标元素。\\n4. 哈希查找：使用哈希函数将关键字映射到一个唯一的哈希值，通过查找哈希值对应的位置来获取关键字。\\n5. 递归查找：通过递归地划分问题的规模，从而减小查找范围，最终找到目标元素。\\n三、递归算法\\n1. 递归定义：在函数的定义中使用函数本身的方式称为递归。\\n2. 递归函数的特点：包含一个递归结束的条件和一个递归调用的表达式。\\n3. 递归算法的实现：通过不断把原问题转化为更小规模的子问题，直到满足递归结束的条件。\\n4. 递归算法的应用：在树、图等数据结构的遍历、搜索等问题中，递归算法被广泛使用。\\n\"},{\"page\":3,\"content\":\"5. 递归算法的优化：如尾递归优化、记忆化搜索等方法可以避免递归算法中的重复计算。\\n四、动态规划算法\\n1. 动态规划的思想：将一个问题划分为多个子问题，并保存每个子问题的解，避免重复计算。\\n2. 动态规划算法的步骤：确定状态转移方程、定义初始状态、根据状态转移方程逐步求解最终状态。\\n3. 动态规划的应用场景：解决最优化问题、计数问题、路径问题等。\\n4. 背包问题：一个背包有一定的容量，现有一些物品，每个物品的重量和价值各不相同，问如何选择物品放入背包使得总价值最大。\\n5. 最长公共子序列问题：给定两个序列，求它们的最长公共子序列的长度。\\n五、图算法\\n1. 图的表示方法：邻接矩阵和邻接表。\\n2. 图的深度优先遍历：通过递归或者栈的方式依次访问图的每个节点，并标记已访问过的节点。\\n\"},{\"page\":4,\"content\":\"3. 图的广度优先遍历：通过队列的方式按层级依次访问图的每个节点，并标记已访问过的节点。\\n4. 最短路径算法：Dijkstra算法和Floyd-Warshall算法，用于解决图中两个节点之间的最短路径问题。\\n5. 最小生成树算法：Prim算法和Kruskal算法，用于求解图的最小生成树问题。\\n总结：\\n本文介绍了单片机常用的14个C语言算法，包括排序算法、查找算法、递归算法、动态规划算法和图算法。这些算法在单片机的开发过程中非常实用，为程序员提供了解决各类问题的工具和思路。熟练掌握这些算法，可以提高单片机代码的效率和可靠性，使开发工作更加高效。希望本文对读者能够有所帮助，引导他们在单片机开发中使用C语言算法解决问题。\\n\"}],\"totalPages\":4}', 4);
INSERT INTO `course_chapters` VALUES (24, 7, '算法与数据结构', 1, 'DOCUMENT', 0, 'documents/1752219610660_(完整word版)java知识总结完整版-推荐文档.doc', '00:10:00', 13467, '2025-07-11 15:40:10', '{\"pages\":[],\"totalPages\":0}', 4);
INSERT INTO `course_chapters` VALUES (25, 7, '冒泡排序', 2, 'DOCUMENT', 0, 'documents/1752219679904_全部接口.md', '00:10:00', 13467, '2025-07-11 15:41:19', '{\"pages\":[{\"page\":1,\"content\":\"# 在线教育系统-全部接口文档\\n\\n\\n**简介**:在线教育系统-全部接口文档\\n\\n\\n**HOST**:localhost:8088\\n\\n\\n**联系人**:\\n\\n\\n**Version**:1.0\\n\\n\\n**接口路径**:/v2/api-docs?group=全部接口\\n\\n\\n[TOC]\\n\\n\\n\\n\\n\\n\\n# video-controller\\n\\n\\n## 获取视频临时播放地址\\n\\n\\n**接口地址**:`/api/video/play`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n\"},{\"page\":2,\"content\":\"| -------- | -------- | ----- | -------- | -------- | ------ |\\n|chapterId|chapterId|query|true|integer(int32)||\\n|userId|userId|query|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 创建课程课程\\n\\n\\n## 更新章节\\n\\n\\n**接口地址**:`/course/chapter`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\"},{\"page\":3,\"content\":\"\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"chapterId\\\": 0,\\n  \\\"chapterName\\\": \\\"\\\",\\n  \\\"contentType\\\": \\\"\\\",\\n  \\\"courseId\\\": 0,\\n  \\\"isFree\\\": 0,\\n  \\\"orderNum\\\": 0,\\n  \\\"videoDuration\\\": \\\"\\\",\\n  \\\"videoSize\\\": 0,\\n  \\\"videoUrl\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|updateChapterDTO|updateChapterDTO|body|true|UpdateChapterDTO|UpdateChapterDTO|\\n|&emsp;&emsp;chapterId|||false|integer(int32)||\\n|&emsp;&emsp;chapterName|||false|string||\\n|&emsp;&emsp;contentType|||false|string||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n|&emsp;&emsp;isFree|||false|integer(int32)||\\n|&emsp;&emsp;orderNum|||false|integer(int32)||\\n|&emsp;&emsp;videoDuration|||false|string||\\n|&emsp;&emsp;videoSize|||false|integer(int64)||\\n|&emsp;&emsp;videoUrl|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n\"},{\"page\":4,\"content\":\"|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取章节详情\\n\\n\\n**接口地址**:`/course/chapter/{chapterId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|chapterId|chapterId|path|true|integer(int32)||\\n\\n\\n\"},{\"page\":5,\"content\":\"**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ChapterVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ChapterVO|ChapterVO|\\n|&emsp;&emsp;chapterId||integer(int32)||\\n|&emsp;&emsp;chapterName||string||\\n|&emsp;&emsp;contentType||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;isFree||integer(int32)||\\n|&emsp;&emsp;orderNum||integer(int32)||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;videoDuration||string||\\n|&emsp;&emsp;videoSize||integer(int64)||\\n|&emsp;&emsp;videoUrl||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"chapterId\\\": 0,\\n\\t\\t\\\"chapterName\\\": \\\"\\\",\\n\\t\\t\\\"contentType\\\": \\\"\\\",\\n\"},{\"page\":6,\"content\":\"\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"isFree\\\": 0,\\n\\t\\t\\\"orderNum\\\": 0,\\n\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\\"videoDuration\\\": \\\"\\\",\\n\\t\\t\\\"videoSize\\\": 0,\\n\\t\\t\\\"videoUrl\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除章节\\n\\n\\n**接口地址**:`/course/chapter/{chapterId}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|chapterId|chapterId|path|true|integer(int32)||\\n\\n\"},{\"page\":7,\"content\":\"\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 创建课程\\n\\n\\n**接口地址**:`/course/create`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n\"},{\"page\":8,\"content\":\"**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryId\\\": 0,\\n  \\\"courseDesc\\\": \\\"\\\",\\n  \\\"courseName\\\": \\\"\\\",\\n  \\\"courseTags\\\": [],\\n  \\\"coverImage\\\": \\\"\\\",\\n  \\\"originalPrice\\\": 0,\\n  \\\"price\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|createCourseDTO|createCourseDTO|body|true|CreateCourseDTO|CreateCourseDTO|\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;courseDesc|||false|string||\\n|&emsp;&emsp;courseName|||false|string||\\n|&emsp;&emsp;courseTags|||false|array|string|\\n|&emsp;&emsp;coverImage|||false|string||\\n|&emsp;&emsp;originalPrice|||false|number(double)||\\n|&emsp;&emsp;price|||false|number(double)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«CreateCourseVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||CreateCourseVO|CreateCourseVO|\\n\"},{\"page\":9,\"content\":\"|&emsp;&emsp;auditStatues||string||\\n|&emsp;&emsp;categoryId||integer(int64)||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;courseTags||array|string|\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n|&emsp;&emsp;price||number(double)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"auditStatues\\\": \\\"\\\",\\n\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"courseTags\\\": [],\\n\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\\"price\\\": 0\\n\\t},\\n\"},{\"page\":10,\"content\":\"\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 创建章节\\n\\n\\n**接口地址**:`/course/create/chapter`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"chapterName\\\": \\\"\\\",\\n  \\\"contentType\\\": \\\"\\\",\\n  \\\"courseId\\\": 0,\\n  \\\"isFree\\\": 0,\\n  \\\"orderNum\\\": 0,\\n  \\\"videoDuration\\\": \\\"\\\",\\n  \\\"videoSize\\\": 0,\\n  \\\"videoUrl\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|createChapterDTO|createChapterDTO|body|true|CreateChapterDTO|CreateChapterDTO|\\n|&emsp;&emsp;chapterName|||false|string||\\n|&emsp;&emsp;contentType|||false|string||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n|&emsp;&emsp;isFree|||false|integer(int32)||\\n\"},{\"page\":11,\"content\":\"|&emsp;&emsp;orderNum|||false|integer(int32)||\\n|&emsp;&emsp;videoDuration|||false|string||\\n|&emsp;&emsp;videoSize|||false|integer(int64)||\\n|&emsp;&emsp;videoUrl|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«CreateChapterVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||CreateChapterVO|CreateChapterVO|\\n|&emsp;&emsp;chapterId||integer(int32)||\\n|&emsp;&emsp;chapterName||string||\\n|&emsp;&emsp;contentType||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;isFree||integer(int32)||\\n|&emsp;&emsp;orderNum||integer(int32)||\\n|&emsp;&emsp;videoDuration||string||\\n|&emsp;&emsp;videoSize||integer(int64)||\\n|&emsp;&emsp;videoUrl||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n\"},{\"page\":12,\"content\":\"{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"chapterId\\\": 0,\\n\\t\\t\\\"chapterName\\\": \\\"\\\",\\n\\t\\t\\\"contentType\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"isFree\\\": 0,\\n\\t\\t\\\"orderNum\\\": 0,\\n\\t\\t\\\"videoDuration\\\": \\\"\\\",\\n\\t\\t\\\"videoSize\\\": 0,\\n\\t\\t\\\"videoUrl\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取课程详情\\n\\n\\n**接口地址**:`/course/detail/{courseId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\"},{\"page\":13,\"content\":\"\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«DetailCourseVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||DetailCourseVO|DetailCourseVO|\\n|&emsp;&emsp;auditMessage||string||\\n|&emsp;&emsp;auditStatus||string||\\n|&emsp;&emsp;categoryId||integer(int32)||\\n|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;chapteList||array|Chapter|\\n|&emsp;&emsp;&emsp;&emsp;chapterId||integer||\\n|&emsp;&emsp;&emsp;&emsp;chapterName||string||\\n|&emsp;&emsp;&emsp;&emsp;contentType||string||\\n|&emsp;&emsp;&emsp;&emsp;courseId||integer||\\n|&emsp;&emsp;&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;docJson||string||\\n|&emsp;&emsp;&emsp;&emsp;isFree||integer||\\n|&emsp;&emsp;&emsp;&emsp;orderNum||integer||\\n|&emsp;&emsp;&emsp;&emsp;teacherId||integer||\\n|&emsp;&emsp;&emsp;&emsp;videoDuration||string||\\n|&emsp;&emsp;&emsp;&emsp;videoSize||integer||\\n\"},{\"page\":14,\"content\":\"|&emsp;&emsp;&emsp;&emsp;videoUrl||string||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;courseTags||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n|&emsp;&emsp;price||number(double)||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;studentCount||integer(int32)||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"auditMessage\\\": \\\"\\\",\\n\\t\\t\\\"auditStatus\\\": \\\"\\\",\\n\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\\"chapteList\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"chapterId\\\": 0,\\n\\t\\t\\t\\t\\\"chapterName\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"contentType\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\"},{\"page\":15,\"content\":\"\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"docJson\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"isFree\\\": 0,\\n\\t\\t\\t\\t\\\"orderNum\\\": 0,\\n\\t\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\t\\\"videoDuration\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"videoSize\\\": 0,\\n\\t\\t\\t\\t\\\"videoUrl\\\": \\\"\\\"\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"courseTags\\\": \\\"\\\",\\n\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\\"price\\\": 0,\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"studentCount\\\": 0,\\n\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取我的课程\\n\\n\\n**接口地址**:`/course/teacher/all`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n\"},{\"page\":16,\"content\":\"**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryId\\\": 0,\\n  \\\"keyword\\\": \\\"\\\",\\n  \\\"page\\\": 0,\\n  \\\"pageSize\\\": 0,\\n  \\\"teacherId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|pageQueryDTO|pageQueryDTO|body|true|PageQueryDTO|PageQueryDTO|\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;keyword|||false|string||\\n|&emsp;&emsp;page|||false|integer(int32)||\\n|&emsp;&emsp;pageSize|||false|integer(int32)||\\n|&emsp;&emsp;teacherId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\"},{\"page\":17,\"content\":\"\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取我的考试课程\\n\\n\\n**接口地址**:`/course/teacher/test`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryId\\\": 0,\\n  \\\"keyword\\\": \\\"\\\",\\n\"},{\"page\":18,\"content\":\"  \\\"page\\\": 0,\\n  \\\"pageSize\\\": 0,\\n  \\\"teacherId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|pageQueryDTO|pageQueryDTO|body|true|PageQueryDTO|PageQueryDTO|\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;keyword|||false|string||\\n|&emsp;&emsp;page|||false|integer(int32)||\\n|&emsp;&emsp;pageSize|||false|integer(int32)||\\n|&emsp;&emsp;teacherId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\"},{\"page\":19,\"content\":\"\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 更新课程\\n\\n\\n**接口地址**:`/course/update`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"auditStatus\\\": \\\"\\\",\\n  \\\"categoryId\\\": 0,\\n  \\\"courseDesc\\\": \\\"\\\",\\n  \\\"courseId\\\": 0,\\n  \\\"courseName\\\": \\\"\\\",\\n  \\\"courseTags\\\": [],\\n  \\\"coverImage\\\": \\\"\\\",\\n  \\\"originalPrice\\\": 0,\\n  \\\"price\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n\"},{\"page\":20,\"content\":\"|updateCourseDTO|updateCourseDTO|body|true|UpdateCourseDTO|UpdateCourseDTO|\\n|&emsp;&emsp;auditStatus|||false|string||\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;courseDesc|||false|string||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n|&emsp;&emsp;courseName|||false|string||\\n|&emsp;&emsp;courseTags|||false|array|string|\\n|&emsp;&emsp;coverImage|||false|string||\\n|&emsp;&emsp;originalPrice|||false|number(double)||\\n|&emsp;&emsp;price|||false|number(double)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«UpdateCourseVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||UpdateCourseVO|UpdateCourseVO|\\n|&emsp;&emsp;auditStatus||string||\\n|&emsp;&emsp;categoryId||integer(int64)||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;courseTags||array|string|\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n\"},{\"page\":21,\"content\":\"|&emsp;&emsp;price||number(double)||\\n|&emsp;&emsp;updateMessage||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"auditStatus\\\": \\\"\\\",\\n\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"courseTags\\\": [],\\n\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\\"price\\\": 0,\\n\\t\\t\\\"updateMessage\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除课程\\n\\n\\n**接口地址**:`/course/{courseId}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n\"},{\"page\":22,\"content\":\"**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取课程章节列表\\n\\n\\n**接口地址**:`/course/{courseId}/chapters`\\n\\n\"},{\"page\":23,\"content\":\"\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ChapterVO»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ChapterVO|\\n|&emsp;&emsp;chapterId||integer(int32)||\\n|&emsp;&emsp;chapterName||string||\\n|&emsp;&emsp;contentType||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n\"},{\"page\":24,\"content\":\"|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;isFree||integer(int32)||\\n|&emsp;&emsp;orderNum||integer(int32)||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;videoDuration||string||\\n|&emsp;&emsp;videoSize||integer(int64)||\\n|&emsp;&emsp;videoUrl||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"chapterId\\\": 0,\\n\\t\\t\\t\\\"chapterName\\\": \\\"\\\",\\n\\t\\t\\t\\\"contentType\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"isFree\\\": 0,\\n\\t\\t\\t\\\"orderNum\\\": 0,\\n\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\\"videoDuration\\\": \\\"\\\",\\n\\t\\t\\t\\\"videoSize\\\": 0,\\n\\t\\t\\t\\\"videoUrl\\\": \\\"\\\"\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 学生课程管理\\n\\n\"},{\"page\":25,\"content\":\"\\n## 添加课程到购物车\\n\\n\\n**接口地址**:`/student/course/add-to-cart`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"courseId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|addToCartDTO|addToCartDTO|body|true|AddToCartDTO|AddToCartDTO|\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n\"},{\"page\":26,\"content\":\"**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 直接购买课程\\n\\n\\n**接口地址**:`/student/course/buy`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"courseId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\"},{\"page\":27,\"content\":\"\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|addToCartDTO|addToCartDTO|body|true|AddToCartDTO|AddToCartDTO|\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 检查是否已购买课程\\n\\n\\n**接口地址**:`/student/course/check-purchased/{courseId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\"},{\"page\":28,\"content\":\"\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«boolean»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||boolean||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": true,\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取我的课程\\n\\n\\n**接口地址**:`/student/course/my-courses`\\n\"},{\"page\":29,\"content\":\"\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n\"},{\"page\":30,\"content\":\"**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 导航菜单管理\\n\\n\\n## 获取导航菜单\\n\\n\\n**接口地址**:`/system/nav-menu`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userType|userType|query|false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|UserNavMenu|\\n|401|Unauthorized||\\n\"},{\"page\":31,\"content\":\"|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|id||integer(int32)|integer(int32)|\\n|menuName||string||\\n|menuOrder||integer(int32)|integer(int32)|\\n|menuPath||string||\\n|userType||string||\\n\\n\\n**响应示例**:\\n```javascript\\n[\\n\\t{\\n\\t\\t\\\"id\\\": 0,\\n\\t\\t\\\"menuName\\\": \\\"\\\",\\n\\t\\t\\\"menuOrder\\\": 0,\\n\\t\\t\\\"menuPath\\\": \\\"\\\",\\n\\t\\t\\\"userType\\\": \\\"\\\"\\n\\t}\\n]\\n```\\n\\n\\n## 清除指定用户类型的导航菜单缓存\\n\\n\\n**接口地址**:`/system/nav-menu/cache`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\"},{\"page\":32,\"content\":\"\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userType|userType|query|true|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK||\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n暂无\\n\\n\\n**响应示例**:\\n```javascript\\n\\n```\\n\\n\\n## 清除所有导航菜单缓存\\n\\n\\n**接口地址**:`/system/nav-menu/cache/all`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n\"},{\"page\":33,\"content\":\"暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK||\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n暂无\\n\\n\\n**响应示例**:\\n```javascript\\n\\n```\\n\\n\\n# 我的课程相关接口\\n\\n\\n## 获取我的课程列表\\n\\n\\n**接口地址**:`/user/my-courses/list`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n\"},{\"page\":34,\"content\":\"```javascript\\n{\\n  \\\"categoryId\\\": 0,\\n  \\\"keyword\\\": \\\"\\\",\\n  \\\"page\\\": 0,\\n  \\\"pageSize\\\": 0,\\n  \\\"teacherId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|pageQueryDTO|pageQueryDTO|body|true|PageQueryDTO|PageQueryDTO|\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;keyword|||false|string||\\n|&emsp;&emsp;page|||false|integer(int32)||\\n|&emsp;&emsp;pageSize|||false|integer(int32)||\\n|&emsp;&emsp;teacherId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n\"},{\"page\":35,\"content\":\"```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取我的所有课程（不分页）\\n\\n\\n**接口地址**:`/user/my-courses/list/all`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«MyCourseVO»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\"},{\"page\":36,\"content\":\"\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|MyCourseVO|\\n|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;completedChapters||integer(int32)||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;lastStudyTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;progress||integer(int32)||\\n|&emsp;&emsp;status||string||\\n|&emsp;&emsp;studyTime||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|&emsp;&emsp;totalChapters||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\t\\\"completedChapters\\\": 0,\\n\\t\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\t\\\"lastStudyTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\"},{\"page\":37,\"content\":\"\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"progress\\\": 0,\\n\\t\\t\\t\\\"status\\\": \\\"\\\",\\n\\t\\t\\t\\\"studyTime\\\": 0,\\n\\t\\t\\t\\\"teacherName\\\": \\\"\\\",\\n\\t\\t\\t\\\"totalChapters\\\": 0\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取学习统计信息\\n\\n\\n**接口地址**:`/user/my-courses/stats`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«MyCoursesStatsVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\"},{\"page\":38,\"content\":\"\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||MyCoursesStatsVO|MyCoursesStatsVO|\\n|&emsp;&emsp;completedCourses||integer(int32)||\\n|&emsp;&emsp;totalChapters||integer(int32)||\\n|&emsp;&emsp;totalCourses||integer(int32)||\\n|&emsp;&emsp;totalStudyTime||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"completedCourses\\\": 0,\\n\\t\\t\\\"totalChapters\\\": 0,\\n\\t\\t\\\"totalCourses\\\": 0,\\n\\t\\t\\\"totalStudyTime\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 收藏和查看收藏\\n\\n\\n## 获取收藏课程\\n\\n\\n**接口地址**:`/user/favorite/list`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\"},{\"page\":39,\"content\":\"\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryId\\\": 0,\\n  \\\"keyword\\\": \\\"\\\",\\n  \\\"page\\\": 0,\\n  \\\"pageSize\\\": 0,\\n  \\\"teacherId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|pageQueryDTO|pageQueryDTO|body|true|PageQueryDTO|PageQueryDTO|\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;keyword|||false|string||\\n|&emsp;&emsp;page|||false|integer(int32)||\\n|&emsp;&emsp;pageSize|||false|integer(int32)||\\n|&emsp;&emsp;teacherId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n\"},{\"page\":40,\"content\":\"|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 收藏课程\\n\\n\\n**接口地址**:`/user/favorite/{courseId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|401|Unauthorized||\\n\"},{\"page\":41,\"content\":\"|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 收藏课程状态\\n\\n\\n**接口地址**:`/user/favorite/{courseId}/{userId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n|userId|userId|path|true|integer(int32)||\\n\\n\"},{\"page\":42,\"content\":\"\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 浏览课程\\n\\n\\n## 浏览课程列表（分页）\\n\\n\\n**接口地址**:`/course/scan`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n\"},{\"page\":43,\"content\":\"**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n\"},{\"page\":44,\"content\":\"```\\n\\n\\n## 浏览课程详情\\n\\n\\n**接口地址**:`/course/scan/{id}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«CourseScanDetailVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||CourseScanDetailVO|CourseScanDetailVO|\\n|&emsp;&emsp;auditMessage||string||\\n|&emsp;&emsp;auditStatus||string||\\n|&emsp;&emsp;categoryId||integer(int32)||\\n\"},{\"page\":45,\"content\":\"|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;chapteList||array|ChapterPreviewVO|\\n|&emsp;&emsp;&emsp;&emsp;chapterId||integer||\\n|&emsp;&emsp;&emsp;&emsp;chapterName||string||\\n|&emsp;&emsp;&emsp;&emsp;contentType||string||\\n|&emsp;&emsp;&emsp;&emsp;courseId||integer||\\n|&emsp;&emsp;&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;isFree||integer||\\n|&emsp;&emsp;&emsp;&emsp;orderNum||integer||\\n|&emsp;&emsp;&emsp;&emsp;teacherId||integer||\\n|&emsp;&emsp;&emsp;&emsp;videoDuration||string||\\n|&emsp;&emsp;&emsp;&emsp;videoSize||integer||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;courseTags||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n|&emsp;&emsp;price||number(double)||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;studentCount||integer(int32)||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\"},{\"page\":46,\"content\":\"\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"auditMessage\\\": \\\"\\\",\\n\\t\\t\\\"auditStatus\\\": \\\"\\\",\\n\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\\"chapteList\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"chapterId\\\": 0,\\n\\t\\t\\t\\t\\\"chapterName\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"contentType\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"isFree\\\": 0,\\n\\t\\t\\t\\t\\\"orderNum\\\": 0,\\n\\t\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\t\\\"videoDuration\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"videoSize\\\": 0\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"courseTags\\\": \\\"\\\",\\n\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\\"price\\\": 0,\\n\"},{\"page\":47,\"content\":\"\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"studentCount\\\": 0,\\n\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 用户相关接口\\n\\n\\n## 获取用户信息\\n\\n\\n**接口地址**:`/user/getUserInfo`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«User»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\"},{\"page\":48,\"content\":\"\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||UserRes|UserRes|\\n|&emsp;&emsp;avatar||string||\\n|&emsp;&emsp;bio||string||\\n|&emsp;&emsp;email||string||\\n|&emsp;&emsp;name||string||\\n|&emsp;&emsp;passWord||string||\\n|&emsp;&emsp;phone||string||\\n|&emsp;&emsp;registerTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;sex||integer(int32)||\\n|&emsp;&emsp;userId||integer(int32)||\\n|&emsp;&emsp;userName||string||\\n|&emsp;&emsp;userType||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\\"bio\\\": \\\"\\\",\\n\\t\\t\\\"email\\\": \\\"\\\",\\n\\t\\t\\\"name\\\": \\\"\\\",\\n\\t\\t\\\"passWord\\\": \\\"\\\",\\n\\t\\t\\\"phone\\\": \\\"\\\",\\n\\t\\t\\\"registerTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\"},{\"page\":49,\"content\":\"\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"sex\\\": 0,\\n\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\\"userName\\\": \\\"\\\",\\n\\t\\t\\\"userType\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 用户登录\\n\\n\\n**接口地址**:`/user/login`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"passWord\\\": \\\"\\\",\\n  \\\"userName\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userLoginDTO|userLoginDTO|body|true|UserLoginDTO|UserLoginDTO|\\n|&emsp;&emsp;passWord|||false|string||\\n|&emsp;&emsp;userName|||false|string||\\n\\n\"},{\"page\":50,\"content\":\"\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«UserLoginVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||UserLoginVO|UserLoginVO|\\n|&emsp;&emsp;avatar||string||\\n|&emsp;&emsp;bio||string||\\n|&emsp;&emsp;name||string||\\n|&emsp;&emsp;refreshToken||string||\\n|&emsp;&emsp;sex||string||\\n|&emsp;&emsp;token||string||\\n|&emsp;&emsp;userId||integer(int32)||\\n|&emsp;&emsp;userName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\\"bio\\\": \\\"\\\",\\n\\t\\t\\\"name\\\": \\\"\\\",\\n\\t\\t\\\"refreshToken\\\": \\\"\\\",\\n\\t\\t\\\"sex\\\": \\\"\\\",\\n\\t\\t\\\"token\\\": \\\"\\\",\\n\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\\"userName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n\"},{\"page\":51,\"content\":\"## 登出\\n\\n\\n**接口地址**:`/user/logout`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\"},{\"page\":52,\"content\":\"\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 根据用户ID获取用户名\\n\\n\\n**接口地址**:`/user/name/{userId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userId|userId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n\"},{\"page\":53,\"content\":\"|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 刷新accessToken\\n\\n\\n**接口地址**:`/user/refreshToken`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|map|map|body|true|||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«Map«string,string»»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\"},{\"page\":54,\"content\":\"\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 用户注册\\n\\n\\n**接口地址**:`/user/register`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"bio\\\": \\\"\\\",\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"passWord\\\": \\\"\\\",\\n  \\\"phone\\\": \\\"\\\",\\n  \\\"sex\\\": 0,\\n\"},{\"page\":55,\"content\":\"  \\\"userName\\\": \\\"\\\",\\n  \\\"userType\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userRegisterDTO|userRegisterDTO|body|true|UserRegisterDTO|UserRegisterDTO|\\n|&emsp;&emsp;bio|||false|string||\\n|&emsp;&emsp;email|||false|string||\\n|&emsp;&emsp;name|||false|string||\\n|&emsp;&emsp;passWord|||false|string||\\n|&emsp;&emsp;phone|||false|string||\\n|&emsp;&emsp;sex|||false|integer(int32)||\\n|&emsp;&emsp;userName|||false|string||\\n|&emsp;&emsp;userType|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«UserRegisterVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||UserRegisterVO|UserRegisterVO|\\n|&emsp;&emsp;userId||integer(int32)||\\n|&emsp;&emsp;userName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\"},{\"page\":56,\"content\":\"\\t\\\"data\\\": {\\n\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\\"userName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## update\\n\\n\\n**接口地址**:`/user/update`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"avatar\\\": \\\"\\\",\\n  \\\"bio\\\": \\\"\\\",\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"passWord\\\": \\\"\\\",\\n  \\\"phone\\\": \\\"\\\",\\n  \\\"registerTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"sex\\\": 0,\\n  \\\"userId\\\": 0,\\n\"},{\"page\":57,\"content\":\"  \\\"userName\\\": \\\"\\\",\\n  \\\"userType\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|user|user|body|true|UserReq|UserReq|\\n|&emsp;&emsp;avatar|||false|string||\\n|&emsp;&emsp;bio|||false|string||\\n|&emsp;&emsp;email|||false|string||\\n|&emsp;&emsp;name|||false|string||\\n|&emsp;&emsp;passWord|||false|string||\\n|&emsp;&emsp;phone|||false|string||\\n|&emsp;&emsp;registerTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;sex|||false|integer(int32)||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n|&emsp;&emsp;userName|||false|string||\\n|&emsp;&emsp;userType|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n\"},{\"page\":58,\"content\":\"|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## updatePassword\\n\\n\\n**接口地址**:`/user/update/password`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"newPassword\\\": \\\"\\\",\\n  \\\"oldPassword\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|password|password|body|true|UpdatePasswordDTO|UpdatePasswordDTO|\\n\"},{\"page\":59,\"content\":\"|&emsp;&emsp;newPassword|||false|string||\\n|&emsp;&emsp;oldPassword|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 考试管理\\n\\n\\n## 创建考试\\n\\n\\n**接口地址**:`/exam/create`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\"},{\"page\":60,\"content\":\"\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"courseId\\\": 0,\\n  \\\"endTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"examName\\\": \\\"\\\",\\n  \\\"questions\\\": [\\n    {\\n      \\\"correctAnswer\\\": \\\"\\\",\\n      \\\"difficulty\\\": \\\"\\\",\\n      \\\"explanation\\\": \\\"\\\",\\n      \\\"options\\\": \\\"\\\",\\n      \\\"questionContent\\\": \\\"\\\",\\n      \\\"questionType\\\": \\\"\\\",\\n      \\\"score\\\": 0\\n    }\\n  ],\\n  \\\"startTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  }\\n}\\n```\\n\\n\\n**请求参数**:\\n\"},{\"page\":61,\"content\":\"\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|createExamDTO|createExamDTO|body|true|CreateExamDTO|CreateExamDTO|\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n|&emsp;&emsp;endTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;examName|||false|string||\\n|&emsp;&emsp;questions|||false|array|ExamQuestionDTO|\\n|&emsp;&emsp;&emsp;&emsp;correctAnswer|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;difficulty|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;explanation|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;options|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;questionContent|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;questionType|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;score|||false|integer||\\n|&emsp;&emsp;startTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ExamVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n\"},{\"page\":62,\"content\":\"| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ExamVO|ExamVO|\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;hasSubmitted||boolean||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;status||string||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n\"},{\"page\":63,\"content\":\"**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\\"hasSubmitted\\\": true,\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"status\\\": \\\"\\\",\\n\\t\\t\\\"teacherId\\\": 0,\\n\"},{\"page\":64,\"content\":\"\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除考试\\n\\n\\n**接口地址**:`/exam/delete/{examId}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n\"},{\"page\":65,\"content\":\"|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取考试详情（学生）\\n\\n\\n**接口地址**:`/exam/detail/{examId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ExamDetailVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\"},{\"page\":66,\"content\":\"\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ExamDetailVO|ExamDetailVO|\\n|&emsp;&emsp;accuracy||number(double)||\\n|&emsp;&emsp;autoScore||integer(int32)||\\n|&emsp;&emsp;correctCount||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;finalScore||integer(int32)||\\n|&emsp;&emsp;isReviewed||boolean||\\n|&emsp;&emsp;isSubmitted||boolean||\\n|&emsp;&emsp;questions||array|ExamQuestionVO|\\n|&emsp;&emsp;&emsp;&emsp;correctAnswer||string||\\n|&emsp;&emsp;&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n\"},{\"page\":67,\"content\":\"|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;difficulty||string||\\n|&emsp;&emsp;&emsp;&emsp;explanation||string||\\n|&emsp;&emsp;&emsp;&emsp;isCorrect||boolean||\\n|&emsp;&emsp;&emsp;&emsp;obtainedScore||integer||\\n|&emsp;&emsp;&emsp;&emsp;options||string||\\n|&emsp;&emsp;&emsp;&emsp;questionContent||string||\\n|&emsp;&emsp;&emsp;&emsp;questionId||integer||\\n|&emsp;&emsp;&emsp;&emsp;questionType||string||\\n|&emsp;&emsp;&emsp;&emsp;score||integer||\\n|&emsp;&emsp;&emsp;&emsp;userAnswer||string||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;submitTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;teacherName||string||\\n|&emsp;&emsp;totalScore||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"accuracy\\\": 0,\\n\\t\\t\\\"autoScore\\\": 0,\\n\\t\\t\\\"correctCount\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\"},{\"page\":68,\"content\":\"\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\\"finalScore\\\": 0,\\n\\t\\t\\\"isReviewed\\\": true,\\n\\t\\t\\\"isSubmitted\\\": true,\\n\\t\\t\\\"questions\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"correctAnswer\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"difficulty\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"explanation\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"isCorrect\\\": true,\\n\\t\\t\\t\\t\\\"obtainedScore\\\": 0,\\n\\t\\t\\t\\t\\\"options\\\": \\\"\\\",\\n\"},{\"page\":69,\"content\":\"\\t\\t\\t\\t\\\"questionContent\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\t\\t\\\"questionType\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\t\\\"userAnswer\\\": \\\"\\\"\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"submitTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"teacherName\\\": \\\"\\\",\\n\\t\\t\\\"totalScore\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取单份试卷详情（含题目和学生答案）\\n\\n\\n**接口地址**:`/exam/paper/{paperId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\"},{\"page\":70,\"content\":\"\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|paperId|paperId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取考试下所有试卷（可筛选是否已批改）\\n\\n\\n\"},{\"page\":71,\"content\":\"**接口地址**:`/exam/papers`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|query|true|integer(int32)||\\n|isReviewed|isReviewed|query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ExamPaper»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ExamPaper|\\n|&emsp;&emsp;answer||string||\\n|&emsp;&emsp;autoScore||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;finalScore||integer(int32)||\\n|&emsp;&emsp;isReviewed||boolean||\\n|&emsp;&emsp;markTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n\"},{\"page\":72,\"content\":\"|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;paperId||integer(int32)||\\n|&emsp;&emsp;reviewTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;subjectiveScores||string||\\n|&emsp;&emsp;submitTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;userId||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"answer\\\": \\\"\\\",\\n\\t\\t\\t\\\"autoScore\\\": 0,\\n\\t\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\t\\\"finalScore\\\": 0,\\n\\t\\t\\t\\\"isReviewed\\\": true,\\n\\t\\t\\t\\\"markTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\"},{\"page\":73,\"content\":\"\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"paperId\\\": 0,\\n\\t\\t\\t\\\"reviewTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\\"subjectiveScores\\\": \\\"\\\",\\n\\t\\t\\t\\\"submitTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"userId\\\": 0\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 发布考试\\n\\n\\n**接口地址**:`/exam/publish/{examId}`\\n\\n\"},{\"page\":74,\"content\":\"\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n\"},{\"page\":75,\"content\":\"```\\n\\n\\n## 获取考试结果\\n\\n\\n**接口地址**:`/exam/result/{examId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ExamDetailVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ExamDetailVO|ExamDetailVO|\\n|&emsp;&emsp;accuracy||number(double)||\\n|&emsp;&emsp;autoScore||integer(int32)||\\n|&emsp;&emsp;correctCount||integer(int32)||\\n\"},{\"page\":76,\"content\":\"|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;finalScore||integer(int32)||\\n|&emsp;&emsp;isReviewed||boolean||\\n|&emsp;&emsp;isSubmitted||boolean||\\n|&emsp;&emsp;questions||array|ExamQuestionVO|\\n|&emsp;&emsp;&emsp;&emsp;correctAnswer||string||\\n|&emsp;&emsp;&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;difficulty||string||\\n|&emsp;&emsp;&emsp;&emsp;explanation||string||\\n|&emsp;&emsp;&emsp;&emsp;isCorrect||boolean||\\n|&emsp;&emsp;&emsp;&emsp;obtainedScore||integer||\\n|&emsp;&emsp;&emsp;&emsp;options||string||\\n|&emsp;&emsp;&emsp;&emsp;questionContent||string||\\n|&emsp;&emsp;&emsp;&emsp;questionId||integer||\\n|&emsp;&emsp;&emsp;&emsp;questionType||string||\\n\"},{\"page\":77,\"content\":\"|&emsp;&emsp;&emsp;&emsp;score||integer||\\n|&emsp;&emsp;&emsp;&emsp;userAnswer||string||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;submitTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;teacherName||string||\\n|&emsp;&emsp;totalScore||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"accuracy\\\": 0,\\n\\t\\t\\\"autoScore\\\": 0,\\n\\t\\t\\\"correctCount\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\"},{\"page\":78,\"content\":\"\\t\\t},\\n\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\\"finalScore\\\": 0,\\n\\t\\t\\\"isReviewed\\\": true,\\n\\t\\t\\\"isSubmitted\\\": true,\\n\\t\\t\\\"questions\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"correctAnswer\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"difficulty\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"explanation\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"isCorrect\\\": true,\\n\\t\\t\\t\\t\\\"obtainedScore\\\": 0,\\n\\t\\t\\t\\t\\\"options\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"questionContent\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\t\\t\\\"questionType\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\t\\\"userAnswer\\\": \\\"\\\"\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\"},{\"page\":79,\"content\":\"\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"submitTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"teacherName\\\": \\\"\\\",\\n\\t\\t\\\"totalScore\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 老师批改主观题\\n\\n\\n**接口地址**:`/exam/review`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n\"},{\"page\":80,\"content\":\"```javascript\\n{\\n  \\\"paperId\\\": 0,\\n  \\\"subjectiveScores\\\": {}\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|reviewDTO|reviewDTO|body|true|ReviewDTO|ReviewDTO|\\n|&emsp;&emsp;paperId|||false|integer(int32)||\\n|&emsp;&emsp;subjectiveScores|||false|object||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n\"},{\"page\":81,\"content\":\"## 获取考试统计信息\\n\\n\\n**接口地址**:`/exam/statistics/{examId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\"},{\"page\":82,\"content\":\"\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取学生考试列表\\n\\n\\n**接口地址**:`/exam/student/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ExamVO»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ExamVO|\\n|&emsp;&emsp;courseId||integer(int32)||\\n\"},{\"page\":83,\"content\":\"|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;hasSubmitted||boolean||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;status||string||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\"},{\"page\":84,\"content\":\"\\t\\t{\\n\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\t\\\"hasSubmitted\\\": true,\\n\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"status\\\": \\\"\\\",\\n\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n\"},{\"page\":85,\"content\":\"}\\n```\\n\\n\\n## 提交考试\\n\\n\\n**接口地址**:`/exam/submit`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"answers\\\": {},\\n  \\\"examId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|submitExamDTO|submitExamDTO|body|true|SubmitExamDTO|SubmitExamDTO|\\n|&emsp;&emsp;answers|||false|object||\\n|&emsp;&emsp;examId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n\"},{\"page\":86,\"content\":\"|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取考试详情（教师）\\n\\n\\n**接口地址**:`/exam/teacher/detail/{examId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n\\n\"},{\"page\":87,\"content\":\"\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ExamDetailVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ExamDetailVO|ExamDetailVO|\\n|&emsp;&emsp;accuracy||number(double)||\\n|&emsp;&emsp;autoScore||integer(int32)||\\n|&emsp;&emsp;correctCount||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;finalScore||integer(int32)||\\n|&emsp;&emsp;isReviewed||boolean||\\n\"},{\"page\":88,\"content\":\"|&emsp;&emsp;isSubmitted||boolean||\\n|&emsp;&emsp;questions||array|ExamQuestionVO|\\n|&emsp;&emsp;&emsp;&emsp;correctAnswer||string||\\n|&emsp;&emsp;&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;difficulty||string||\\n|&emsp;&emsp;&emsp;&emsp;explanation||string||\\n|&emsp;&emsp;&emsp;&emsp;isCorrect||boolean||\\n|&emsp;&emsp;&emsp;&emsp;obtainedScore||integer||\\n|&emsp;&emsp;&emsp;&emsp;options||string||\\n|&emsp;&emsp;&emsp;&emsp;questionContent||string||\\n|&emsp;&emsp;&emsp;&emsp;questionId||integer||\\n|&emsp;&emsp;&emsp;&emsp;questionType||string||\\n|&emsp;&emsp;&emsp;&emsp;score||integer||\\n|&emsp;&emsp;&emsp;&emsp;userAnswer||string||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;submitTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;teacherName||string||\\n|&emsp;&emsp;totalScore||integer(int32)||\\n|msg||string||\\n\"},{\"page\":89,\"content\":\"\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"accuracy\\\": 0,\\n\\t\\t\\\"autoScore\\\": 0,\\n\\t\\t\\\"correctCount\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\\"finalScore\\\": 0,\\n\\t\\t\\\"isReviewed\\\": true,\\n\\t\\t\\\"isSubmitted\\\": true,\\n\\t\\t\\\"questions\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"correctAnswer\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\"},{\"page\":90,\"content\":\"\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"difficulty\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"explanation\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"isCorrect\\\": true,\\n\\t\\t\\t\\t\\\"obtainedScore\\\": 0,\\n\\t\\t\\t\\t\\\"options\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"questionContent\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\t\\t\\\"questionType\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\t\\\"userAnswer\\\": \\\"\\\"\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"submitTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"teacherName\\\": \\\"\\\",\\n\\t\\t\\\"totalScore\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\"},{\"page\":91,\"content\":\"\\n## 获取教师考试列表\\n\\n\\n**接口地址**:`/exam/teacher/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ExamVO»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ExamVO|\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n\"},{\"page\":92,\"content\":\"|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;hasSubmitted||boolean||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;status||string||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\"},{\"page\":93,\"content\":\"\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\t\\\"hasSubmitted\\\": true,\\n\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"status\\\": \\\"\\\",\\n\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 编辑考试\\n\\n\"},{\"page\":94,\"content\":\"\\n**接口地址**:`/exam/update/{examId}`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"endTime\\\": \\\"\\\",\\n  \\\"examId\\\": 0,\\n  \\\"examName\\\": \\\"\\\",\\n  \\\"questions\\\": [\\n    {\\n      \\\"correctAnswer\\\": \\\"\\\",\\n      \\\"difficulty\\\": \\\"\\\",\\n      \\\"explanation\\\": \\\"\\\",\\n      \\\"options\\\": \\\"\\\",\\n      \\\"questionContent\\\": \\\"\\\",\\n      \\\"questionType\\\": \\\"\\\",\\n      \\\"score\\\": 0\\n    }\\n  ],\\n  \\\"startTime\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|path|true|integer(int32)||\\n|updateExamDTO|updateExamDTO|body|true|UpdateExamDTO|UpdateExamDTO|\\n|&emsp;&emsp;endTime|||false|string(date-time)||\\n|&emsp;&emsp;examId|||false|integer(int32)||\\n|&emsp;&emsp;examName|||false|string||\\n\"},{\"page\":95,\"content\":\"|&emsp;&emsp;questions|||false|array|ExamQuestionDTO|\\n|&emsp;&emsp;&emsp;&emsp;correctAnswer|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;difficulty|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;explanation|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;options|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;questionContent|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;questionType|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;score|||false|integer||\\n|&emsp;&emsp;startTime|||false|string(date-time)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ExamVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ExamVO|ExamVO|\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;endTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n\"},{\"page\":96,\"content\":\"|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;examCount||integer(int32)||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;examName||string||\\n|&emsp;&emsp;hasSubmitted||boolean||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;startTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;status||string||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"endTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\"},{\"page\":97,\"content\":\"\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"examCount\\\": 0,\\n\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\\"examName\\\": \\\"\\\",\\n\\t\\t\\\"hasSubmitted\\\": true,\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"startTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"status\\\": \\\"\\\",\\n\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 考试题目管理\\n\\n\\n## 获取考试题目列表\\n\\n\\n**接口地址**:`/teacher/exam/questions`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\"},{\"page\":98,\"content\":\"\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|examId|examId|query|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ExamQuestion»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ExamQuestionRes|\\n|&emsp;&emsp;correctAnswer||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;difficulty||string||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;explanation||string||\\n|&emsp;&emsp;options||string||\\n|&emsp;&emsp;questionContent||string||\\n|&emsp;&emsp;questionId||integer(int32)||\\n|&emsp;&emsp;questionType||string||\\n|&emsp;&emsp;score||integer(int32)||\\n\"},{\"page\":99,\"content\":\"|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"correctAnswer\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"difficulty\\\": \\\"\\\",\\n\\t\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\t\\\"explanation\\\": \\\"\\\",\\n\\t\\t\\t\\\"options\\\": \\\"\\\",\\n\\t\\t\\t\\\"questionContent\\\": \\\"\\\",\\n\\t\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\t\\\"questionType\\\": \\\"\\\",\\n\\t\\t\\t\\\"score\\\": 0\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 清空考试题目\\n\\n\\n**接口地址**:`/teacher/exam/questions/clear`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\"},{\"page\":100,\"content\":\"\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|params|params|body|true|||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 根据课程ID获取题目列表\\n\\n\\n**接口地址**:`/teacher/exam/questions/course/questions`\\n\\n\"},{\"page\":101,\"content\":\"\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|query|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ExamQuestion»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ExamQuestionRes|\\n|&emsp;&emsp;correctAnswer||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n\"},{\"page\":102,\"content\":\"|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;difficulty||string||\\n|&emsp;&emsp;examId||integer(int32)||\\n|&emsp;&emsp;explanation||string||\\n|&emsp;&emsp;options||string||\\n|&emsp;&emsp;questionContent||string||\\n|&emsp;&emsp;questionId||integer(int32)||\\n|&emsp;&emsp;questionType||string||\\n|&emsp;&emsp;score||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"correctAnswer\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"difficulty\\\": \\\"\\\",\\n\\t\\t\\t\\\"examId\\\": 0,\\n\\t\\t\\t\\\"explanation\\\": \\\"\\\",\\n\\t\\t\\t\\\"options\\\": \\\"\\\",\\n\\t\\t\\t\\\"questionContent\\\": \\\"\\\",\\n\\t\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\t\\\"questionType\\\": \\\"\\\",\\n\\t\\t\\t\\\"score\\\": 0\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 保存考试题目\\n\\n\\n**接口地址**:`/teacher/exam/questions/save`\\n\"},{\"page\":103,\"content\":\"\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"examId\\\": 0,\\n  \\\"questions\\\": [\\n    {\\n      \\\"correctAnswer\\\": \\\"\\\",\\n      \\\"createTime\\\": {\\n        \\\"date\\\": 0,\\n        \\\"hours\\\": 0,\\n        \\\"minutes\\\": 0,\\n        \\\"month\\\": 0,\\n        \\\"nanos\\\": 0,\\n        \\\"seconds\\\": 0,\\n        \\\"time\\\": 0,\\n        \\\"year\\\": 0\\n      },\\n      \\\"difficulty\\\": \\\"\\\",\\n      \\\"examId\\\": 0,\\n      \\\"explanation\\\": \\\"\\\",\\n      \\\"options\\\": \\\"\\\",\\n      \\\"questionContent\\\": \\\"\\\",\\n      \\\"questionId\\\": 0,\\n      \\\"questionType\\\": \\\"\\\",\\n      \\\"score\\\": 0\\n    }\\n  ]\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n\"},{\"page\":104,\"content\":\"| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|dto|dto|body|true|ExamQuestionSaveDTO|ExamQuestionSaveDTO|\\n|&emsp;&emsp;examId|||false|integer(int32)||\\n|&emsp;&emsp;questions|||false|array|ExamQuestionReq|\\n|&emsp;&emsp;&emsp;&emsp;correctAnswer|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;difficulty|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;examId|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;explanation|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;options|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;questionContent|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;questionId|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;questionType|||false|string||\\n|&emsp;&emsp;&emsp;&emsp;score|||false|integer||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\"},{\"page\":105,\"content\":\"\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 订单管理\\n\\n\\n## 检查用户是否已购买课程\\n\\n\\n**接口地址**:`/order/check/{courseId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«boolean»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n\"},{\"page\":106,\"content\":\"| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||boolean||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": true,\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 创建订单（结算）\\n\\n\\n**接口地址**:`/order/create`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"courseIds\\\": [],\\n  \\\"paymentMethod\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n\"},{\"page\":107,\"content\":\"| -------- | -------- | ----- | -------- | -------- | ------ |\\n|checkoutDTO|checkoutDTO|body|true|CheckoutDTO|CheckoutDTO|\\n|&emsp;&emsp;courseIds|||false|array|integer|\\n|&emsp;&emsp;paymentMethod|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取订单详情\\n\\n\\n**接口地址**:`/order/detail/{orderId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n\"},{\"page\":108,\"content\":\"**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|orderId|orderId|path|true|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«OrderVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||OrderVO|OrderVO|\\n|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;orderAmount||number||\\n|&emsp;&emsp;orderId||string||\\n|&emsp;&emsp;orderStatus||string||\\n\"},{\"page\":109,\"content\":\"|&emsp;&emsp;payTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;paymentMethod||string||\\n|&emsp;&emsp;teacherName||string||\\n|&emsp;&emsp;userId||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"orderAmount\\\": 0,\\n\\t\\t\\\"orderId\\\": \\\"\\\",\\n\\t\\t\\\"orderStatus\\\": \\\"\\\",\\n\\t\\t\\\"payTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\"},{\"page\":110,\"content\":\"\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"paymentMethod\\\": \\\"\\\",\\n\\t\\t\\\"teacherName\\\": \\\"\\\",\\n\\t\\t\\\"userId\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取用户订单列表\\n\\n\\n**接口地址**:`/order/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n\"},{\"page\":111,\"content\":\"|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 支付订单\\n\\n\\n**接口地址**:`/order/pay/{orderId}`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\"},{\"page\":112,\"content\":\"\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|orderId|orderId|path|true|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 论坛\\n\\n\\n## 查看贴子详情（含回复）\\n\\n\\n**接口地址**:`/user/forum/detail`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n\"},{\"page\":113,\"content\":\"**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|topicId|topicId|query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ForumTopicWithRepliesVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ForumTopicWithRepliesVO|ForumTopicWithRepliesVO|\\n|&emsp;&emsp;replies||array|ForumReplyDetailVO|\\n|&emsp;&emsp;&emsp;&emsp;avatar||string||\\n|&emsp;&emsp;&emsp;&emsp;children||array|ForumReplyDetailVO|\\n|&emsp;&emsp;&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;parentReplyId||integer||\\n\"},{\"page\":114,\"content\":\"|&emsp;&emsp;&emsp;&emsp;replyContent||string||\\n|&emsp;&emsp;&emsp;&emsp;replyId||integer||\\n|&emsp;&emsp;&emsp;&emsp;replyToUserId||integer||\\n|&emsp;&emsp;&emsp;&emsp;replyToUserName||string||\\n|&emsp;&emsp;&emsp;&emsp;userId||integer||\\n|&emsp;&emsp;&emsp;&emsp;userName||string||\\n|&emsp;&emsp;topic||ForumTopicDetailVO|ForumTopicDetailVO|\\n|&emsp;&emsp;&emsp;&emsp;avatar||string||\\n|&emsp;&emsp;&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;replyCount||integer||\\n|&emsp;&emsp;&emsp;&emsp;topicCategory||string||\\n|&emsp;&emsp;&emsp;&emsp;topicContent||string||\\n|&emsp;&emsp;&emsp;&emsp;topicId||integer||\\n|&emsp;&emsp;&emsp;&emsp;topicTitle||string||\\n|&emsp;&emsp;&emsp;&emsp;userId||integer||\\n|&emsp;&emsp;&emsp;&emsp;userName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"replies\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"children\\\": [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\\"children\\\": [\\n\\t\\t\\t\\t\\t\\t\\t{}\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\"},{\"page\":115,\"content\":\"\\t\\t\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\\"parentReplyId\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\\"replyContent\\\": \\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\\"replyId\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\\"replyToUserId\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\\"replyToUserName\\\": \\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\t\\t\\t\\t\\\"userName\\\": \\\"\\\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"parentReplyId\\\": 0,\\n\\t\\t\\t\\t\\\"replyContent\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"replyId\\\": 0,\\n\\t\\t\\t\\t\\\"replyToUserId\\\": 0,\\n\\t\\t\\t\\t\\\"replyToUserName\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\t\\t\\\"userName\\\": \\\"\\\"\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"topic\\\": {\\n\\t\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"replyCount\\\": 0,\\n\"},{\"page\":116,\"content\":\"\\t\\t\\t\\\"topicCategory\\\": \\\"\\\",\\n\\t\\t\\t\\\"topicContent\\\": \\\"\\\",\\n\\t\\t\\t\\\"topicId\\\": 0,\\n\\t\\t\\t\\\"topicTitle\\\": \\\"\\\",\\n\\t\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\t\\\"userName\\\": \\\"\\\"\\n\\t\\t}\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 分页查询帖子\\n\\n\\n**接口地址**:`/user/forum/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n\"},{\"page\":117,\"content\":\"|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 回复论坛\\n\\n\\n**接口地址**:`/user/forum/reply`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\"},{\"page\":118,\"content\":\"\\n\\n```javascript\\n{\\n  \\\"parentReplyId\\\": 0,\\n  \\\"replyContent\\\": \\\"\\\",\\n  \\\"replyId\\\": 0,\\n  \\\"replyToUserId\\\": 0,\\n  \\\"replyToUserName\\\": \\\"\\\",\\n  \\\"topicId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|forumReplyDTO|forumReplyDTO|body|true|ForumReplyDTO|ForumReplyDTO|\\n|&emsp;&emsp;parentReplyId|||false|integer(int32)||\\n|&emsp;&emsp;replyContent|||false|string||\\n|&emsp;&emsp;replyId|||false|integer(int32)||\\n|&emsp;&emsp;replyToUserId|||false|integer(int32)||\\n|&emsp;&emsp;replyToUserName|||false|string||\\n|&emsp;&emsp;topicId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n\"},{\"page\":119,\"content\":\"**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改回复\\n\\n\\n**接口地址**:`/user/forum/reply`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"parentReplyId\\\": 0,\\n  \\\"replyContent\\\": \\\"\\\",\\n  \\\"replyId\\\": 0,\\n  \\\"replyToUserId\\\": 0,\\n  \\\"replyToUserName\\\": \\\"\\\",\\n  \\\"topicId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|forumReplyDTO|forumReplyDTO|body|true|ForumReplyDTO|ForumReplyDTO|\\n|&emsp;&emsp;parentReplyId|||false|integer(int32)||\\n\"},{\"page\":120,\"content\":\"|&emsp;&emsp;replyContent|||false|string||\\n|&emsp;&emsp;replyId|||false|integer(int32)||\\n|&emsp;&emsp;replyToUserId|||false|integer(int32)||\\n|&emsp;&emsp;replyToUserName|||false|string||\\n|&emsp;&emsp;topicId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 批量删除回复\\n\\n\\n**接口地址**:`/user/forum/reply/batch`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\"},{\"page\":121,\"content\":\"\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n[]\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|ids|ids|body|true|array|integer|\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n\"},{\"page\":122,\"content\":\"}\\n```\\n\\n\\n## 查询单条回复\\n\\n\\n**接口地址**:`/user/forum/reply/{id}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ForumReplyDTO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ForumReplyDTO|ForumReplyDTO|\\n|&emsp;&emsp;parentReplyId||integer(int32)||\\n|&emsp;&emsp;replyContent||string||\\n\"},{\"page\":123,\"content\":\"|&emsp;&emsp;replyId||integer(int32)||\\n|&emsp;&emsp;replyToUserId||integer(int32)||\\n|&emsp;&emsp;replyToUserName||string||\\n|&emsp;&emsp;topicId||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"parentReplyId\\\": 0,\\n\\t\\t\\\"replyContent\\\": \\\"\\\",\\n\\t\\t\\\"replyId\\\": 0,\\n\\t\\t\\\"replyToUserId\\\": 0,\\n\\t\\t\\\"replyToUserName\\\": \\\"\\\",\\n\\t\\t\\\"topicId\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除回复\\n\\n\\n**接口地址**:`/user/forum/reply/{id}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n\"},{\"page\":124,\"content\":\"**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 发布论坛\\n\\n\\n**接口地址**:`/user/forum/topics`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\"},{\"page\":125,\"content\":\"\\n\\n```javascript\\n{\\n  \\\"topicCategory\\\": \\\"\\\",\\n  \\\"topicContent\\\": \\\"\\\",\\n  \\\"topicId\\\": 0,\\n  \\\"topicTitle\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|forumTopicsDTO|forumTopicsDTO|body|true|ForumTopicsDTO|ForumTopicsDTO|\\n|&emsp;&emsp;topicCategory|||false|string||\\n|&emsp;&emsp;topicContent|||false|string||\\n|&emsp;&emsp;topicId|||false|integer(int32)||\\n|&emsp;&emsp;topicTitle|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«ForumTopicsVO»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||ForumTopicsVO|ForumTopicsVO|\\n|&emsp;&emsp;publishTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n\"},{\"page\":126,\"content\":\"|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;topicId||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"publishTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"topicId\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改帖子\\n\\n\\n**接口地址**:`/user/forum/topics`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n\"},{\"page\":127,\"content\":\"**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"topicCategory\\\": \\\"\\\",\\n  \\\"topicContent\\\": \\\"\\\",\\n  \\\"topicId\\\": 0,\\n  \\\"topicTitle\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|forumTopicsDTO|forumTopicsDTO|body|true|ForumTopicsDTO|ForumTopicsDTO|\\n|&emsp;&emsp;topicCategory|||false|string||\\n|&emsp;&emsp;topicContent|||false|string||\\n|&emsp;&emsp;topicId|||false|integer(int32)||\\n|&emsp;&emsp;topicTitle|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\"},{\"page\":128,\"content\":\"\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 批量删除帖子\\n\\n\\n**接口地址**:`/user/forum/topics/batch`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n[]\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|ids|ids|body|true|array|integer|\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\"},{\"page\":129,\"content\":\"\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除帖子\\n\\n\\n**接口地址**:`/user/forum/topics/{id}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\"},{\"page\":130,\"content\":\"\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 课程分类管理\\n\\n\\n## 新增课程分类\\n\\n\\n**接口地址**:`/course/category`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n\"},{\"page\":131,\"content\":\"**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryDesc\\\": \\\"\\\",\\n  \\\"categoryId\\\": 0,\\n  \\\"categoryName\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|category|category|body|true|CourseCategory|CourseCategory|\\n|&emsp;&emsp;categoryDesc|||false|string||\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;categoryName|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\"},{\"page\":132,\"content\":\"\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改课程分类\\n\\n\\n**接口地址**:`/course/category`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryDesc\\\": \\\"\\\",\\n  \\\"categoryId\\\": 0,\\n  \\\"categoryName\\\": \\\"\\\"\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|category|category|body|true|CourseCategory|CourseCategory|\\n|&emsp;&emsp;categoryDesc|||false|string||\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;categoryName|||false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n\"},{\"page\":133,\"content\":\"| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 清除课程分类缓存\\n\\n\\n**接口地址**:`/course/category/cache`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\"},{\"page\":134,\"content\":\"\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取课程分类列表\\n\\n\\n**接口地址**:`/course/category/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\"},{\"page\":135,\"content\":\"\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\"},{\"page\":136,\"content\":\"\\n## 根据ID获取课程分类\\n\\n\\n**接口地址**:`/course/category/{id}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«CourseCategory»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||CourseCategory|CourseCategory|\\n|&emsp;&emsp;categoryDesc||string||\\n|&emsp;&emsp;categoryId||integer(int32)||\\n|&emsp;&emsp;categoryName||string||\\n|msg||string||\\n\\n\"},{\"page\":137,\"content\":\"\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"categoryDesc\\\": \\\"\\\",\\n\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\\"categoryName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除课程分类\\n\\n\\n**接口地址**:`/course/category/{id}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\"},{\"page\":138,\"content\":\"\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 课程审核管理\\n\\n\\n## 审核课程\\n\\n\\n**接口地址**:`/admin/audit`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"auditMessage\\\": \\\"\\\",\\n  \\\"auditStatus\\\": \\\"\\\",\\n\"},{\"page\":139,\"content\":\"  \\\"courseId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|auditCourseDTO|auditCourseDTO|body|true|AuditCourseDTO|AuditCourseDTO|\\n|&emsp;&emsp;auditMessage|||false|string||\\n|&emsp;&emsp;auditStatus|||false|string||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改课程分类\\n\\n\"},{\"page\":140,\"content\":\"\\n**接口地址**:`/admin/audit/category`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"categoryId\\\": 0,\\n  \\\"courseId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|dto|dto|body|true|UpdateCourseCategoryDTO|UpdateCourseCategoryDTO|\\n|&emsp;&emsp;categoryId|||false|integer(int32)||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\"},{\"page\":141,\"content\":\"\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 根据审核状态获取课程列表（分页）\\n\\n\\n**接口地址**:`/admin/audit/courses`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|page|page|query|false|integer(int32)||\\n|pageSize|pageSize|query|false|integer(int32)||\\n|status|status|query|false|string||\\n\\n\\n**响应状态**:\\n\\n\\n\"},{\"page\":142,\"content\":\"| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取待审核课程列表\\n\\n\\n**接口地址**:`/admin/audit/pending`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n\"},{\"page\":143,\"content\":\"**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«ScanCourseVO»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|ScanCourseVO|\\n|&emsp;&emsp;auditMessage||string||\\n|&emsp;&emsp;auditStatus||string||\\n|&emsp;&emsp;categoryId||integer(int32)||\\n|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;courseTags||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n|&emsp;&emsp;price||number(double)||\\n|&emsp;&emsp;score||integer(int32)||\\n\"},{\"page\":144,\"content\":\"|&emsp;&emsp;studentCount||integer(int32)||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"auditMessage\\\": \\\"\\\",\\n\\t\\t\\t\\\"auditStatus\\\": \\\"\\\",\\n\\t\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseTags\\\": \\\"\\\",\\n\\t\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\t\\\"price\\\": 0,\\n\\t\\t\\t\\\"score\\\": 0,\\n\\t\\t\\t\\\"studentCount\\\": 0,\\n\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t\\t}\\n\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 推荐-取消推荐课程\\n\\n\\n**接口地址**:`/admin/audit/recommend`\\n\"},{\"page\":145,\"content\":\"\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"courseId\\\": 0,\\n  \\\"score\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|dto|dto|body|true|ToggleRecommendDTO|ToggleRecommendDTO|\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n|&emsp;&emsp;score|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n\"},{\"page\":146,\"content\":\"| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 课程进度\\n\\n\\n## 章节学习完成\\n\\n\\n**接口地址**:`/student/learn/complete`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"chapterId\\\": 0,\\n  \\\"courseId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\"},{\"page\":147,\"content\":\"\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|learnProcessDTO|learnProcessDTO|body|true|LearnProcessDTO|LearnProcessDTO|\\n|&emsp;&emsp;chapterId|||false|integer(int32)||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取已购买课程的完整详情（包含章节内容）\\n\\n\\n**接口地址**:`/student/learn/course/{courseId}/detail`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n\"},{\"page\":148,\"content\":\"**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«DetailCourseVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||DetailCourseVO|DetailCourseVO|\\n|&emsp;&emsp;auditMessage||string||\\n|&emsp;&emsp;auditStatus||string||\\n|&emsp;&emsp;categoryId||integer(int32)||\\n|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;chapteList||array|Chapter|\\n|&emsp;&emsp;&emsp;&emsp;chapterId||integer||\\n|&emsp;&emsp;&emsp;&emsp;chapterName||string||\\n|&emsp;&emsp;&emsp;&emsp;contentType||string||\\n|&emsp;&emsp;&emsp;&emsp;courseId||integer||\\n|&emsp;&emsp;&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n\"},{\"page\":149,\"content\":\"|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;docJson||string||\\n|&emsp;&emsp;&emsp;&emsp;isFree||integer||\\n|&emsp;&emsp;&emsp;&emsp;orderNum||integer||\\n|&emsp;&emsp;&emsp;&emsp;teacherId||integer||\\n|&emsp;&emsp;&emsp;&emsp;videoDuration||string||\\n|&emsp;&emsp;&emsp;&emsp;videoSize||integer||\\n|&emsp;&emsp;&emsp;&emsp;videoUrl||string||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;courseTags||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n|&emsp;&emsp;price||number(double)||\\n|&emsp;&emsp;score||integer(int32)||\\n|&emsp;&emsp;studentCount||integer(int32)||\\n|&emsp;&emsp;teacherId||integer(int32)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"auditMessage\\\": \\\"\\\",\\n\\t\\t\\\"auditStatus\\\": \\\"\\\",\\n\\t\\t\\\"categoryId\\\": 0,\\n\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\\"chapteList\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"chapterId\\\": 0,\\n\\t\\t\\t\\t\\\"chapterName\\\": \\\"\\\",\\n\"},{\"page\":150,\"content\":\"\\t\\t\\t\\t\\\"contentType\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"docJson\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"isFree\\\": 0,\\n\\t\\t\\t\\t\\\"orderNum\\\": 0,\\n\\t\\t\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\t\\t\\\"videoDuration\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"videoSize\\\": 0,\\n\\t\\t\\t\\t\\\"videoUrl\\\": \\\"\\\"\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\\"courseTags\\\": \\\"\\\",\\n\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\\"price\\\": 0,\\n\\t\\t\\\"score\\\": 0,\\n\\t\\t\\\"studentCount\\\": 0,\\n\\t\\t\\\"teacherId\\\": 0,\\n\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\"},{\"page\":151,\"content\":\"\\n\\n## 课程进度\\n\\n\\n**接口地址**:`/student/learn/process`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"chapterId\\\": 0,\\n  \\\"courseId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|learnProcessDTO|learnProcessDTO|body|true|LearnProcessDTO|LearnProcessDTO|\\n|&emsp;&emsp;chapterId|||false|integer(int32)||\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\"},{\"page\":152,\"content\":\"|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 购物车管理\\n\\n\\n## 添加到购物车\\n\\n\\n**接口地址**:`/cart/add`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"courseId\\\": 0\\n\"},{\"page\":153,\"content\":\"}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|addToCartDTO|addToCartDTO|body|true|AddToCartDTO|AddToCartDTO|\\n|&emsp;&emsp;courseId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 检查课程是否在购物车中\\n\\n\\n**接口地址**:`/cart/check/{courseId}`\\n\\n\"},{\"page\":154,\"content\":\"\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«boolean»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||boolean||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": true,\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\"},{\"page\":155,\"content\":\"\\n\\n## 清空购物车\\n\\n\\n**接口地址**:`/cart/clear`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\"},{\"page\":156,\"content\":\"\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取用户购物车列表\\n\\n\\n**接口地址**:`/cart/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«List«CartItemVO»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||array|CartItemVO|\\n|&emsp;&emsp;cartItemId||integer(int32)||\\n\"},{\"page\":157,\"content\":\"|&emsp;&emsp;categoryName||string||\\n|&emsp;&emsp;courseDesc||string||\\n|&emsp;&emsp;courseId||integer(int32)||\\n|&emsp;&emsp;courseName||string||\\n|&emsp;&emsp;coverImage||string||\\n|&emsp;&emsp;createTime||Timestamp|Timestamp|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;originalPrice||number(double)||\\n|&emsp;&emsp;price||number(double)||\\n|&emsp;&emsp;teacherName||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"cartItemId\\\": 0,\\n\\t\\t\\t\\\"categoryName\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseDesc\\\": \\\"\\\",\\n\\t\\t\\t\\\"courseId\\\": 0,\\n\\t\\t\\t\\\"courseName\\\": \\\"\\\",\\n\\t\\t\\t\\\"coverImage\\\": \\\"\\\",\\n\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t},\\n\\t\\t\\t\\\"originalPrice\\\": 0,\\n\\t\\t\\t\\\"price\\\": 0,\\n\\t\\t\\t\\\"teacherName\\\": \\\"\\\"\\n\\t\\t}\\n\"},{\"page\":158,\"content\":\"\\t],\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 从购物车移除\\n\\n\\n**接口地址**:`/cart/remove/{courseId}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|courseId|courseId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n\"},{\"page\":159,\"content\":\"|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 通用接口\\n\\n\\n## 获取文档临时下载地址（50分钟有效）\\n\\n\\n**接口地址**:`/admin/common/api/doc/download`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|chapterId|chapterId|query|true|integer(int32)||\\n|userId|userId|query|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|401|Unauthorized||\\n\"},{\"page\":160,\"content\":\"|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取章节文档分页内容\\n\\n\\n**接口地址**:`/admin/common/chapter/getDocPages`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|chapterId|chapterId|query|true|integer(int32)||\\n|userId|userId|query|true|integer(int32)||\\n\\n\"},{\"page\":161,\"content\":\"\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 上传并解析文档（PDF-Word-TXT）\\n\\n\\n**接口地址**:`/admin/common/upload-doc`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`multipart/form-data`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n\"},{\"page\":162,\"content\":\"**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|chapterId|chapterId|query|true|integer(int32)||\\n|file|file|body|true|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«object»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 上传图片文件\\n\\n\\n**接口地址**:`/admin/common/upload-image`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n\"},{\"page\":163,\"content\":\"**请求数据类型**:`multipart/form-data`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|file|file|body|false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«Map«string,object»»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 上传视频文件\\n\"},{\"page\":164,\"content\":\"\\n\\n**接口地址**:`/admin/common/upload-video`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`multipart/form-data`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|file|file|body|true|string||\\n|duration|duration|query|false|string||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«Map«string,object»»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||object||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n\"},{\"page\":165,\"content\":\"{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 通知\\n\\n\\n## 新增通知\\n\\n\\n**接口地址**:`/user/notification`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"content\\\": \\\"\\\",\\n  \\\"createTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"isRead\\\": true,\\n  \\\"link\\\": \\\"\\\",\\n  \\\"notificationId\\\": 0,\\n  \\\"type\\\": \\\"\\\",\\n  \\\"userId\\\": 0\\n\"},{\"page\":166,\"content\":\"}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|notification|notification|body|true|NotificationReq|NotificationReq|\\n|&emsp;&emsp;content|||false|string||\\n|&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;isRead|||false|boolean||\\n|&emsp;&emsp;link|||false|string||\\n|&emsp;&emsp;notificationId|||false|integer(int32)||\\n|&emsp;&emsp;type|||false|string||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n\"},{\"page\":167,\"content\":\"```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改通知\\n\\n\\n**接口地址**:`/user/notification`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"content\\\": \\\"\\\",\\n  \\\"createTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"isRead\\\": true,\\n  \\\"link\\\": \\\"\\\",\\n  \\\"notificationId\\\": 0,\\n  \\\"type\\\": \\\"\\\",\\n  \\\"userId\\\": 0\\n}\\n```\\n\"},{\"page\":168,\"content\":\"\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|notification|notification|body|true|NotificationReq|NotificationReq|\\n|&emsp;&emsp;content|||false|string||\\n|&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;isRead|||false|boolean||\\n|&emsp;&emsp;link|||false|string||\\n|&emsp;&emsp;notificationId|||false|integer(int32)||\\n|&emsp;&emsp;type|||false|string||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\"},{\"page\":169,\"content\":\"\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除用户全部通知\\n\\n\\n**接口地址**:`/user/notification/all`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n暂无\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\"},{\"page\":170,\"content\":\"\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 分页查询用户所有通知\\n\\n\\n**接口地址**:`/user/notification/list/{userId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userId|userId|path|true|integer(int32)||\\n|page|page|query|false|integer(int32)||\\n|pageSize|pageSize|query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«IPage«Notification»»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\"},{\"page\":171,\"content\":\"\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||IPage«Notification»|IPage«Notification»|\\n|&emsp;&emsp;current||integer(int64)||\\n|&emsp;&emsp;pages||integer(int64)||\\n|&emsp;&emsp;records||array|NotificationRes|\\n|&emsp;&emsp;&emsp;&emsp;content||string||\\n|&emsp;&emsp;&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;isRead||boolean||\\n|&emsp;&emsp;&emsp;&emsp;link||string||\\n|&emsp;&emsp;&emsp;&emsp;notificationId||integer||\\n|&emsp;&emsp;&emsp;&emsp;type||string||\\n|&emsp;&emsp;&emsp;&emsp;userId||integer||\\n|&emsp;&emsp;size||integer(int64)||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"current\\\": 0,\\n\\t\\t\\\"pages\\\": 0,\\n\\t\\t\\\"records\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"content\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\"},{\"page\":172,\"content\":\"\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"isRead\\\": true,\\n\\t\\t\\t\\t\\\"link\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"notificationId\\\": 0,\\n\\t\\t\\t\\t\\\"type\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"userId\\\": 0\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"size\\\": 0,\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 标记单条通知为已读\\n\\n\\n**接口地址**:`/user/notification/read/{id}`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n\"},{\"page\":173,\"content\":\"| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 全部标记为已读\\n\\n\\n**接口地址**:`/user/notification/readAll/{userId}`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n\"},{\"page\":174,\"content\":\"| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userId|userId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取未读通知数量\\n\\n\\n**接口地址**:`/user/notification/unread/count/{userId}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\"},{\"page\":175,\"content\":\"\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|userId|userId|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«int»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||integer(int32)|integer(int32)|\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": 0,\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 查询单条通知\\n\\n\\n**接口地址**:`/user/notification/{id}`\\n\\n\\n**请求方式**:`GET`\\n\"},{\"page\":176,\"content\":\"\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«Notification»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||NotificationRes|NotificationRes|\\n|&emsp;&emsp;content||string||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;isRead||boolean||\\n\"},{\"page\":177,\"content\":\"|&emsp;&emsp;link||string||\\n|&emsp;&emsp;notificationId||integer(int32)||\\n|&emsp;&emsp;type||string||\\n|&emsp;&emsp;userId||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"content\\\": \\\"\\\",\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"isRead\\\": true,\\n\\t\\t\\\"link\\\": \\\"\\\",\\n\\t\\t\\\"notificationId\\\": 0,\\n\\t\\t\\\"type\\\": \\\"\\\",\\n\\t\\t\\\"userId\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除通知\\n\\n\\n**接口地址**:`/user/notification/{id}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\"},{\"page\":178,\"content\":\"\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n# 问答答案管理\\n\\n\\n## 新增问答答案\\n\\n\\n**接口地址**:`/qa/answer`\\n\"},{\"page\":179,\"content\":\"\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"answerContent\\\": \\\"\\\",\\n  \\\"answerId\\\": 0,\\n  \\\"createTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"isBest\\\": 0,\\n  \\\"questionId\\\": 0,\\n  \\\"userId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|qaAnswer|qaAnswer|body|true|QaAnswerReq|QaAnswerReq|\\n|&emsp;&emsp;answerContent|||false|string||\\n|&emsp;&emsp;answerId|||false|integer(int32)||\\n|&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n\"},{\"page\":180,\"content\":\"|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;isBest|||false|integer(int32)||\\n|&emsp;&emsp;questionId|||false|integer(int32)||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改问答答案\\n\\n\\n**接口地址**:`/qa/answer`\\n\\n\\n**请求方式**:`PUT`\\n\\n\"},{\"page\":181,\"content\":\"\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"answerContent\\\": \\\"\\\",\\n  \\\"answerId\\\": 0,\\n  \\\"createTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"isBest\\\": 0,\\n  \\\"questionId\\\": 0,\\n  \\\"userId\\\": 0\\n}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|qaAnswer|qaAnswer|body|true|QaAnswerReq|QaAnswerReq|\\n|&emsp;&emsp;answerContent|||false|string||\\n|&emsp;&emsp;answerId|||false|integer(int32)||\\n|&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n\"},{\"page\":182,\"content\":\"|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;isBest|||false|integer(int32)||\\n|&emsp;&emsp;questionId|||false|integer(int32)||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取问答答案列表\\n\\n\\n**接口地址**:`/qa/answer/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n\"},{\"page\":183,\"content\":\"**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\"},{\"page\":184,\"content\":\"\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 根据ID获取问答答案\\n\\n\\n**接口地址**:`/qa/answer/{id}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«QaAnswer»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||QaAnswerRes|QaAnswerRes|\\n\"},{\"page\":185,\"content\":\"|&emsp;&emsp;answerContent||string||\\n|&emsp;&emsp;answerId||integer(int32)||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;isBest||integer(int32)||\\n|&emsp;&emsp;questionId||integer(int32)||\\n|&emsp;&emsp;userId||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"answerContent\\\": \\\"\\\",\\n\\t\\t\\\"answerId\\\": 0,\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"isBest\\\": 0,\\n\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\\"userId\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除问答答案\\n\\n\\n\"},{\"page\":186,\"content\":\"**接口地址**:`/qa/answer/{id}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n\"},{\"page\":187,\"content\":\"}\\n```\\n\\n\\n# 问答问题管理\\n\\n\\n## 新增问答问题\\n\\n\\n**接口地址**:`/qa/question`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"answerCount\\\": 0,\\n  \\\"bestAnswerId\\\": 0,\\n  \\\"createTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"questionContent\\\": \\\"\\\",\\n  \\\"questionId\\\": 0,\\n  \\\"questionTitle\\\": \\\"\\\",\\n  \\\"tags\\\": \\\"\\\",\\n  \\\"userId\\\": 0,\\n  \\\"viewCount\\\": 0\\n}\\n```\\n\"},{\"page\":188,\"content\":\"\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|qaQuestion|qaQuestion|body|true|QaQuestion|QaQuestion|\\n|&emsp;&emsp;answerCount|||false|integer(int32)||\\n|&emsp;&emsp;bestAnswerId|||false|integer(int32)||\\n|&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;questionContent|||false|string||\\n|&emsp;&emsp;questionId|||false|integer(int32)||\\n|&emsp;&emsp;questionTitle|||false|string||\\n|&emsp;&emsp;tags|||false|string||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n|&emsp;&emsp;viewCount|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n\"},{\"page\":189,\"content\":\"```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 修改问答问题\\n\\n\\n**接口地址**:`/qa/question`\\n\\n\\n**请求方式**:`PUT`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求示例**:\\n\\n\\n```javascript\\n{\\n  \\\"answerCount\\\": 0,\\n  \\\"bestAnswerId\\\": 0,\\n  \\\"createTime\\\": {\\n    \\\"date\\\": 0,\\n    \\\"hours\\\": 0,\\n    \\\"minutes\\\": 0,\\n    \\\"month\\\": 0,\\n    \\\"nanos\\\": 0,\\n    \\\"seconds\\\": 0,\\n    \\\"time\\\": 0,\\n    \\\"year\\\": 0\\n  },\\n  \\\"questionContent\\\": \\\"\\\",\\n  \\\"questionId\\\": 0,\\n  \\\"questionTitle\\\": \\\"\\\",\\n  \\\"tags\\\": \\\"\\\",\\n  \\\"userId\\\": 0,\\n  \\\"viewCount\\\": 0\\n\"},{\"page\":190,\"content\":\"}\\n```\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|qaQuestion|qaQuestion|body|true|QaQuestion|QaQuestion|\\n|&emsp;&emsp;answerCount|||false|integer(int32)||\\n|&emsp;&emsp;bestAnswerId|||false|integer(int32)||\\n|&emsp;&emsp;createTime|||false|TimestampReq|TimestampReq|\\n|&emsp;&emsp;&emsp;&emsp;date|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;hours|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;month|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;time|||false|integer||\\n|&emsp;&emsp;&emsp;&emsp;year|||false|integer||\\n|&emsp;&emsp;questionContent|||false|string||\\n|&emsp;&emsp;questionId|||false|integer(int32)||\\n|&emsp;&emsp;questionTitle|||false|string||\\n|&emsp;&emsp;tags|||false|string||\\n|&emsp;&emsp;userId|||false|integer(int32)||\\n|&emsp;&emsp;viewCount|||false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\"},{\"page\":191,\"content\":\"\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 获取问答问题列表\\n\\n\\n**接口地址**:`/qa/question/list`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|categoryId||query|false|integer(int32)||\\n|keyword||query|false|string||\\n|page||query|false|integer(int32)||\\n|pageSize||query|false|integer(int32)||\\n|teacherId||query|false|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«PageResult»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\"},{\"page\":192,\"content\":\"\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||PageResult|PageResult|\\n|&emsp;&emsp;records||array|object|\\n|&emsp;&emsp;statusCounts||object||\\n|&emsp;&emsp;total||integer(int64)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"records\\\": [],\\n\\t\\t\\\"statusCounts\\\": {},\\n\\t\\t\\\"total\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 设置最佳答案\\n\\n\\n**接口地址**:`/qa/question/setBestAnswer`\\n\\n\\n**请求方式**:`POST`\\n\\n\\n**请求数据类型**:`application/json`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n\"},{\"page\":193,\"content\":\"| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|answerId|answerId|query|true|integer(int32)||\\n|questionId|questionId|query|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|201|Created||\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 根据ID获取问答问题详情\\n\\n\\n**接口地址**:`/qa/question/{id}`\\n\\n\\n**请求方式**:`GET`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n\"},{\"page\":194,\"content\":\"**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«QaQuestionWithAnswersVO»|\\n|401|Unauthorized||\\n|403|Forbidden||\\n|404|Not Found||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||QaQuestionWithAnswersVO|QaQuestionWithAnswersVO|\\n|&emsp;&emsp;answerCount||integer(int32)||\\n|&emsp;&emsp;answers||array|QaAnswerDetailVO|\\n|&emsp;&emsp;&emsp;&emsp;answerContent||string||\\n|&emsp;&emsp;&emsp;&emsp;answerId||integer||\\n|&emsp;&emsp;&emsp;&emsp;avatar||string||\\n|&emsp;&emsp;&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;&emsp;&emsp;isBest||integer||\\n|&emsp;&emsp;&emsp;&emsp;userId||integer||\\n\"},{\"page\":195,\"content\":\"|&emsp;&emsp;&emsp;&emsp;userName||string||\\n|&emsp;&emsp;avatar||string||\\n|&emsp;&emsp;bestAnswerId||integer(int32)||\\n|&emsp;&emsp;createTime||TimestampRes|TimestampRes|\\n|&emsp;&emsp;&emsp;&emsp;date||integer||\\n|&emsp;&emsp;&emsp;&emsp;day||integer||\\n|&emsp;&emsp;&emsp;&emsp;hours||integer||\\n|&emsp;&emsp;&emsp;&emsp;minutes||integer||\\n|&emsp;&emsp;&emsp;&emsp;month||integer||\\n|&emsp;&emsp;&emsp;&emsp;nanos||integer||\\n|&emsp;&emsp;&emsp;&emsp;seconds||integer||\\n|&emsp;&emsp;&emsp;&emsp;time||integer||\\n|&emsp;&emsp;&emsp;&emsp;timezoneOffset||integer||\\n|&emsp;&emsp;&emsp;&emsp;year||integer||\\n|&emsp;&emsp;questionContent||string||\\n|&emsp;&emsp;questionId||integer(int32)||\\n|&emsp;&emsp;questionTitle||string||\\n|&emsp;&emsp;tags||string||\\n|&emsp;&emsp;userId||integer(int32)||\\n|&emsp;&emsp;userName||string||\\n|&emsp;&emsp;viewCount||integer(int32)||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": {\\n\\t\\t\\\"answerCount\\\": 0,\\n\\t\\t\\\"answers\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"answerContent\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"answerId\\\": 0,\\n\\t\\t\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\t\\t\\\"year\\\": 0\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"isBest\\\": 0,\\n\\t\\t\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\t\\t\\\"userName\\\": \\\"\\\"\\n\"},{\"page\":196,\"content\":\"\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"avatar\\\": \\\"\\\",\\n\\t\\t\\\"bestAnswerId\\\": 0,\\n\\t\\t\\\"createTime\\\": {\\n\\t\\t\\t\\\"date\\\": 0,\\n\\t\\t\\t\\\"day\\\": 0,\\n\\t\\t\\t\\\"hours\\\": 0,\\n\\t\\t\\t\\\"minutes\\\": 0,\\n\\t\\t\\t\\\"month\\\": 0,\\n\\t\\t\\t\\\"nanos\\\": 0,\\n\\t\\t\\t\\\"seconds\\\": 0,\\n\\t\\t\\t\\\"time\\\": 0,\\n\\t\\t\\t\\\"timezoneOffset\\\": 0,\\n\\t\\t\\t\\\"year\\\": 0\\n\\t\\t},\\n\\t\\t\\\"questionContent\\\": \\\"\\\",\\n\\t\\t\\\"questionId\\\": 0,\\n\\t\\t\\\"questionTitle\\\": \\\"\\\",\\n\\t\\t\\\"tags\\\": \\\"\\\",\\n\\t\\t\\\"userId\\\": 0,\\n\\t\\t\\\"userName\\\": \\\"\\\",\\n\\t\\t\\\"viewCount\\\": 0\\n\\t},\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\\n\\n## 删除问答问题\\n\\n\\n**接口地址**:`/qa/question/{id}`\\n\\n\\n**请求方式**:`DELETE`\\n\\n\\n**请求数据类型**:`application/x-www-form-urlencoded`\\n\\n\\n**响应数据类型**:`*/*`\\n\\n\\n**接口描述**:\\n\\n\\n**请求参数**:\\n\\n\\n\"},{\"page\":197,\"content\":\"| 参数名称 | 参数说明 | 请求类型    | 是否必须 | 数据类型 | schema |\\n| -------- | -------- | ----- | -------- | -------- | ------ |\\n|id|id|path|true|integer(int32)||\\n\\n\\n**响应状态**:\\n\\n\\n| 状态码 | 说明 | schema |\\n| -------- | -------- | ----- | \\n|200|OK|Result«string»|\\n|204|No Content||\\n|401|Unauthorized||\\n|403|Forbidden||\\n\\n\\n**响应参数**:\\n\\n\\n| 参数名称 | 参数说明 | 类型 | schema |\\n| -------- | -------- | ----- |----- | \\n|code||integer(int32)|integer(int32)|\\n|data||string||\\n|msg||string||\\n\\n\\n**响应示例**:\\n```javascript\\n{\\n\\t\\\"code\\\": 0,\\n\\t\\\"data\\\": \\\"\\\",\\n\\t\\\"msg\\\": \\\"\\\"\\n}\\n```\\n\"}],\"totalPages\":197}', 4);
INSERT INTO `course_chapters` VALUES (26, 8, '初识VUE', 1, 'DOCUMENT', 0, 'documents/1752219713709_vue文档小结.pdf', '00:10:00', 13467, '2025-07-11 15:41:53', '{\"pages\":[{\"page\":1,\"content\":\"Vue⽂档⼩结\\r\\n1. 解析  DOM 模板时的注意事项\\r\\n有些 HTML 元素，诸如 <ul>、<ol>、<table> 和 <select>，对于哪些元素可以出现在其内部是有严格限制的。⽽有些元素，诸如\\r\\n<li>、<tr> 和 <option>，只能出现在其它某些特定的元素内部。\\r\\n2. 事件名  - 全⼩写\\r\\n跟组件和 prop 不同，事件名不会被⽤作⼀个 JavaScript 变量名或属性名，所以就没有理由使⽤ camelCase 或 PascalCase 了。并且 v-on\\r\\n事件监听器在 DOM 模板中会被⾃动转换为全⼩写 (因为 HTML 是⼤⼩写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致\\r\\nmyEvent 不可能被监听到。\\r\\n3. .sync 修饰符\\r\\n  this.$emit(\'update:title\', newTitle)\\r\\n  <text-document\\r\\n    v-bind:title=\\\"doc.title\\\"\\r\\n    v-on:update:title=\\\"doc.title = $event\\\"\\r\\n  ></text-document>\\r\\n  // 简写\\r\\n  <text-document v-bind:title.sync=\\\"doc.title\\\"></text-document>\\r\\n4. 插槽  [⽗组件控制⼦组件页⾯内容显⽰ : js控制 (通过数据传递 ,控制权在⼦组件 ) html控制 (通过html传递 , 控\\r\\n制权在⽗组件 ,满⾜⽗组件的私有化 ,传⼊结构不确定，情况经常变化 )]\\r\\n⽗组件可以拿到⼦组件的数据,对数据处理后放⼊插槽\\r\\n作⽤域\\r\\n有的时候你希望提供的组件带有⼀个可从⼦组件获取数据的可复⽤的插槽\\r\\n\"}],\"totalPages\":1}', 4);
INSERT INTO `course_chapters` VALUES (27, 8, 'vue快速入门', 2, 'DOCUMENT', 0, 'documents/1752219742726_前端开发规范文档.docx', '00:10:00', 13467, '2025-07-11 15:42:22', '{\"pages\":[{\"page\":1,\"content\":\"前端开发规范文档\\n规范目的\\n为提高团队协作效率，便于后端开发人员添加功能及前端后期优化维护，输出高质量的代码，特制定该文档。本规范文档一经确认, 前端开发人员必须按本文档规范进行前端开发。本文档如有不对或者不合适的地方请及时提出。经讨论决定后方可更改。\\n基本准则\\n符合web标准，语义化html，结构表现行为分离，兼容性优良。页面性能方面，代码要求简洁明了有序，尽可能的减小服务器负载，保证最快的解析速度。\\n一、html 文件命名及编写规范\\n1、命名规则\\n采用小写英文字母 || _的组合命名，菜单名_功能名称，后缀.html。如：manage_list.html（管理列表）、manage_add.html（新增）、manage_edit.html（修改）、manage_detail.html（详情）。同时将页面放在其对应的模块划分目录中。\\n\"},{\"page\":2,\"content\":\"2、编写规范：\\n(1)文档类型声明及编码统一为html5声明类型“<!DOCTYPE html>”; \\n(2)编码统一为<meta charset=\\\"utf-8\\\" />, 书写时利用IDE实现层次分明的缩进;\\n(3)区域块、功能组件以及需要标注的地方，插入注释。\\n(4)在布局文件结构时，应遵循语义化标签（该用p不要用div、该用ul、li不要用p，h标签应根据标题层级合理利用）、代码结构简单、清晰明了，少用标签、少套结构（一段结构布局中 1个标签能解决的不要用2个，套2层结构能解决的不要套3层）的基本原则。\\n代码标签、结构嵌套示例：\\n    代码分析：根据目标效果图，实现的代码部分别使用了 ul/li /h4/ img /div /h3/ p 这些标签。首先这是一个产品列表，所以用了ul li进行包裹；其次，这块分别有两个重要的内容展示，一个是产品名称，一个是企名称，根据权重，代码层分别采用了h3、h4标签；其它的文字展示信息采用了p标签；图片采用标签img引入。整个实现，代码结构清晰、标签使用合理，符合语义化、遵循SEO搜索等原则。\\n二、CSS文件命名及编写规范\\n1、命名规则\\n用小写英文字母命名（可跟据CSS作用域以及、区域模块、公用组件、等等分别命名），后缀.css。如：common.css（公用）、reset.css（重置）、base.css（页面主体）、form.css（表单）、popup.css（弹层）等等。\\n\"},{\"page\":3,\"content\":\"2、编写规范：\\n(1)除重置样式使用元素选择器（html\\\\body\\\\div\\\\p\\\\ul\\\\li……）外，其它原则上使用类选择器（.nav\\\\.header……）编写样式，如无特别需要，应避免使用ID选择器（#btn\\\\#foot……）；\\n(2)编写格式：为提高样式代码的可读性、方便开发人员查找、维护，因此采用单行编写格式，一行编写一个属性和属性值。如果一个类选择器属性只有2到3个，考虑到节省空间问题，可不换行在同行编写；\\n(3)区域块、组件及需要标注的地方请插入注释。\\n(4)样式命名：采用“小写英文(模块、组件及功能名称)”+“ _(拼接)”+“--(修饰符)”规则命名。如：“toggle_title”，通常是指切换模块的标题样式名；“toggle_title--special”，通常指一个有别于其它切换模块标题的、具有独立样式的标题样式名。\\n3、CSS文件的引入：\\n统一在html文件中的head标签内使用link 标签引入，如：<link href=\\\"../css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">。为方便代码的维护、扩展、调式，避免写行内样式（div style=”font-size:14px; width:300px;”）,应采用‘div class=”list_1”’等方式引用。\\n4、CSS文件存放目录结构配置：\\n统一将样式文件放在CSS根目录下（图1所示）。如样式文件过多，可根据项目模块划分，在根目录下建模块文件夹，将该模块样式文件对应放入（图2所示）。\\n图例：\\n\"},{\"page\":4,\"content\":\"CSS文件夹                                      CSS文件夹\\n          reset.css                                        reset.css    \\n          common.css                                    common.css\\n          base.css                                        base.css  \\n                                                          userCenter\\n                                                                     base.css\\n                                                                     popup.css\\n图1：所有CSS文件统一在根目下                  图2：建了模块文件夹\\n三、JS文件命名及编写规范\\n1、命名规则\\n\"},{\"page\":5,\"content\":\"采用小写英文字母命名，后缀.js。如： common.js，如编写插件，则以“plugin_”开头，以具体功能名称结尾，如：plugin_ dialog.js。\\n编写规范：每个功能函数及需要作标注的地方插入注释。注意语法规范，以分号结尾。为提高性能及用户体验，JS文件及代码应放在html文件的最底部（除了一些特定的JS文件，在页面刷新时必须先加载的，需要放在head中之外。如移动端适配的“flexible.js”）。\\n2、JS文件的引入：\\n(1)在html文件中以“script”标签引入，如：<script src=\\\"../js/jquery.min.js\\\"></script>；\\n(2)在html文件底部内嵌JS代码，如：\\n <script>\\n//日期控件\\n  $(\'#start1\').click(function(){\\n      WdatePicker({\\n          maxDate:\'#F{$dp.$D(\\\\\'end1\\\\\',{d:-1});}\',\\n\"},{\"page\":6,\"content\":\"          readOnly:true\\n      });\\n  });\\n  $(\'#end1\').click(function(){\\n      WdatePicker({\\n          minDate:\'#F{$dp.$D(\\\\\'start1\\\\\',{d:1});}\',\\n          readOnly:true\\n      });\\n  });\\n</script>\\n\"},{\"page\":7,\"content\":\"3、JS文件存放目录结构配置：\\n  统一将脚本文件放在JS根目录下。如文件过多，可根据项目模块划分，在根目录下建模块文件夹，将该模块JS文件对应放入。插件单独建文件夹“plugins”，所有JS插件都放在其内。文件存放结构布局参考上文中的“CSS文件存放目录结构配置”。\\n注：如果使用的JS插件含有独立的图片及样式文件，需将整个插件所有文件均放入JS/plugins文件夹内，不要分离该插件的资源文件。\\n四、图片命名\\n1、命名规则\\n采用小写英文字母 || 数字 || _ 的组合，其中不得包含汉字 || 空格 || 特殊字符；尽量用易懂的词汇, 便于团队其他成员理解; 另, 命名分头尾两部分, 用下划线隔开, 比如ad_left01.gif || btn_submit.gif;\\n2、背景图片（采用CSS background- position定位的图片）命名：\\n(1)sprite拼图命名规则：\\n      图标：icon_sprite，如有多张，可以 icon后面跟数字，如：icon01_sprite；\\n      组件：组件名称_sprite，如：nav_sprite、foot_sprite、header_sprite、form_sprite；\\n\"},{\"page\":8,\"content\":\"      页面内容中用到的背景图片：cont_sprite，如有多张，可以在cont后面跟数字，如：cont01_sprite；\\n(2)单张图片命名规则：\\n采用小写英文字母和数字相接合，如：notfand.png、phone.jpg、 cont01.png、cont02.png……\\n3、前景图片（采用标签元素 img src引入的图片）命名：\\n命名规则：采用小写英文字母和数字相接合（可按区域块），如：list01.jpg、img01.jpg、pic01.png……\\n注意：页面中如果图片元素是作为动态数据来展示的，采用前景图片引入法，即<img src=”***.jpg”>。这些图片仅对前端编写html文件提供效果展示。除此之外的图片应使用背景图片定位方式导入，比如小图标等等。\\n\"}],\"totalPages\":8}', 4);
INSERT INTO `course_chapters` VALUES (28, 9, '安装mysql', 1, 'DOCUMENT', 0, 'documents/1752219775855_python学习文档.doc', '00:10:00', 13467, '2025-07-11 15:42:55', '{\"pages\":[{\"page\":1,\"content\":\"为什么使用Python\\r\\n\\n假设我们有这么一项任务:简单测试局域网中的电脑是否连通.这些电脑的ip范围从192.168.0.101到192.168.0.200.   \\r\\n\\n思路:用shell编程.(Linux通常是bash而Windows是批处理脚本).例如,在Windows上用ping ip 的命令依次测试各个机器并得到控制台输出.由于ping通的时候控制台文本通常是\\\"Reply from ... \\\" 而不通的时候文本是\\\"time out ... \\\" ,所以,在结果中进行字符串查找,即可知道该机器是否连通.\\r\\n\\n实现:Java代码如下:\\r\\n\\nString cmd=\\\"cmd.exe ping \\\";\\r\\n\\nString ipprefix=\\\"192.168.10.\\\";\\r\\n\\nint begin=101;\\r\\n\\nint end=200;\\r\\n\\nProcess p=null;\\r\\n\\nfor(int i=begin;i<end;i++){\\r\\n\\n\"},{\"page\":2,\"content\":\" p= Runtime.getRuntime().exec(cmd+i);\\r\\n\\n String line = null;\\r\\n\\n BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\\r\\n\\n while((line = reader.readLine()) != null)\\r\\n\\n {\\r\\n\\n     //Handling line , may logs it. \\r\\n\\n }\\r\\n\\nreader.close();\\r\\n\\np.destroy();\\r\\n\\n}\\r\\n\\n\"},{\"page\":3,\"content\":\"这段代码运行得很好,问题是为了运行这段代码,你还需要做一些额外的工作.这些额外的工作包括:\\r\\n\\n编写一个类文件\\r\\n\\n编写一个main方法\\r\\n\\n将之编译成字节代码\\r\\n\\n由于字节代码不能直接运行,你需要再写个小小的bat或者bash脚本来运行.\\r\\n\\n当然,用C/C++同样能完成这项工作.但C/C++不是跨平台语言.在这个足够简单的例子中也许看不出C/C++和Java实现的区别,但在一些更为复 杂的场景,比如要将连通与否的信息记录到网络数据库.由于Linux和Windows的网络接口实现方式不同,你不得不写两个函数的版本.用Java就没 有这样的顾虑.\\r\\n\\n同样的工作用Python实现如下:\\r\\n\\nimport subprocess\\r\\n\\ncmd=\\\"cmd.exe\\\"\\r\\n\\nbegin=101\\r\\n\\n\"},{\"page\":4,\"content\":\"end=200\\r\\n\\nwhile begin<end:\\r\\n\\np=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,\\r\\n\\n               stdin=subprocess.PIPE,\\r\\n\\n               stderr=subprocess.PIPE)\\r\\n\\np.stdin.write(\\\"ping 192.168.1.\\\"+str(begin)+\\\"\\\\n\\\")\\r\\n\\np.stdin.close()\\r\\n\\np.wait()\\r\\n\\nprint \\\"execution result: %s\\\"%p.stdout.read()\\r\\n\\n对比Java,Python的实现更为简洁,你编写的时间更快.你不需要写main函数,并且这个程序保存之后可以直接运行.另外,和Java一样,Python也是跨平台的.\\r\\n\\n\"},{\"page\":5,\"content\":\"有经验的C/Java程序员可能会争论说用C/Java写会比Python写得快.这个观点见仁见智.我的想法是当你同时掌握Java和Python之 后,你会发现用Python写这类程序的速度会比Java快上许多.例如操作本地文件时你仅需要一行代码而不需要Java的许多流包装类.各种语言有其天 然的适合的应用范围.用Python处理一些简短程序类似与操作系统的交互编程工作最省时省力.\\r\\n\\nPython应用场合\\r\\n\\n足够简单的任务,例如一些shell编程.如果你喜欢用Python设计大型商业网站或者设计复杂的游戏,悉听尊便.\\r\\n\\n2 快速入门\\r\\n\\n2.1 Hello world\\r\\n\\n安装完Python之后(我本机的版本是2.5.4),打开IDLE(Python GUI) , 该程序是Python语言解释器,你写的语句能够立即运行.我们写下一句著名的程序语句:\\r\\n\\nprint \\\"Hello,world!\\\" \\r\\n\\n并按回车.你就能看到这句被K&R引入到程序世界的名言.\\r\\n\\n\"},{\"page\":6,\"content\":\"在解释器中选择\\\"File\\\"--\\\"New Window\\\" 或快捷键 Ctrl+N , 打开一个新的编辑器.写下如下语句:\\r\\n\\nprint \\\"Hello,world!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n保存为a.py文件.按F5,你就可以看到程序的运行结果了.这是Python的第二种运行方式.\\r\\n\\n找到你保存的a.py文件,双击.也可以看到程序结果.Python的程序能够直接运行,对比Java,这是一个优势.\\r\\n\\n2.2 国际化支持\\r\\n\\n我们换一种方式来问候世界.新建一个编辑器并写如下代码:\\r\\n\\nprint \\\"欢迎来到奥运中国!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n\"},{\"page\":7,\"content\":\"在你保存代码的时候,Python会提示你是否改变文件的字符集,结果如下:\\r\\n\\n# -*- coding: cp936 -*- \\r\\n\\nprint \\\"欢迎来到奥运中国!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n将该字符集改为我们更熟悉的形式:\\r\\n\\n# -*- coding: GBK -*- \\r\\n\\nprint \\\"欢迎来到奥运中国!\\\" # 使用中文的例子\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n程序一样运行良好.\\r\\n\\n\"},{\"page\":8,\"content\":\"2.3 方便易用的计算器\\r\\n\\n用微软附带的计算器来计数实在太麻烦了.打开Python解释器,直接进行计算:\\r\\n\\na=100.0\\r\\n\\nb=201.1\\r\\n\\nc=2343\\r\\n\\nprint (a+b+c)/c\\r\\n\\n2.4 字符串,ASCII和UNICODE\\r\\n\\n可以如下打印出预定义输出格式的字符串:\\r\\n\\nprint \\\"\\\"\\\"\\r\\n\\n\"},{\"page\":9,\"content\":\"Usage: thingy [OPTIONS]\\r\\n\\n -h                        Display this usage message\\r\\n\\n -H hostname               Hostname to connect to\\r\\n\\n\\\"\\\"\\\" \\r\\n\\n字符串是怎么访问的?请看这个例子:\\r\\n\\nword=\\\"abcdefg\\\"\\r\\n\\na=word[2]\\r\\n\\nprint \\\"a is: \\\"+a\\r\\n\\nb=word[1:3]\\r\\n\\nprint \\\"b is: \\\"+b # index 1 and 2 elements of word.\\r\\n\\n\"},{\"page\":10,\"content\":\"c=word[:2]\\r\\n\\nprint \\\"c is: \\\"+c # index 0 and 1 elements of word.\\r\\n\\nd=word[0:]\\r\\n\\nprint \\\"d is: \\\"+d # All elements of word.\\r\\n\\ne=word[:2]+word[2:]\\r\\n\\nprint \\\"e is: \\\"+e # All elements of word.\\r\\n\\nf=word[-1]\\r\\n\\nprint \\\"f is: \\\"+f # The last elements of word.\\r\\n\\ng=word[-4:-2]\\r\\n\\nprint \\\"g is: \\\"+g # index 3 and 4 elements of word.\\r\\n\\n\"},{\"page\":11,\"content\":\"h=word[-2:]\\r\\n\\nprint \\\"h is: \\\"+h # The last two elements.\\r\\n\\ni=word[:-2]\\r\\n\\nprint \\\"i is: \\\"+i # Everything except the last two characters\\r\\n\\nl=len(word)\\r\\n\\nprint \\\"Length of word is: \\\"+ str(l) \\r\\n\\n请注意ASCII和UNICODE字符串的区别:\\r\\n\\nprint \\\"Input your Chinese name:\\\"\\r\\n\\ns=raw_input(\\\"Press enter to be continued\\u0001\\\");\\r\\n\\nprint \\\"Your name is \\u0001 : \\\" +s;\\r\\n\\n\"},{\"page\":12,\"content\":\"l=len(s)\\r\\n\\nprint \\\"Length of your Chinese name in asc codes is:\\\"+str(l);\\r\\n\\na=unicode(s,\\\"GBK\\\")\\r\\n\\nl=len(a)\\r\\n\\nprint \\\"I\'m sorry we should use unicode char!Characters number of your Chinese \\\\\\r\\n\\nname in unicode is:\\\"+str(l); \\r\\n\\n2.5 使用List\\r\\n\\n类似Java里的List,这是一种方便易用的数据类型:\\r\\n\\nword=[\'a\',\'b\',\'c\',\'d\',\'e\',\'f\',\'g\']\\r\\n\\n\"},{\"page\":13,\"content\":\"a=word[2]\\r\\n\\nprint \\\"a is: \\\"+a\\r\\n\\nb=word[1:3]\\r\\n\\nprint \\\"b is: \\\"\\r\\n\\nprint b # index 1 and 2 elements of word.\\r\\n\\nc=word[:2]\\r\\n\\nprint \\\"c is: \\\"\\r\\n\\nprint c # index 0 and 1 elements of word.\\r\\n\\nd=word[0:]\\r\\n\\nprint \\\"d is: \\\"\\r\\n\\n\"},{\"page\":14,\"content\":\"print d # All elements of word.\\r\\n\\ne=word[:2]+word[2:]\\r\\n\\nprint \\\"e is: \\\"\\r\\n\\nprint e # All elements of word.\\r\\n\\nf=word[-1]\\r\\n\\nprint \\\"f is: \\\"\\r\\n\\nprint f # The last elements of word.\\r\\n\\ng=word[-4:-2]\\r\\n\\nprint \\\"g is: \\\"\\r\\n\\nprint g # index 3 and 4 elements of word.\\r\\n\\n\"},{\"page\":15,\"content\":\"h=word[-2:]\\r\\n\\nprint \\\"h is: \\\"\\r\\n\\nprint h # The last two elements.\\r\\n\\ni=word[:-2]\\r\\n\\nprint \\\"i is: \\\"\\r\\n\\nprint i # Everything except the last two characters\\r\\n\\nl=len(word)\\r\\n\\nprint \\\"Length of word is: \\\"+ str(l)\\r\\n\\nprint \\\"Adds new element\\u0001\\\"\\r\\n\\nword.append(\'h\')\\r\\n\\n\"},{\"page\":16,\"content\":\"print word \\r\\n\\n2.6 条件和循环语句\\r\\n\\n# Multi-way decision\\r\\n\\nx=int(raw_input(\\\"Please enter an integer:\\\"))\\r\\n\\nif x<0:\\r\\n\\nx=0\\r\\n\\nprint \\\"Negative changed to zero\\\"\\r\\n\\nelif x==0:\\r\\n\\nprint \\\"Zero\\\"\\r\\n\\n\"},{\"page\":17,\"content\":\"else:\\r\\n\\nprint \\\"More\\\"\\r\\n\\n# Loops List\\r\\n\\na = [\'cat\', \'window\', \'defenestrate\']\\r\\n\\nfor x in a:\\r\\n\\nprint x, len(x)\\r\\n\\n2.7 如何定义函数\\r\\n\\n# Define and invoke function.\\r\\n\\ndef sum(a,b):\\r\\n\\n\"},{\"page\":18,\"content\":\"return a+b\\r\\n\\nfunc = sum\\r\\n\\nr = func(5,6)\\r\\n\\nprint r\\r\\n\\n# Defines function with default argument\\r\\n\\ndef add(a,b=2):\\r\\n\\nreturn a+b\\r\\n\\nr=add(1)\\r\\n\\nprint r\\r\\n\\nr=add(1,5)\\r\\n\\n\"},{\"page\":19,\"content\":\"print r \\r\\n\\n并且,介绍一个方便好用的函数:\\r\\n\\n# The range() function\\r\\n\\na =range(5,10)\\r\\n\\nprint a\\r\\n\\na = range(-2,-7)\\r\\n\\nprint a\\r\\n\\na = range(-7,-2)\\r\\n\\nprint a\\r\\n\\na = range(-2,-11,-3) # The 3rd parameter stands for step\\r\\n\\n\"},{\"page\":20,\"content\":\"print a \\r\\n\\n2.8 文件I/O\\r\\n\\nspath=\\\"D:/download/baa.txt\\\"\\r\\n\\nf=open(spath,\\\"w\\\") # Opens file for writing.Creates this file doesn\'t exist.\\r\\n\\nf.write(\\\"First line 1.\\\\n\\\")\\r\\n\\nf.writelines(\\\"First line 2.\\\")\\r\\n\\nf.close()\\r\\n\\nf=open(spath,\\\"r\\\") # Opens file for reading\\r\\n\\nfor line in f:\\r\\n\\n\"},{\"page\":21,\"content\":\"print line\\r\\n\\nf.close() \\r\\n\\n2.9 异常处理\\r\\n\\ns=raw_input(\\\"Input your age:\\\")\\r\\n\\nif s ==\\\"\\\":\\r\\n\\nraise Exception(\\\"Input must no be empty.\\\")\\r\\n\\ntry:\\r\\n\\ni=int(s)\\r\\n\\nexcept ValueError:\\r\\n\\n\"},{\"page\":22,\"content\":\"print \\\"Could not convert data to an integer.\\\"\\r\\n\\nexcept:\\r\\n\\nprint \\\"Unknown exception!\\\"\\r\\n\\nelse: # It is useful for code that must be executed if the try clause does not raise an exception\\r\\n\\nprint \\\"You are %d\\\" % i,\\\" years old\\\"\\r\\n\\nfinally: # Clean up action\\r\\n\\nprint \\\"Goodbye!\\\" \\r\\n\\n2.10 类和继承\\r\\n\\nclass Base:\\r\\n\\n\"},{\"page\":23,\"content\":\"def __init__(self):\\r\\n\\n    self.data = []\\r\\n\\ndef add(self, x):\\r\\n\\n    self.data.append(x)\\r\\n\\ndef addtwice(self, x):\\r\\n\\n    self.add(x)\\r\\n\\n    self.add(x)\\r\\n\\n# Child extends Base\\r\\n\\nclass Child(Base):\\r\\n\\ndef plus(self,a,b):\\r\\n\\n\"},{\"page\":24,\"content\":\"    return a+b\\r\\n\\noChild =Child()\\r\\n\\noChild.add(\\\"str1\\\")\\r\\n\\nprint oChild.data\\r\\n\\nprint oChild.plus(2,3) \\r\\n\\n2.11 包机制\\r\\n\\n每一个.py文件称为一个module,module之间可以互相导入.请参看以下例子:\\r\\n\\n# a.py\\r\\n\\ndef add_func(a,b):\\r\\n\\n\"},{\"page\":25,\"content\":\"return a+b \\r\\n\\n# b.py\\r\\n\\nfrom a import add_func # Also can be : import a\\r\\n\\nprint \\\"Import add_func from module a\\\"\\r\\n\\nprint \\\"Result of 1 plus 2 is: \\\"\\r\\n\\nprint add_func(1,2)    # If using \\\"import a\\\" , then here should be \\\"a.add_func\\\" \\r\\n\\nmodule可以定义在包里面.Python定义包的方式稍微有点古怪,假设我们有一个parent文件夹,该文件夹有一个child子文件 夹.child中有一个module a.py . 如何让Python知道这个文件层次结构?很简单,每个目录都放一个名为_init_.py 的文件.该文件内容可以为空.这个层次结构如下所示: \\r\\n\\nparent \\r\\n\\n--__init_.py\\r\\n\\n--child\\r\\n\\n\"},{\"page\":26,\"content\":\"-- __init_.py\\r\\n\\n--a.py\\r\\n\\nb.py \\r\\n\\n那么Python如何找到我们定义的module?在标准包sys中,path属性记录了Python的包路径.你可以将之打印出来:\\r\\n\\nimport sys\\r\\n\\nprint sys.path\\r\\n\\n通常我们可以将module的包路径放到环境变量PYTHONPATH中,该环境变量会自动添加到sys.path属性.另一种方便的方法是编程中直接指定我们的module路径到sys.path 中:\\r\\n\\nimport sys\\r\\n\\nsys.path.append(\'D:\\\\\\\\download\')\\r\\n\\nfrom parent.child.a import add_func\\r\\n\\n\"},{\"page\":27,\"content\":\"print sys.path\\r\\n\\nprint \\\"Import add_func from module a\\\"\\r\\n\\nprint \\\"Result of 1 plus 2 is: \\\"\\r\\n\\nprint add_func(1,2) \\r\\n\\n总结\\r\\n\\n你会发现这个教程相当的简单.许多Python特性在代码中以隐含方式提出,这些特性包括:Python不需要显式声明数据类型,关键字说明,字符串函数 的解释等等.我认为一个熟练的程序员应该对这些概念相当了解,这样在你挤出宝贵的一小时阅读这篇短短的教程之后,你能够通过已有知识的迁移类比尽快熟悉 Python,然后尽快能用它开始编程.\\r\\n\\n当然,1小时学会Python颇有哗众取宠之嫌.确切的说,编程语言包括语法和标准库.语法相当于武术招式,而标准库应用实践经验则类似于内功,需要长期 锻炼.Python学习了Java的长处,提供了大量极方便易用的标准库供程序员\\\"拿来主义\\\".(这也是Python成功的原因),在开篇我们看到了 Python如何调用Windows cmd的例子,以后我会尽量写上各标准库的用法和一些应用技巧,让大家真正掌握Python.\\r\\n\\n但不管怎样,至少你现在会用Python代替繁琐的批处理写程序了.希望那些真的能在一小时内读完本文并开始使用Python的程序员会喜欢这篇小文章,谢谢!\\r\\n\\n\"}],\"totalPages\":27}', 4);
INSERT INTO `course_chapters` VALUES (29, 9, '第一个数据库', 2, 'DOCUMENT', 0, 'documents/1752219799706_单片机常用的14个c语言算法.docx', '00:10:00', 13467, '2025-07-11 15:43:19', '{\"pages\":[{\"page\":1,\"content\":\"引言概述：\\n在单片机的开发中，C语言是最常用的编程语言之一。掌握一些常用的C语言算法对于单片机的开发非常重要。本文将介绍单片机常用的14个C语言算法之二，包括排序算法、查找算法、递归算法、动态规划算法和图算法。\\n正文内容：\\n一、排序算法\\n1. 冒泡排序：通过不断地交换相邻元素的位置，将大的元素冒泡到数组的末尾。\\n2. 快速排序：通过选择一个基准元素，将小于基准元素的数移动到基准元素左边，将大于基准元素的数移动到基准元素右边，然后分别对左右两部分递归地进行快速排序。\\n3. 插入排序：将数组分为已排序和未排序两部分，每次从未排序部分取一个元素，将其插入已排序部分的合适位置。\\n4. 选择排序：每次从未排序部分选择最小的元素，将其放在已排序部分的末尾。\\n5. 归并排序：将数组不断划分为更小的子数组，然后将子数组合并为有序数组。\\n二、查找算法\\n\"},{\"page\":2,\"content\":\"1. 顺序查找：逐个比较数组中的元素，直到找到目标元素或者遍历完整个数组。\\n2. 二分查找：对于已排序的数组，通过不断将目标值与中间元素比较，并缩小搜索范围，最终找到目标元素的位置。\\n3. 插值查找：与二分查找类似，不同之处在于确定中间元素的位置时使用插值公式，使得查找范围更接近目标元素。\\n4. 哈希查找：使用哈希函数将关键字映射到一个唯一的哈希值，通过查找哈希值对应的位置来获取关键字。\\n5. 递归查找：通过递归地划分问题的规模，从而减小查找范围，最终找到目标元素。\\n三、递归算法\\n1. 递归定义：在函数的定义中使用函数本身的方式称为递归。\\n2. 递归函数的特点：包含一个递归结束的条件和一个递归调用的表达式。\\n3. 递归算法的实现：通过不断把原问题转化为更小规模的子问题，直到满足递归结束的条件。\\n4. 递归算法的应用：在树、图等数据结构的遍历、搜索等问题中，递归算法被广泛使用。\\n\"},{\"page\":3,\"content\":\"5. 递归算法的优化：如尾递归优化、记忆化搜索等方法可以避免递归算法中的重复计算。\\n四、动态规划算法\\n1. 动态规划的思想：将一个问题划分为多个子问题，并保存每个子问题的解，避免重复计算。\\n2. 动态规划算法的步骤：确定状态转移方程、定义初始状态、根据状态转移方程逐步求解最终状态。\\n3. 动态规划的应用场景：解决最优化问题、计数问题、路径问题等。\\n4. 背包问题：一个背包有一定的容量，现有一些物品，每个物品的重量和价值各不相同，问如何选择物品放入背包使得总价值最大。\\n5. 最长公共子序列问题：给定两个序列，求它们的最长公共子序列的长度。\\n五、图算法\\n1. 图的表示方法：邻接矩阵和邻接表。\\n2. 图的深度优先遍历：通过递归或者栈的方式依次访问图的每个节点，并标记已访问过的节点。\\n\"},{\"page\":4,\"content\":\"3. 图的广度优先遍历：通过队列的方式按层级依次访问图的每个节点，并标记已访问过的节点。\\n4. 最短路径算法：Dijkstra算法和Floyd-Warshall算法，用于解决图中两个节点之间的最短路径问题。\\n5. 最小生成树算法：Prim算法和Kruskal算法，用于求解图的最小生成树问题。\\n总结：\\n本文介绍了单片机常用的14个C语言算法，包括排序算法、查找算法、递归算法、动态规划算法和图算法。这些算法在单片机的开发过程中非常实用，为程序员提供了解决各类问题的工具和思路。熟练掌握这些算法，可以提高单片机代码的效率和可靠性，使开发工作更加高效。希望本文对读者能够有所帮助，引导他们在单片机开发中使用C语言算法解决问题。\\n\"}],\"totalPages\":4}', 4);
INSERT INTO `course_chapters` VALUES (30, 10, '安装ubuntu', 1, 'DOCUMENT', 0, 'documents/1752219836455_python学习文档.doc', '00:10:00', 13467, '2025-07-11 15:43:56', '{\"pages\":[{\"page\":1,\"content\":\"为什么使用Python\\r\\n\\n假设我们有这么一项任务:简单测试局域网中的电脑是否连通.这些电脑的ip范围从192.168.0.101到192.168.0.200.   \\r\\n\\n思路:用shell编程.(Linux通常是bash而Windows是批处理脚本).例如,在Windows上用ping ip 的命令依次测试各个机器并得到控制台输出.由于ping通的时候控制台文本通常是\\\"Reply from ... \\\" 而不通的时候文本是\\\"time out ... \\\" ,所以,在结果中进行字符串查找,即可知道该机器是否连通.\\r\\n\\n实现:Java代码如下:\\r\\n\\nString cmd=\\\"cmd.exe ping \\\";\\r\\n\\nString ipprefix=\\\"192.168.10.\\\";\\r\\n\\nint begin=101;\\r\\n\\nint end=200;\\r\\n\\nProcess p=null;\\r\\n\\nfor(int i=begin;i<end;i++){\\r\\n\\n\"},{\"page\":2,\"content\":\" p= Runtime.getRuntime().exec(cmd+i);\\r\\n\\n String line = null;\\r\\n\\n BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\\r\\n\\n while((line = reader.readLine()) != null)\\r\\n\\n {\\r\\n\\n     //Handling line , may logs it. \\r\\n\\n }\\r\\n\\nreader.close();\\r\\n\\np.destroy();\\r\\n\\n}\\r\\n\\n\"},{\"page\":3,\"content\":\"这段代码运行得很好,问题是为了运行这段代码,你还需要做一些额外的工作.这些额外的工作包括:\\r\\n\\n编写一个类文件\\r\\n\\n编写一个main方法\\r\\n\\n将之编译成字节代码\\r\\n\\n由于字节代码不能直接运行,你需要再写个小小的bat或者bash脚本来运行.\\r\\n\\n当然,用C/C++同样能完成这项工作.但C/C++不是跨平台语言.在这个足够简单的例子中也许看不出C/C++和Java实现的区别,但在一些更为复 杂的场景,比如要将连通与否的信息记录到网络数据库.由于Linux和Windows的网络接口实现方式不同,你不得不写两个函数的版本.用Java就没 有这样的顾虑.\\r\\n\\n同样的工作用Python实现如下:\\r\\n\\nimport subprocess\\r\\n\\ncmd=\\\"cmd.exe\\\"\\r\\n\\nbegin=101\\r\\n\\n\"},{\"page\":4,\"content\":\"end=200\\r\\n\\nwhile begin<end:\\r\\n\\np=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,\\r\\n\\n               stdin=subprocess.PIPE,\\r\\n\\n               stderr=subprocess.PIPE)\\r\\n\\np.stdin.write(\\\"ping 192.168.1.\\\"+str(begin)+\\\"\\\\n\\\")\\r\\n\\np.stdin.close()\\r\\n\\np.wait()\\r\\n\\nprint \\\"execution result: %s\\\"%p.stdout.read()\\r\\n\\n对比Java,Python的实现更为简洁,你编写的时间更快.你不需要写main函数,并且这个程序保存之后可以直接运行.另外,和Java一样,Python也是跨平台的.\\r\\n\\n\"},{\"page\":5,\"content\":\"有经验的C/Java程序员可能会争论说用C/Java写会比Python写得快.这个观点见仁见智.我的想法是当你同时掌握Java和Python之 后,你会发现用Python写这类程序的速度会比Java快上许多.例如操作本地文件时你仅需要一行代码而不需要Java的许多流包装类.各种语言有其天 然的适合的应用范围.用Python处理一些简短程序类似与操作系统的交互编程工作最省时省力.\\r\\n\\nPython应用场合\\r\\n\\n足够简单的任务,例如一些shell编程.如果你喜欢用Python设计大型商业网站或者设计复杂的游戏,悉听尊便.\\r\\n\\n2 快速入门\\r\\n\\n2.1 Hello world\\r\\n\\n安装完Python之后(我本机的版本是2.5.4),打开IDLE(Python GUI) , 该程序是Python语言解释器,你写的语句能够立即运行.我们写下一句著名的程序语句:\\r\\n\\nprint \\\"Hello,world!\\\" \\r\\n\\n并按回车.你就能看到这句被K&R引入到程序世界的名言.\\r\\n\\n\"},{\"page\":6,\"content\":\"在解释器中选择\\\"File\\\"--\\\"New Window\\\" 或快捷键 Ctrl+N , 打开一个新的编辑器.写下如下语句:\\r\\n\\nprint \\\"Hello,world!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n保存为a.py文件.按F5,你就可以看到程序的运行结果了.这是Python的第二种运行方式.\\r\\n\\n找到你保存的a.py文件,双击.也可以看到程序结果.Python的程序能够直接运行,对比Java,这是一个优势.\\r\\n\\n2.2 国际化支持\\r\\n\\n我们换一种方式来问候世界.新建一个编辑器并写如下代码:\\r\\n\\nprint \\\"欢迎来到奥运中国!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n\"},{\"page\":7,\"content\":\"在你保存代码的时候,Python会提示你是否改变文件的字符集,结果如下:\\r\\n\\n# -*- coding: cp936 -*- \\r\\n\\nprint \\\"欢迎来到奥运中国!\\\"\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n将该字符集改为我们更熟悉的形式:\\r\\n\\n# -*- coding: GBK -*- \\r\\n\\nprint \\\"欢迎来到奥运中国!\\\" # 使用中文的例子\\r\\n\\nraw_input(\\\"Press enter key to close this window\\u0001\\\"); \\r\\n\\n程序一样运行良好.\\r\\n\\n\"},{\"page\":8,\"content\":\"2.3 方便易用的计算器\\r\\n\\n用微软附带的计算器来计数实在太麻烦了.打开Python解释器,直接进行计算:\\r\\n\\na=100.0\\r\\n\\nb=201.1\\r\\n\\nc=2343\\r\\n\\nprint (a+b+c)/c\\r\\n\\n2.4 字符串,ASCII和UNICODE\\r\\n\\n可以如下打印出预定义输出格式的字符串:\\r\\n\\nprint \\\"\\\"\\\"\\r\\n\\n\"},{\"page\":9,\"content\":\"Usage: thingy [OPTIONS]\\r\\n\\n -h                        Display this usage message\\r\\n\\n -H hostname               Hostname to connect to\\r\\n\\n\\\"\\\"\\\" \\r\\n\\n字符串是怎么访问的?请看这个例子:\\r\\n\\nword=\\\"abcdefg\\\"\\r\\n\\na=word[2]\\r\\n\\nprint \\\"a is: \\\"+a\\r\\n\\nb=word[1:3]\\r\\n\\nprint \\\"b is: \\\"+b # index 1 and 2 elements of word.\\r\\n\\n\"},{\"page\":10,\"content\":\"c=word[:2]\\r\\n\\nprint \\\"c is: \\\"+c # index 0 and 1 elements of word.\\r\\n\\nd=word[0:]\\r\\n\\nprint \\\"d is: \\\"+d # All elements of word.\\r\\n\\ne=word[:2]+word[2:]\\r\\n\\nprint \\\"e is: \\\"+e # All elements of word.\\r\\n\\nf=word[-1]\\r\\n\\nprint \\\"f is: \\\"+f # The last elements of word.\\r\\n\\ng=word[-4:-2]\\r\\n\\nprint \\\"g is: \\\"+g # index 3 and 4 elements of word.\\r\\n\\n\"},{\"page\":11,\"content\":\"h=word[-2:]\\r\\n\\nprint \\\"h is: \\\"+h # The last two elements.\\r\\n\\ni=word[:-2]\\r\\n\\nprint \\\"i is: \\\"+i # Everything except the last two characters\\r\\n\\nl=len(word)\\r\\n\\nprint \\\"Length of word is: \\\"+ str(l) \\r\\n\\n请注意ASCII和UNICODE字符串的区别:\\r\\n\\nprint \\\"Input your Chinese name:\\\"\\r\\n\\ns=raw_input(\\\"Press enter to be continued\\u0001\\\");\\r\\n\\nprint \\\"Your name is \\u0001 : \\\" +s;\\r\\n\\n\"},{\"page\":12,\"content\":\"l=len(s)\\r\\n\\nprint \\\"Length of your Chinese name in asc codes is:\\\"+str(l);\\r\\n\\na=unicode(s,\\\"GBK\\\")\\r\\n\\nl=len(a)\\r\\n\\nprint \\\"I\'m sorry we should use unicode char!Characters number of your Chinese \\\\\\r\\n\\nname in unicode is:\\\"+str(l); \\r\\n\\n2.5 使用List\\r\\n\\n类似Java里的List,这是一种方便易用的数据类型:\\r\\n\\nword=[\'a\',\'b\',\'c\',\'d\',\'e\',\'f\',\'g\']\\r\\n\\n\"},{\"page\":13,\"content\":\"a=word[2]\\r\\n\\nprint \\\"a is: \\\"+a\\r\\n\\nb=word[1:3]\\r\\n\\nprint \\\"b is: \\\"\\r\\n\\nprint b # index 1 and 2 elements of word.\\r\\n\\nc=word[:2]\\r\\n\\nprint \\\"c is: \\\"\\r\\n\\nprint c # index 0 and 1 elements of word.\\r\\n\\nd=word[0:]\\r\\n\\nprint \\\"d is: \\\"\\r\\n\\n\"},{\"page\":14,\"content\":\"print d # All elements of word.\\r\\n\\ne=word[:2]+word[2:]\\r\\n\\nprint \\\"e is: \\\"\\r\\n\\nprint e # All elements of word.\\r\\n\\nf=word[-1]\\r\\n\\nprint \\\"f is: \\\"\\r\\n\\nprint f # The last elements of word.\\r\\n\\ng=word[-4:-2]\\r\\n\\nprint \\\"g is: \\\"\\r\\n\\nprint g # index 3 and 4 elements of word.\\r\\n\\n\"},{\"page\":15,\"content\":\"h=word[-2:]\\r\\n\\nprint \\\"h is: \\\"\\r\\n\\nprint h # The last two elements.\\r\\n\\ni=word[:-2]\\r\\n\\nprint \\\"i is: \\\"\\r\\n\\nprint i # Everything except the last two characters\\r\\n\\nl=len(word)\\r\\n\\nprint \\\"Length of word is: \\\"+ str(l)\\r\\n\\nprint \\\"Adds new element\\u0001\\\"\\r\\n\\nword.append(\'h\')\\r\\n\\n\"},{\"page\":16,\"content\":\"print word \\r\\n\\n2.6 条件和循环语句\\r\\n\\n# Multi-way decision\\r\\n\\nx=int(raw_input(\\\"Please enter an integer:\\\"))\\r\\n\\nif x<0:\\r\\n\\nx=0\\r\\n\\nprint \\\"Negative changed to zero\\\"\\r\\n\\nelif x==0:\\r\\n\\nprint \\\"Zero\\\"\\r\\n\\n\"},{\"page\":17,\"content\":\"else:\\r\\n\\nprint \\\"More\\\"\\r\\n\\n# Loops List\\r\\n\\na = [\'cat\', \'window\', \'defenestrate\']\\r\\n\\nfor x in a:\\r\\n\\nprint x, len(x)\\r\\n\\n2.7 如何定义函数\\r\\n\\n# Define and invoke function.\\r\\n\\ndef sum(a,b):\\r\\n\\n\"},{\"page\":18,\"content\":\"return a+b\\r\\n\\nfunc = sum\\r\\n\\nr = func(5,6)\\r\\n\\nprint r\\r\\n\\n# Defines function with default argument\\r\\n\\ndef add(a,b=2):\\r\\n\\nreturn a+b\\r\\n\\nr=add(1)\\r\\n\\nprint r\\r\\n\\nr=add(1,5)\\r\\n\\n\"},{\"page\":19,\"content\":\"print r \\r\\n\\n并且,介绍一个方便好用的函数:\\r\\n\\n# The range() function\\r\\n\\na =range(5,10)\\r\\n\\nprint a\\r\\n\\na = range(-2,-7)\\r\\n\\nprint a\\r\\n\\na = range(-7,-2)\\r\\n\\nprint a\\r\\n\\na = range(-2,-11,-3) # The 3rd parameter stands for step\\r\\n\\n\"},{\"page\":20,\"content\":\"print a \\r\\n\\n2.8 文件I/O\\r\\n\\nspath=\\\"D:/download/baa.txt\\\"\\r\\n\\nf=open(spath,\\\"w\\\") # Opens file for writing.Creates this file doesn\'t exist.\\r\\n\\nf.write(\\\"First line 1.\\\\n\\\")\\r\\n\\nf.writelines(\\\"First line 2.\\\")\\r\\n\\nf.close()\\r\\n\\nf=open(spath,\\\"r\\\") # Opens file for reading\\r\\n\\nfor line in f:\\r\\n\\n\"},{\"page\":21,\"content\":\"print line\\r\\n\\nf.close() \\r\\n\\n2.9 异常处理\\r\\n\\ns=raw_input(\\\"Input your age:\\\")\\r\\n\\nif s ==\\\"\\\":\\r\\n\\nraise Exception(\\\"Input must no be empty.\\\")\\r\\n\\ntry:\\r\\n\\ni=int(s)\\r\\n\\nexcept ValueError:\\r\\n\\n\"},{\"page\":22,\"content\":\"print \\\"Could not convert data to an integer.\\\"\\r\\n\\nexcept:\\r\\n\\nprint \\\"Unknown exception!\\\"\\r\\n\\nelse: # It is useful for code that must be executed if the try clause does not raise an exception\\r\\n\\nprint \\\"You are %d\\\" % i,\\\" years old\\\"\\r\\n\\nfinally: # Clean up action\\r\\n\\nprint \\\"Goodbye!\\\" \\r\\n\\n2.10 类和继承\\r\\n\\nclass Base:\\r\\n\\n\"},{\"page\":23,\"content\":\"def __init__(self):\\r\\n\\n    self.data = []\\r\\n\\ndef add(self, x):\\r\\n\\n    self.data.append(x)\\r\\n\\ndef addtwice(self, x):\\r\\n\\n    self.add(x)\\r\\n\\n    self.add(x)\\r\\n\\n# Child extends Base\\r\\n\\nclass Child(Base):\\r\\n\\ndef plus(self,a,b):\\r\\n\\n\"},{\"page\":24,\"content\":\"    return a+b\\r\\n\\noChild =Child()\\r\\n\\noChild.add(\\\"str1\\\")\\r\\n\\nprint oChild.data\\r\\n\\nprint oChild.plus(2,3) \\r\\n\\n2.11 包机制\\r\\n\\n每一个.py文件称为一个module,module之间可以互相导入.请参看以下例子:\\r\\n\\n# a.py\\r\\n\\ndef add_func(a,b):\\r\\n\\n\"},{\"page\":25,\"content\":\"return a+b \\r\\n\\n# b.py\\r\\n\\nfrom a import add_func # Also can be : import a\\r\\n\\nprint \\\"Import add_func from module a\\\"\\r\\n\\nprint \\\"Result of 1 plus 2 is: \\\"\\r\\n\\nprint add_func(1,2)    # If using \\\"import a\\\" , then here should be \\\"a.add_func\\\" \\r\\n\\nmodule可以定义在包里面.Python定义包的方式稍微有点古怪,假设我们有一个parent文件夹,该文件夹有一个child子文件 夹.child中有一个module a.py . 如何让Python知道这个文件层次结构?很简单,每个目录都放一个名为_init_.py 的文件.该文件内容可以为空.这个层次结构如下所示: \\r\\n\\nparent \\r\\n\\n--__init_.py\\r\\n\\n--child\\r\\n\\n\"},{\"page\":26,\"content\":\"-- __init_.py\\r\\n\\n--a.py\\r\\n\\nb.py \\r\\n\\n那么Python如何找到我们定义的module?在标准包sys中,path属性记录了Python的包路径.你可以将之打印出来:\\r\\n\\nimport sys\\r\\n\\nprint sys.path\\r\\n\\n通常我们可以将module的包路径放到环境变量PYTHONPATH中,该环境变量会自动添加到sys.path属性.另一种方便的方法是编程中直接指定我们的module路径到sys.path 中:\\r\\n\\nimport sys\\r\\n\\nsys.path.append(\'D:\\\\\\\\download\')\\r\\n\\nfrom parent.child.a import add_func\\r\\n\\n\"},{\"page\":27,\"content\":\"print sys.path\\r\\n\\nprint \\\"Import add_func from module a\\\"\\r\\n\\nprint \\\"Result of 1 plus 2 is: \\\"\\r\\n\\nprint add_func(1,2) \\r\\n\\n总结\\r\\n\\n你会发现这个教程相当的简单.许多Python特性在代码中以隐含方式提出,这些特性包括:Python不需要显式声明数据类型,关键字说明,字符串函数 的解释等等.我认为一个熟练的程序员应该对这些概念相当了解,这样在你挤出宝贵的一小时阅读这篇短短的教程之后,你能够通过已有知识的迁移类比尽快熟悉 Python,然后尽快能用它开始编程.\\r\\n\\n当然,1小时学会Python颇有哗众取宠之嫌.确切的说,编程语言包括语法和标准库.语法相当于武术招式,而标准库应用实践经验则类似于内功,需要长期 锻炼.Python学习了Java的长处,提供了大量极方便易用的标准库供程序员\\\"拿来主义\\\".(这也是Python成功的原因),在开篇我们看到了 Python如何调用Windows cmd的例子,以后我会尽量写上各标准库的用法和一些应用技巧,让大家真正掌握Python.\\r\\n\\n但不管怎样,至少你现在会用Python代替繁琐的批处理写程序了.希望那些真的能在一小时内读完本文并开始使用Python的程序员会喜欢这篇小文章,谢谢!\\r\\n\\n\"}],\"totalPages\":27}', 4);
INSERT INTO `course_chapters` VALUES (31, 10, 'sell入门', 2, 'DOCUMENT', 0, 'documents/1752219859738_(完整word版)java知识总结完整版-推荐文档.doc', '00:10:00', 13467, '2025-07-11 15:44:19', '{\"pages\":[],\"totalPages\":0}', 4);

-- ----------------------------
-- Table structure for exam
-- ----------------------------
DROP TABLE IF EXISTS `exam`;
CREATE TABLE `exam`  (
  `exam_id` int NOT NULL AUTO_INCREMENT,
  `course_id` int NOT NULL,
  `teacher_id` int NOT NULL,
  `exam_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `exam_count` int NOT NULL,
  `start_time` timestamp NULL DEFAULT NULL,
  `end_time` timestamp NULL DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`exam_id`) USING BTREE,
  INDEX `course_id`(`course_id` ASC) USING BTREE,
  INDEX `teacher_id`(`teacher_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 49 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of exam
-- ----------------------------
INSERT INTO `exam` VALUES (46, 3, 4, 'Python入门与实战', 12, '2025-07-11 18:40:43', '2025-07-11 20:40:43', '2025-07-11 18:41:43');
INSERT INTO `exam` VALUES (48, 3, 4, 'Python入门与实战第二期', 10, '2025-07-11 19:03:01', '2025-07-11 21:03:01', '2025-07-11 19:04:35');

-- ----------------------------
-- Table structure for exam_papers
-- ----------------------------
DROP TABLE IF EXISTS `exam_papers`;
CREATE TABLE `exam_papers`  (
  `paper_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `exam_id` int NOT NULL,
  `answer` json NULL,
  `score` int NULL DEFAULT NULL,
  `submit_time` timestamp NULL DEFAULT NULL,
  `mark_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `auto_score` int NULL DEFAULT 0 COMMENT '自动判分分数，仅客观题',
  `final_score` int NULL DEFAULT NULL COMMENT '最终分数，老师批改后才有',
  `is_reviewed` tinyint(1) NULL DEFAULT 0 COMMENT '是否已批改，0未批改，1已批改',
  `review_time` datetime NULL DEFAULT NULL COMMENT '老师批改时间',
  `subjective_scores` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '主观题得分，JSON格式，key为questionId，value为得分',
  PRIMARY KEY (`paper_id`) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE,
  INDEX `exam_id`(`exam_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 46 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of exam_papers
-- ----------------------------
INSERT INTO `exam_papers` VALUES (41, 1, 46, '{\"140\": \"false\", \"141\": \"false\", \"142\": \"A,B,C\", \"143\": \"C\", \"144\": \"Java 的基本数据类型（如int、char、boolean等）都有对应的包装类（如Integer、Character、Boolean）。包装类型缓存是指系统预先创建并缓存一定范围内的包装类对象，当需要使用这些值时，直接返回缓存的对象而不是创建新实例。\", \"145\": \"A,B,C\", \"146\": \"GIL 是全局解释器锁（Global Interpreter Lock）的缩写，是 Python 解释器（如 CPython）为了保证线程安全而引入的一种机制。它的核心作用是：同一时刻，只允许一个线程执行 Python 字节码。\", \"147\": \"A,B,D\", \"148\": \"A\", \"149\": \"false\", \"150\": \"C\", \"151\": \"作为一名正处于职业上升期的从业者，我的职业规划始终围绕 “深耕核心能力、拓展多维边界、实现价值跃迁” 三个维度展开，既有脚踏实地的路径设计，也有面向长期的成长野心：\\n短期 1-3 年，我会聚焦于 **“成为领域内的‘问题解决专家’”**。一方面，深耕手头的核心业务，比如在 [可替换为具体领域，如 “数据分析”“用户运营”“软件开发”] 中，吃透每一个流程细节，把 “常规工作做到极致，复杂问题做出亮点”—— 比如通过优化 [具体工作方法，如 “数据模型算法”“用户分层策略”“代码复用逻辑”]，让核心指标（如效率、精度、用户满意度）提升 30% 以上；另一方面，主动承接跨部门协作项目，在对接中吃透上下游链路，积累 “从业务需求到落地执行” 的全流程经验，让自己从 “会做事” 变成 “能扛事”。\\n中期 3-5 年，目标是 **“从执行者升级为‘价值创造者’”**。在深耕专业的基础上，横向拓展 “跨界整合能力”：比如在技术岗深耕的同时，补充商业分析知识，能看懂业务报表背后的逻辑；在业务岗精进的同时，学习基础技术思维，理解技术落地的可行性边界。这个阶段，我希望能牵头负责 [具体量级，如 “百万级用户项目”“年度核心产品线”]，不仅能拿出 “解决问题的方案”，更能提出 “创造新价值的思路”—— 比如通过挖掘 [潜在机会，如 “用户未被满足的隐性需求”“技术与业务结合的新场景”]，孵化出 1-2 个能带来增量收益的创新项目，成为团队中 “既能啃硬骨头，又能开新路子” 的核心角色。\\n长期 5 年以上，我希望成为 **“行业生态中的‘连接者与赋能者’”**。要么在垂直领域做到顶尖，成为 [行业权威，如 “某细分技术领域的专家顾问”“某类业务模式的标杆操盘手”]，能用自己的经验为行业标准制定提供参考；要么横向拓展到更宏观的层面，比如从业务岗转型做战略规划，从技术岗转向团队管理，通过搭建体系、培养新人，让个人能力沉淀为组织能力。最终，无论是深耕专业还是拓展维度，都希望自己的工作能跳出 “完成 KPI” 的范畴，真正能为行业解决一些实际问题，或是为用户创造一些不可替代的价值 —— 毕竟，职业的终极意义，永远是 “用自己的能力，让世界有一点点不一样”。\\n这条路径里，没有虚无缥缈的口号，每一步都踩着 “解决具体问题、创造真实价值” 的脚印。我相信，扎实走好当下的每一步，长期主义的复利总会在不经意间给出惊喜。\\n\"}', 70, '2025-07-11 18:47:21', '2025-07-11 18:47:21', 70, 100, 1, '2025-07-11 18:48:25', '{\"144\":10,\"146\":10,\"151\":10}');
INSERT INTO `exam_papers` VALUES (45, 7, 48, '{\"176\": \"false\", \"177\": \"false\", \"178\": \"A,B\", \"179\": \"C\", \"180\": \"测试\", \"181\": \"A,B,C\", \"182\": \"测试\", \"183\": \"A,B,D\", \"184\": \"A\", \"185\": \"C\"}', 60, '2025-07-11 19:28:07', '2025-07-11 19:28:07', 60, 90, 1, '2025-07-11 19:28:39', '{\"180\":20,\"182\":10}');

-- ----------------------------
-- Table structure for exam_questions
-- ----------------------------
DROP TABLE IF EXISTS `exam_questions`;
CREATE TABLE `exam_questions`  (
  `question_id` int NOT NULL AUTO_INCREMENT,
  `exam_id` int NOT NULL,
  `question_type` enum('SINGLE_CHOICE','MULTIPLE_CHOICE','JUDGE','TEXT') CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `question_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `options` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `correct_answer` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `score` int NOT NULL,
  `difficulty` enum('EASY','MEDIUM','HARD') CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `explanation` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '题目解析',
  PRIMARY KEY (`question_id`) USING BTREE,
  INDEX `exam_id`(`exam_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 186 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of exam_questions
-- ----------------------------
INSERT INTO `exam_questions` VALUES (140, 46, 'JUDGE', 'Python 3.x和Python 2.x兼容。', '', 'false', 5, 'MEDIUM', '2025-07-11 18:42:53', 'Python 3.x不向后兼容Python 2.x，两者存在语法和库的差异。');
INSERT INTO `exam_questions` VALUES (141, 46, 'JUDGE', 'Python是一种编译型语言。', '', 'false', 5, 'MEDIUM', '2025-07-11 18:42:53', 'Python是解释型语言，代码在运行时由解释器逐行翻译成机器码。');
INSERT INTO `exam_questions` VALUES (142, 46, 'MULTIPLE_CHOICE', 'Java中的GC机制有哪些分类\nA. 新生代&#B.老年代&#C.整堆回收&#D.不回收', 'A. 新生代\nB.老年代\nC.整堆回收\nD.不回收', 'A,B,C', 10, 'MEDIUM', '2025-07-11 18:42:53', '');
INSERT INTO `exam_questions` VALUES (143, 46, 'SINGLE_CHOICE', '以下哪个不是Python的内置数据类型？', 'A:list\nB:tuple\nC:array\nD:dict', 'C', 10, 'MEDIUM', '2025-07-11 18:42:53', 'array不是Python的内置数据类型，需要通过NumPy库导入。');
INSERT INTO `exam_questions` VALUES (144, 46, 'TEXT', '简述包装类型缓存', '', '创建包装类型数组，里面有默认值，等程序需要访问的时候直接去拿就好，不用再创建。', 10, 'MEDIUM', '2025-07-11 18:42:53', '创建包装类型数组，里面有默认值，等程序需要访问的时候直接去拿就好，不用再创建。');
INSERT INTO `exam_questions` VALUES (145, 46, 'MULTIPLE_CHOICE', 'Python的装饰器可以用于？', 'A:日志记录\nB:性能测试\nC:权限校验\nD:数据加密', 'A,B,C', 10, 'MEDIUM', '2025-07-11 18:42:53', '装饰器可以用于AOP编程，常见场景包括日志记录、性能测试和权限校验等。');
INSERT INTO `exam_questions` VALUES (146, 46, 'TEXT', '简述Python中GIL的概念。', '', 'GIL（Global Interpreter Lock）是Python解释器中的一个机制，它确保同一时刻只有一个线程执行Python字节码。这使得Python多线程在CPU密集型任务中无法充分利用多核处理器。', 10, 'HARD', '2025-07-11 18:42:53', 'GIL是CPython解释器的特性，在I/O密集型任务中影响较小，但会限制CPU密集型任务的性能。');
INSERT INTO `exam_questions` VALUES (147, 46, 'MULTIPLE_CHOICE', '以下哪些是Python的框架？', 'A:Django\nB:Flask\nC:Spring\nD:Tornado', 'A,B,D', 15, 'MEDIUM', '2025-07-11 18:42:53', 'Spring是Java的框架，其他选项均为Python框架。');
INSERT INTO `exam_questions` VALUES (148, 46, 'SINGLE_CHOICE', 'Python的创始人是谁？', 'A:Guido van Rossum\nB:James Gosling\nC:Bjarne Stroustrup\nD:Larry Page', 'A', 5, 'MEDIUM', '2025-07-11 18:42:53', 'Python由荷兰人Guido van Rossum于1989年圣诞节期间创建。');
INSERT INTO `exam_questions` VALUES (149, 46, 'JUDGE', 'JAVA是一种脚本？', '', 'false', 5, 'MEDIUM', '2025-07-11 18:42:53', '。。。。');
INSERT INTO `exam_questions` VALUES (150, 46, 'SINGLE_CHOICE', '以下哪个是Python的注释符号？', 'A://\nB:/* */\nC:#\nD:--', 'C', 5, 'EASY', '2025-07-11 18:42:53', 'Python使用#作为单行注释符号。');
INSERT INTO `exam_questions` VALUES (151, 46, 'TEXT', '你的职业规划是什么？', '', '你的职业规划是什么？', 10, 'HARD', '2025-07-11 18:42:53', '你的职业规划是什么？');
INSERT INTO `exam_questions` VALUES (176, 48, 'JUDGE', 'Python 3.x和Python 2.x兼容。', '', 'false', 5, 'MEDIUM', '2025-07-11 19:04:35', 'Python 3.x不向后兼容Python 2.x，两者存在语法和库的差异。');
INSERT INTO `exam_questions` VALUES (177, 48, 'JUDGE', 'Python是一种编译型语言。', '', 'false', 10, 'MEDIUM', '2025-07-11 19:04:35', 'Python是解释型语言，代码在运行时由解释器逐行翻译成机器码。');
INSERT INTO `exam_questions` VALUES (178, 48, 'MULTIPLE_CHOICE', 'Java中的GC机制有哪些分类\nA. 新生代&#B.老年代&#C.整堆回收&#D.不回收', 'A. 新生代\nB.老年代\nC.整堆回收\nD.不回收', 'A,B,C', 10, 'MEDIUM', '2025-07-11 19:04:35', '');
INSERT INTO `exam_questions` VALUES (179, 48, 'SINGLE_CHOICE', '以下哪个不是Python的内置数据类型？', 'A:list\nB:tuple\nC:array\nD:dict', 'C', 10, 'MEDIUM', '2025-07-11 19:04:35', 'array不是Python的内置数据类型，需要通过NumPy库导入。');
INSERT INTO `exam_questions` VALUES (180, 48, 'TEXT', '简述包装类型缓存', '', '创建包装类型数组，里面有默认值，等程序需要访问的时候直接去拿就好，不用再创建。', 20, 'MEDIUM', '2025-07-11 19:04:35', '创建包装类型数组，里面有默认值，等程序需要访问的时候直接去拿就好，不用再创建。');
INSERT INTO `exam_questions` VALUES (181, 48, 'MULTIPLE_CHOICE', 'Python的装饰器可以用于？', 'A:日志记录\nB:性能测试\nC:权限校验\nD:数据加密', 'A,B,C', 10, 'MEDIUM', '2025-07-11 19:04:35', '装饰器可以用于AOP编程，常见场景包括日志记录、性能测试和权限校验等。');
INSERT INTO `exam_questions` VALUES (182, 48, 'TEXT', '简述Python中GIL的概念。', '', 'GIL（Global Interpreter Lock）是Python解释器中的一个机制，它确保同一时刻只有一个线程执行Python字节码。这使得Python多线程在CPU密集型任务中无法充分利用多核处理器。', 10, 'HARD', '2025-07-11 19:04:35', 'GIL是CPython解释器的特性，在I/O密集型任务中影响较小，但会限制CPU密集型任务的性能。');
INSERT INTO `exam_questions` VALUES (183, 48, 'MULTIPLE_CHOICE', '以下哪些是Python的框架？', 'A:Django\nB:Flask\nC:Spring\nD:Tornado', 'A,B,D', 15, 'MEDIUM', '2025-07-11 19:04:35', 'Spring是Java的框架，其他选项均为Python框架。');
INSERT INTO `exam_questions` VALUES (184, 48, 'SINGLE_CHOICE', 'Python的创始人是谁？', 'A:Guido van Rossum\nB:James Gosling\nC:Bjarne Stroustrup\nD:Larry Page', 'A', 5, 'MEDIUM', '2025-07-11 19:04:35', 'Python由荷兰人Guido van Rossum于1989年圣诞节期间创建。');
INSERT INTO `exam_questions` VALUES (185, 48, 'SINGLE_CHOICE', '以下哪个是Python的注释符号？', 'A://\nB:/* */\nC:#\nD:--', 'C', 5, 'EASY', '2025-07-11 19:04:35', 'Python使用#作为单行注释符号。');

-- ----------------------------
-- Table structure for favorite
-- ----------------------------
DROP TABLE IF EXISTS `favorite`;
CREATE TABLE `favorite`  (
  `favorite_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `course_id` int NOT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `is_cancel` int NOT NULL COMMENT '1是收藏，0是取消收藏',
  PRIMARY KEY (`favorite_id`) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE,
  INDEX `course_id`(`course_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of favorite
-- ----------------------------
INSERT INTO `favorite` VALUES (2, 1, 5, '2025-07-07 11:00:43', 0);
INSERT INTO `favorite` VALUES (3, 1, 3, '2025-07-07 11:11:20', 0);

-- ----------------------------
-- Table structure for forum_replies
-- ----------------------------
DROP TABLE IF EXISTS `forum_replies`;
CREATE TABLE `forum_replies`  (
  `reply_id` int NOT NULL AUTO_INCREMENT,
  `topic_id` int NOT NULL,
  `user_id` int NOT NULL,
  `reply_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `parent_reply_id` int NULL DEFAULT NULL COMMENT '父回复ID',
  `reply_to_user_id` int NULL DEFAULT NULL COMMENT '被回复用户ID',
  `reply_to_user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '被回复用户昵称',
  PRIMARY KEY (`reply_id`) USING BTREE,
  INDEX `topic_id`(`topic_id` ASC) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 180 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_replies
-- ----------------------------
INSERT INTO `forum_replies` VALUES (71, 1, 5, '可以考虑使用Dask，它是一个并行计算库，提供了类似pandas的API，但可以处理比内存更大的数据集。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (72, 1, 6, '或者使用Apache Spark，它对大数据处理有很好的支持，并且有Python API(PySpark)。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (73, 1, 2, '@5 我试过Dask，但在处理复杂计算时性能不如预期，还有其他建议吗？', '2025-07-05 14:33:04', 1, 5, 'user5');
INSERT INTO `forum_replies` VALUES (74, 1, 5, '@2 对于复杂计算，可以考虑分块处理数据，每次只加载一部分到内存中处理。', '2025-07-05 14:33:04', 3, 2, 'user2');
INSERT INTO `forum_replies` VALUES (75, 2, 1, '首先应该为查询条件字段添加索引，避免全表扫描。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (76, 2, 3, '检查查询是否可以优化，避免SELECT *，只选择需要的字段。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (77, 2, 4, '考虑数据库分区，对于大表可以提高查询效率。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (78, 2, 6, '@1 我已经为查询字段添加了索引，但性能提升不明显，还有其他可能的原因吗？', '2025-07-05 14:33:04', 5, 1, 'user1');
INSERT INTO `forum_replies` VALUES (79, 2, 1, '@6 检查是否有多个条件的组合查询，如果是，可以考虑创建复合索引。', '2025-07-05 14:33:04', 8, 6, 'user6');
INSERT INTO `forum_replies` VALUES (80, 3, 4, '函数组件更简洁，类组件可以使用state和生命周期方法。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (81, 3, 5, '函数组件是无状态的，类组件是有状态的。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (82, 3, 6, '使用React Hooks后，函数组件也可以使用state和其他特性，现在更推荐使用函数组件。', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (83, 4, 1, '使用名词复数表示资源集合，如/users', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (84, 4, 2, '使用HTTP动词表示操作，如GET, POST, PUT, DELETE', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (85, 4, 3, '设计合理的错误处理和状态码', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (86, 4, 5, '考虑API版本控制', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (87, 5, 6, '选择适合你技术栈的测试框架，如JUnit(Java), pytest(Python), Jest(JavaScript)', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (88, 5, 1, '编写可测试的代码，避免复杂的依赖', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (89, 5, 2, '测试边界条件和异常情况', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (90, 5, 3, '保持测试独立和快速执行', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (91, 6, 4, '我们团队使用Git Flow，适合复杂的发布流程', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (92, 6, 5, 'GitHub Flow更简单，适合持续集成和快速迭代的项目', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (93, 6, 6, 'GitLab Flow结合了两者的优点，提供了更多的灵活性', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (94, 7, 1, '微服务的优势包括独立部署、技术异构性和可扩展性', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (95, 7, 2, '但微服务也增加了系统复杂度和运维成本', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (96, 7, 3, '适合大型项目和需要快速迭代的团队', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (97, 8, 4, '使用集群模式运行Node.js应用，充分利用多核CPU', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (98, 8, 5, '优化异步代码，避免阻塞事件循环', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (99, 8, 6, '使用性能分析工具如Chrome DevTools分析瓶颈', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (100, 9, 1, '推荐《算法导论》这本书，虽然有点难但非常全面', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (101, 9, 2, 'LeetCode和HackerRank是很好的练习平台', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (102, 9, 3, '从简单的算法开始，如排序和搜索', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (103, 9, 4, '理解时间复杂度和空间复杂度的概念', '2025-07-05 14:33:04', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (116, 13, 3, '先学习基础知识，再通过实践项目巩固学习。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (117, 13, 4, '阅读该语言的经典书籍和官方文档。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (118, 13, 5, '参与开源项目，学习其他开发者的代码。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (119, 13, 6, '尝试用该语言重构已有的项目。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (120, 14, 1, '遵循数据库范式，但不要过度范式化。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (121, 14, 2, '设计合理的索引，提高查询性能。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (122, 14, 3, '考虑数据库的扩展性和未来增长。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (123, 14, 4, '使用工具如ER图辅助数据库设计。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (124, 15, 5, '压缩和合并CSS、JavaScript文件，减少HTTP请求。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (125, 15, 6, '优化图片资源，使用合适的图片格式和压缩。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (126, 15, 1, '使用CDN分发静态资源，提高加载速度。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (127, 15, 2, '实现懒加载，延迟加载非关键资源。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (128, 15, 3, '使用浏览器缓存，减少重复请求。', '2025-07-05 14:34:11', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (129, 16, 1, '考虑服务发现、负载均衡和容错机制。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (130, 16, 2, '设计清晰的服务边界和通信协议。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (131, 16, 3, '实现分布式日志和监控。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (132, 16, 4, '处理数据一致性和事务问题。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (133, 17, 5, '使用JMeter、Gatling等工具进行负载测试。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (134, 17, 6, '监控关键指标如响应时间、吞吐量和错误率。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (135, 17, 1, '在不同负载条件下测试，识别性能瓶颈。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (136, 17, 2, '使用分析工具找出性能热点。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (137, 18, 3, '使用名词复数表示资源集合，如/users。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (138, 18, 4, '使用HTTP动词表示操作，如GET, POST, PUT, DELETE。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (139, 18, 5, '设计合理的错误处理和状态码。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (140, 18, 6, '考虑API版本控制和文档。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (141, 19, 1, '避免SQL注入、XSS攻击等常见安全漏洞。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (142, 19, 2, '使用参数化查询和输入验证。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (143, 19, 3, '保护敏感数据，如密码加密。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (144, 19, 4, '遵循安全编码规范，定期更新依赖。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (145, 20, 5, '编写Dockerfile定义应用环境。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (146, 20, 6, '使用docker-compose管理多容器应用。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (147, 20, 1, '遵循最小权限原则配置容器。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (148, 20, 2, '使用CI/CD自动化构建和部署流程。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (149, 20, 3, '监控容器性能和资源使用。', '2025-07-05 14:36:42', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (150, 16, 1, '考虑服务发现、负载均衡和容错机制。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (151, 16, 2, '设计清晰的服务边界和通信协议。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (152, 16, 3, '实现分布式日志和监控。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (153, 16, 4, '处理数据一致性和事务问题。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (154, 17, 5, '使用JMeter、Gatling等工具进行负载测试。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (155, 17, 6, '监控关键指标如响应时间、吞吐量和错误率。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (156, 17, 1, '在不同负载条件下测试，识别性能瓶颈。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (157, 17, 2, '使用分析工具找出性能热点。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (158, 18, 3, '使用名词复数表示资源集合，如/users。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (159, 18, 4, '使用HTTP动词表示操作，如GET, POST, PUT, DELETE。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (160, 18, 5, '设计合理的错误处理和状态码。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (161, 18, 6, '考虑API版本控制和文档。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (162, 19, 1, '避免SQL注入、XSS攻击等常见安全漏洞。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (163, 19, 2, '使用参数化查询和输入验证。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (164, 19, 3, '保护敏感数据，如密码加密。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (165, 19, 4, '遵循安全编码规范，定期更新依赖。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (166, 20, 5, '编写Dockerfile定义应用环境。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (167, 20, 6, '使用docker-compose管理多容器应用。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (168, 20, 1, '遵循最小权限原则配置容器。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (169, 20, 2, '使用CI/CD自动化构建和部署流程。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (170, 20, 3, '监控容器性能和资源使用。', '2025-07-05 14:39:36', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (178, 73, 1, '基本类型可以用作局部变量。包装类型可以用作成员变量、方法参数等', '2025-07-07 10:59:25', NULL, NULL, NULL);
INSERT INTO `forum_replies` VALUES (179, 21, 1, 'guard let和if let的区别？', '2025-07-11 17:01:18', NULL, NULL, NULL);

-- ----------------------------
-- Table structure for forum_topics
-- ----------------------------
DROP TABLE IF EXISTS `forum_topics`;
CREATE TABLE `forum_topics`  (
  `topic_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `topic_title` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `topic_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `topic_category` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `reply_count` int NULL DEFAULT 0,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`topic_id`) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 74 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of forum_topics
-- ----------------------------
INSERT INTO `forum_topics` VALUES (13, 1, 'Java多线程编程最佳实践', '最近在学习Java多线程，想请教一下在实际项目中如何避免死锁？有什么好的设计模式推荐吗？', '编程语言', 1, '2025-07-01 10:30:00');
INSERT INTO `forum_topics` VALUES (14, 2, 'Python异步编程asyncio详解', 'asyncio的协程机制和传统线程有什么区别？在处理IO密集型任务时性能提升明显吗？', '1', 0, '2025-07-01 11:15:00');
INSERT INTO `forum_topics` VALUES (15, 3, 'JavaScript ES6+新特性总结', '箭头函数、解构赋值、Promise这些新特性在实际开发中如何合理使用？', '1', 0, '2025-07-01 12:00:00');
INSERT INTO `forum_topics` VALUES (16, 4, 'Go语言并发编程goroutine', 'goroutine相比传统线程有什么优势？如何控制goroutine的数量避免资源耗尽？', '1', 0, '2025-07-01 13:45:00');
INSERT INTO `forum_topics` VALUES (17, 5, 'C++智能指针使用指南', 'unique_ptr、shared_ptr、weak_ptr分别适用于什么场景？如何避免循环引用？', '1', 0, '2025-07-01 14:20:00');
INSERT INTO `forum_topics` VALUES (18, 6, 'Rust所有权系统理解', 'Rust的所有权、借用、生命周期概念比较抽象，有什么好的学习方法推荐？', '1', 0, '2025-07-01 15:10:00');
INSERT INTO `forum_topics` VALUES (19, 1, 'TypeScript类型系统进阶', '泛型、联合类型、交叉类型在实际项目中的应用场景有哪些？', '1', 0, '2025-07-01 16:30:00');
INSERT INTO `forum_topics` VALUES (20, 2, 'Kotlin协程vs Java线程', 'Kotlin协程在Android开发中的优势是什么？迁移成本高吗？', '1', 0, '2025-07-01 17:15:00');
INSERT INTO `forum_topics` VALUES (21, 3, 'Swift可选类型最佳实践', 'Swift的Optional类型如何优雅处理？guard let和if let的区别？', '1', 1, '2025-07-01 18:00:00');
INSERT INTO `forum_topics` VALUES (22, 4, 'PHP8新特性解析', 'PHP8的JIT编译器、联合类型、命名参数对性能提升有多大？', '1', 0, '2025-07-01 19:30:00');
INSERT INTO `forum_topics` VALUES (23, 5, 'Spring Boot微服务架构设计', '如何设计一个可扩展的微服务架构？服务发现、配置管理、熔断器如何集成？', '2', 0, '2025-07-02 09:15:00');
INSERT INTO `forum_topics` VALUES (24, 6, 'React Hooks性能优化', 'useMemo、useCallback、useRef在什么情况下使用？如何避免不必要的重渲染？', '2', 0, '2025-07-02 10:00:00');
INSERT INTO `forum_topics` VALUES (25, 1, 'Vue3 Composition API实战', 'Composition API相比Options API的优势是什么？如何组织大型组件的逻辑？', '2', 0, '2025-07-02 11:30:00');
INSERT INTO `forum_topics` VALUES (26, 2, 'Django REST framework权限控制', '如何实现细粒度的API权限控制？JWT token和Session认证的选择？', '2', 0, '2025-07-02 12:15:00');
INSERT INTO `forum_topics` VALUES (27, 3, 'Express.js中间件开发', '如何开发自定义中间件？错误处理中间件的最佳实践是什么？', '2', 0, '2025-07-02 13:45:00');
INSERT INTO `forum_topics` VALUES (28, 4, 'Flutter状态管理方案对比', 'Provider、Bloc、Riverpod各有什么优缺点？大型项目推荐使用哪个？', '2', 0, '2025-07-02 14:30:00');
INSERT INTO `forum_topics` VALUES (29, 5, 'Laravel Eloquent ORM技巧', '如何优化Eloquent查询性能？关联查询的N+1问题如何解决？', '2', 0, '2025-07-02 15:15:00');
INSERT INTO `forum_topics` VALUES (30, 6, 'Angular依赖注入详解', 'Angular的DI容器如何工作？如何创建自定义Provider？', '2', 0, '2025-07-02 16:00:00');
INSERT INTO `forum_topics` VALUES (31, 1, 'FastAPI异步API开发', 'FastAPI相比Flask的优势是什么？如何实现WebSocket实时通信？', '2', 0, '2025-07-02 17:30:00');
INSERT INTO `forum_topics` VALUES (32, 2, 'Gin框架路由设计', 'Gin的路由分组和中间件如何组织？如何实现API版本控制？', '2', 0, '2025-07-02 18:15:00');
INSERT INTO `forum_topics` VALUES (33, 3, 'MySQL索引优化实战', '如何分析慢查询？复合索引的设计原则是什么？', '3', 0, '2025-07-03 09:30:00');
INSERT INTO `forum_topics` VALUES (34, 4, 'Redis缓存策略设计', '缓存穿透、缓存击穿、缓存雪崩如何预防？缓存更新策略有哪些？', '3', 0, '2025-07-03 10:15:00');
INSERT INTO `forum_topics` VALUES (35, 5, 'MongoDB聚合管道优化', 'MongoDB的聚合查询如何优化性能？索引对聚合查询的影响？', '3', 0, '2025-07-03 11:45:00');
INSERT INTO `forum_topics` VALUES (36, 6, 'PostgreSQL事务隔离级别', '不同隔离级别对性能的影响？如何选择合适的隔离级别？', '3', 0, '2025-07-03 12:30:00');
INSERT INTO `forum_topics` VALUES (37, 1, 'Elasticsearch搜索优化', '如何优化Elasticsearch的查询性能？分片和副本的设计考虑？', '3', 0, '2025-07-03 13:15:00');
INSERT INTO `forum_topics` VALUES (38, 2, '数据库连接池配置', '连接池大小如何确定？连接泄漏如何检测和预防？', '3', 0, '2025-07-03 14:00:00');
INSERT INTO `forum_topics` VALUES (39, 3, '分库分表策略设计', '水平分片和垂直分片的适用场景？如何实现跨库查询？', '3', 0, '2025-07-03 15:30:00');
INSERT INTO `forum_topics` VALUES (40, 4, '数据库备份恢复方案', '全量备份和增量备份如何结合？如何保证数据一致性？', '3', 0, '2025-07-03 16:15:00');
INSERT INTO `forum_topics` VALUES (41, 5, 'SQL性能调优技巧', '如何分析执行计划？常见的SQL优化方法有哪些？', '3', 0, '2025-07-03 17:00:00');
INSERT INTO `forum_topics` VALUES (42, 6, 'NoSQL数据库选型', 'MongoDB、Redis、Cassandra各适用于什么场景？', '3', 0, '2025-07-03 18:30:00');
INSERT INTO `forum_topics` VALUES (43, 1, 'Java虚拟机调优实战', 'JVM内存模型如何理解？GC算法如何选择？如何分析内存泄漏？', '1', 0, '2025-07-04 09:00:00');
INSERT INTO `forum_topics` VALUES (44, 2, 'Python装饰器高级用法', '装饰器如何传递参数？类装饰器和函数装饰器的区别？', '1', 0, '2025-07-04 10:30:00');
INSERT INTO `forum_topics` VALUES (45, 3, 'JavaScript闭包内存管理', '闭包可能导致的内存泄漏如何避免？垃圾回收机制如何工作？', '1', 0, '2025-07-04 11:15:00');
INSERT INTO `forum_topics` VALUES (46, 4, 'Go语言内存管理机制', 'Go的GC算法如何工作？如何减少GC压力？', '1', 0, '2025-07-04 12:45:00');
INSERT INTO `forum_topics` VALUES (47, 1, 'Python中如何高效处理大数据集？', '我有一个约10GB的CSV文件，使用pandas读取时内存不足，有什么更好的方法处理这种大小的数据集吗？', 'Python', 8, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (48, 2, '如何优化MySQL查询性能？', '我的一个SQL查询执行时间超过30秒，使用EXPLAIN分析显示全表扫描，如何优化这种慢查询？', '数据库', 12, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (49, 3, 'React函数组件和类组件有什么区别？', '在React开发中，函数组件和类组件各有什么优缺点？应该在什么情况下选择使用？', '前端开发', 7, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (50, 4, '如何设计RESTful API？', '设计RESTful API时，有哪些最佳实践和常见的设计误区？如何设计出优雅且易于使用的API？', '后端开发', 9, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (51, 5, '如何进行单元测试？', '在项目中实施单元测试的最佳实践是什么？如何选择合适的测试框架和编写有效的测试用例？', '测试', 6, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (52, 6, 'Git工作流推荐？', '在团队开发中，你们使用哪种Git工作流？Git Flow、GitHub Flow还是其他？各有什么优缺点？', '版本控制', 11, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (53, 1, '微服务架构的优缺点？', '实施微服务架构有哪些挑战和优势？在什么情况下应该考虑使用微服务？', '架构设计', 8, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (54, 2, '如何优化Node.js应用性能？', '我的Node.js应用在高并发下表现不佳，有哪些性能优化的方法和工具？', '后端开发', 7, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (55, 3, '如何学习算法和数据结构？', '作为开发者，如何有效地学习算法和数据结构？有哪些推荐的学习资源和练习方法？', '学习资源', 10, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (56, 4, 'Docker和Kubernetes入门指南？', '如何快速上手Docker和Kubernetes？有哪些推荐的教程和最佳实践？', 'DevOps', 9, '2025-07-05 14:33:04');
INSERT INTO `forum_topics` VALUES (57, 5, '如何提高代码质量？', '在项目开发中，有哪些方法和实践可以有效提高代码质量？', '编程实践', 7, '2025-07-05 14:34:11');
INSERT INTO `forum_topics` VALUES (58, 6, '如何进行代码审查？', '代码审查的最佳实践是什么？如何在团队中有效地进行代码审查？', '团队协作', 9, '2025-07-05 14:34:11');
INSERT INTO `forum_topics` VALUES (59, 1, '如何学习新的编程语言？', '作为开发者，如何高效地学习一门新的编程语言？有哪些学习方法和技巧？', '学习方法', 8, '2025-07-05 14:34:11');
INSERT INTO `forum_topics` VALUES (60, 2, '如何设计数据库架构？', '在设计数据库架构时，有哪些原则和最佳实践？如何避免常见的设计陷阱？', '数据库', 10, '2025-07-05 14:34:11');
INSERT INTO `forum_topics` VALUES (61, 3, '如何优化前端性能？', '我的前端应用加载缓慢，有哪些方法可以优化前端性能？', '前端开发', 11, '2025-07-05 14:34:11');
INSERT INTO `forum_topics` VALUES (62, 4, '如何实现分布式系统？', '在设计和实现分布式系统时，有哪些关键挑战和解决方案？', '架构设计', 8, '2025-07-05 14:36:42');
INSERT INTO `forum_topics` VALUES (63, 5, '如何进行性能测试？', '如何对应用程序进行有效的性能测试？有哪些常用的工具和指标？', '测试', 9, '2025-07-05 14:36:42');
INSERT INTO `forum_topics` VALUES (64, 6, '如何设计API接口？', '设计RESTful API时，有哪些最佳实践和设计原则？', 'API设计', 7, '2025-07-05 14:36:42');
INSERT INTO `forum_topics` VALUES (65, 1, '如何进行安全编码？', '在软件开发过程中，应该注意哪些安全问题和最佳实践？', '安全', 10, '2025-07-05 14:36:42');
INSERT INTO `forum_topics` VALUES (66, 2, '如何使用Docker部署应用？', '如何使用Docker容器化和部署应用程序？有哪些最佳实践？', 'DevOps', 8, '2025-07-05 14:36:42');
INSERT INTO `forum_topics` VALUES (67, 4, '如何实现分布式系统？', '在设计和实现分布式系统时，有哪些关键挑战和解决方案？', '架构设计', 8, '2025-07-05 14:39:36');
INSERT INTO `forum_topics` VALUES (68, 5, '如何进行性能测试？', '如何对应用程序进行有效的性能测试？有哪些常用的工具和指标？', '测试', 10, '2025-07-05 14:39:36');
INSERT INTO `forum_topics` VALUES (69, 6, '如何设计API接口？', '设计RESTful API时，有哪些最佳实践和设计原则？', 'API设计', 7, '2025-07-05 14:39:36');
INSERT INTO `forum_topics` VALUES (71, 2, '如何使用Docker部署应用？？？', '如何使用Docker容器化和部署应用程序？有哪些最佳实践？', 'DevOps', 12, '2025-07-05 14:39:36');
INSERT INTO `forum_topics` VALUES (73, 4, '包装类型和基本类型的区别', '谈谈对包装类型和基本类型区别的理解', '编程语言', 1, '2025-07-07 10:56:23');

-- ----------------------------
-- Table structure for learning_progress
-- ----------------------------
DROP TABLE IF EXISTS `learning_progress`;
CREATE TABLE `learning_progress`  (
  `progress_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `course_id` int NULL DEFAULT NULL,
  `chapter_id` int NOT NULL,
  `status` int NOT NULL COMMENT '0表示没学，1表示学完了',
  `last_watch_time` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`progress_id`) USING BTREE,
  UNIQUE INDEX `uniq_user_course_chapter`(`user_id` ASC, `course_id` ASC, `chapter_id` ASC) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE,
  INDEX `chapter_id`(`chapter_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of learning_progress
-- ----------------------------
INSERT INTO `learning_progress` VALUES (10, 1, 3, 14, 1, '2025-07-11 15:20:24');
INSERT INTO `learning_progress` VALUES (11, 1, 3, 15, 1, '2025-07-11 15:21:28');
INSERT INTO `learning_progress` VALUES (12, 7, 3, 14, 1, '2025-07-11 15:45:00');
INSERT INTO `learning_progress` VALUES (13, 1, 3, 17, 1, '2025-07-11 16:59:16');
INSERT INTO `learning_progress` VALUES (14, 1, 3, 16, 1, '2025-07-11 18:30:01');

-- ----------------------------
-- Table structure for notification
-- ----------------------------
DROP TABLE IF EXISTS `notification`;
CREATE TABLE `notification`  (
  `notification_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `is_read` tinyint(1) NULL DEFAULT 0,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `link` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '跳转链接',
  PRIMARY KEY (`notification_id`) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 78 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of notification
-- ----------------------------
INSERT INTO `notification` VALUES (73, 1, 'EXAM', '您的考试《Python入门与实战》已批改完成，最终得分：100分', 0, '2025-07-11 18:48:25', '/student/exam');
INSERT INTO `notification` VALUES (74, 1, 'EXAM', '您购买的课程《Python入门与实战第二期》有新考试，时间为:2025-07-11 20:03:01请及时参加', 0, '2025-07-11 19:04:39', '/student/exam');
INSERT INTO `notification` VALUES (75, 7, 'EXAM', '您购买的课程《Python入门与实战第二期》有新考试，时间为:2025-07-11 20:03:01请及时参加', 1, '2025-07-11 19:04:39', '/student/exam');
INSERT INTO `notification` VALUES (76, 4, 'EXAM_REVIEW', '学生提交了考试《Python入门与实战第二期》，包含主观题需要您批改', 1, '2025-07-11 19:28:07', '/teacher/exam/review');
INSERT INTO `notification` VALUES (77, 7, 'EXAM', '您的考试《Python入门与实战第二期》已批改完成，最终得分：90分', 0, '2025-07-11 19:28:39', '/student/exam');

-- ----------------------------
-- Table structure for orders
-- ----------------------------
DROP TABLE IF EXISTS `orders`;
CREATE TABLE `orders`  (
  `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `user_id` int NOT NULL,
  `course_id` int NOT NULL,
  `payment_method` enum('ALIPAY','WECHAT') CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `order_amount` decimal(10, 2) NOT NULL,
  `order_status` enum('UNPAID','PAID','REFUNDED') CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'UNPAID',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `pay_time` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`order_id`) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE,
  INDEX `course_id`(`course_id` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of orders
-- ----------------------------
INSERT INTO `orders` VALUES ('ORDER20250711155935a1ab23a0_3', 1, 3, 'ALIPAY', 99.00, 'PAID', '2025-07-11 15:59:36', '2025-07-11 15:59:36');
INSERT INTO `orders` VALUES ('ORDER20250711185431f9717b72_3', 7, 3, 'ALIPAY', 99.00, 'PAID', '2025-07-11 18:54:32', '2025-07-11 18:54:32');

-- ----------------------------
-- Table structure for qa_answers
-- ----------------------------
DROP TABLE IF EXISTS `qa_answers`;
CREATE TABLE `qa_answers`  (
  `answer_id` int NOT NULL AUTO_INCREMENT,
  `question_id` int NOT NULL,
  `user_id` int NOT NULL,
  `answer_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `is_best` tinyint(1) NULL DEFAULT 0,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`answer_id`) USING BTREE,
  INDEX `question_id`(`question_id` ASC) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 176 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qa_answers
-- ----------------------------
INSERT INTO `qa_answers` VALUES (1, 6, 5, '单元测试是对软件中的最小可测试单元进行检查和验证的过程。', 0, '2025-06-18 10:30:00');
INSERT INTO `qa_answers` VALUES (2, 6, 6, '可以使用JUnit(Java)、pytest(Python)等框架编写单元测试。', 1, '2025-06-19 14:20:00');
INSERT INTO `qa_answers` VALUES (3, 7, 1, '常用命令包括：git clone, git add, git commit, git push, git pull等。', 0, '2025-06-20 09:15:00');
INSERT INTO `qa_answers` VALUES (4, 7, 2, '还有分支管理命令：git branch, git checkout, git merge等。', 0, '2025-06-21 11:45:00');
INSERT INTO `qa_answers` VALUES (5, 7, 3, '远程仓库操作：git remote, git fetch, git rebase等。', 0, '2025-06-22 13:30:00');
INSERT INTO `qa_answers` VALUES (6, 7, 4, '查看历史：git log, git diff等。', 1, '2025-06-23 15:20:00');
INSERT INTO `qa_answers` VALUES (7, 8, 5, '可以使用React.memo()包装组件，避免不必要的渲染。', 0, '2025-06-24 10:45:00');
INSERT INTO `qa_answers` VALUES (8, 8, 6, '使用useCallback和useMemo缓存函数和值。', 0, '2025-06-25 14:10:00');
INSERT INTO `qa_answers` VALUES (9, 8, 1, '优化图片资源，使用懒加载。', 1, '2025-06-26 16:35:00');
INSERT INTO `qa_answers` VALUES (10, 9, 2, '装饰器本质上是一个函数，它接受另一个函数作为参数，并返回一个新的函数。', 0, '2025-06-27 09:25:00');
INSERT INTO `qa_answers` VALUES (11, 9, 3, '例如，一个简单的计时装饰器：def timer(func): ...', 1, '2025-06-28 11:50:00');
INSERT INTO `qa_answers` VALUES (12, 10, 4, '应该根据查询条件和排序字段创建索引。', 0, '2025-06-29 13:40:00');
INSERT INTO `qa_answers` VALUES (13, 10, 5, '避免在索引列上使用函数或计算。', 0, '2025-06-30 15:25:00');
INSERT INTO `qa_answers` VALUES (14, 10, 6, '使用EXPLAIN分析查询，检查索引使用情况。', 1, '2025-07-01 10:10:00');
INSERT INTO `qa_answers` VALUES (15, 11, 1, '在全局作用域中，this指向全局对象。', 0, '2025-07-02 11:35:00');
INSERT INTO `qa_answers` VALUES (16, 11, 2, '在函数作为对象方法调用时，this指向调用该函数的对象。', 0, '2025-07-03 14:20:00');
INSERT INTO `qa_answers` VALUES (17, 11, 3, '在构造函数中，this指向新创建的对象。', 1, '2025-07-04 16:45:00');
INSERT INTO `qa_answers` VALUES (18, 12, 4, 'RESTful API应该使用HTTP动词(GET, POST, PUT, DELETE)对应资源操作。', 0, '2025-07-05 09:30:00');
INSERT INTO `qa_answers` VALUES (19, 12, 5, '使用合理的URL路径设计，例如：/api/users/{id}。', 0, '2025-07-06 11:55:00');
INSERT INTO `qa_answers` VALUES (20, 12, 6, '返回适当的HTTP状态码和JSON格式数据。', 0, '2025-07-07 14:10:00');
INSERT INTO `qa_answers` VALUES (21, 12, 1, '考虑API版本控制和错误处理。', 1, '2025-07-08 16:30:00');
INSERT INTO `qa_answers` VALUES (22, 13, 2, '文件操作：ls, cd, mkdir, rm, cp, mv等。', 0, '2025-07-09 10:20:00');
INSERT INTO `qa_answers` VALUES (23, 13, 3, '权限管理：chmod, chown等。', 0, '2025-07-10 13:45:00');
INSERT INTO `qa_answers` VALUES (24, 13, 4, '进程管理：ps, top, kill等。', 0, '2025-07-11 15:20:00');
INSERT INTO `qa_answers` VALUES (25, 13, 5, '文本处理：grep, awk, sed等。', 0, '2025-07-12 10:15:00');
INSERT INTO `qa_answers` VALUES (26, 13, 6, '网络工具：ping, ifconfig, netstat等。', 1, '2025-07-13 14:30:00');
INSERT INTO `qa_answers` VALUES (27, 14, 5, '代码审查的主要目的是发现缺陷、保证代码质量和知识共享。', 0, '2025-07-14 10:30:00');
INSERT INTO `qa_answers` VALUES (28, 14, 6, '最佳实践包括：保持审查小规模、关注重点问题、提供建设性反馈等。', 1, '2025-07-15 14:20:00');
INSERT INTO `qa_answers` VALUES (29, 15, 1, '使用open()函数打开文件，read()/write()方法读写文件。', 0, '2025-07-16 09:15:00');
INSERT INTO `qa_answers` VALUES (30, 15, 2, 'os模块提供了目录操作功能，如os.listdir(), os.mkdir()等。', 0, '2025-07-17 11:45:00');
INSERT INTO `qa_answers` VALUES (31, 15, 3, '对于大文件，推荐使用with语句自动管理文件关闭。', 1, '2025-07-18 13:30:00');
INSERT INTO `qa_answers` VALUES (32, 16, 4, '常见的设计模式包括：单例模式、工厂模式、观察者模式等。', 0, '2025-07-19 10:20:00');
INSERT INTO `qa_answers` VALUES (33, 16, 5, '单例模式确保一个类只有一个实例，并提供全局访问点。', 0, '2025-07-20 14:10:00');
INSERT INTO `qa_answers` VALUES (34, 16, 6, '工厂模式定义一个创建对象的接口，让子类决定实例化哪个类。', 0, '2025-07-21 16:35:00');
INSERT INTO `qa_answers` VALUES (35, 16, 1, '观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。', 1, '2025-07-22 11:50:00');
INSERT INTO `qa_answers` VALUES (36, 17, 2, '使用调试器（如Python的pdb, Java的jdb）设置断点。', 0, '2025-07-23 09:25:00');
INSERT INTO `qa_answers` VALUES (37, 17, 3, '添加日志记录关键执行点和变量值。', 0, '2025-07-24 13:40:00');
INSERT INTO `qa_answers` VALUES (38, 17, 4, '使用单元测试隔离和重现问题。', 1, '2025-07-25 15:25:00');
INSERT INTO `qa_answers` VALUES (39, 18, 5, '遵循数据库范式，避免数据冗余。', 0, '2025-07-26 10:10:00');
INSERT INTO `qa_answers` VALUES (40, 18, 6, '合理设计主键、外键和索引。', 0, '2025-07-27 14:30:00');
INSERT INTO `qa_answers` VALUES (41, 18, 1, '考虑业务需求，平衡范式化和性能。', 1, '2025-07-28 16:45:00');
INSERT INTO `qa_answers` VALUES (42, 19, 2, '压缩CSS文件，减少HTTP请求。', 0, '2025-07-29 10:35:00');
INSERT INTO `qa_answers` VALUES (43, 19, 3, '避免内联样式和!important，使用CSS Sprites。', 0, '2025-07-30 14:20:00');
INSERT INTO `qa_answers` VALUES (44, 19, 4, '优化选择器，避免深层嵌套。', 1, '2025-07-31 16:30:00');
INSERT INTO `qa_answers` VALUES (45, 20, 5, '常用工具包括JMeter, Gatling, LoadRunner等。', 0, '2025-08-01 09:30:00');
INSERT INTO `qa_answers` VALUES (46, 20, 6, '关键指标包括响应时间、吞吐量、错误率等。', 0, '2025-08-02 13:45:00');
INSERT INTO `qa_answers` VALUES (47, 20, 1, '应该在不同负载条件下测试，并分析性能瓶颈。', 0, '2025-08-03 15:20:00');
INSERT INTO `qa_answers` VALUES (48, 20, 2, '考虑使用性能监控工具进行持续监控。', 1, '2025-08-04 10:15:00');
INSERT INTO `qa_answers` VALUES (49, 21, 3, '优化查询语句，避免全表扫描。', 0, '2025-08-05 11:45:00');
INSERT INTO `qa_answers` VALUES (50, 21, 4, '合理创建和使用索引。', 0, '2025-08-06 14:30:00');
INSERT INTO `qa_answers` VALUES (51, 21, 5, '分析查询执行计划，优化表结构。', 1, '2025-08-07 16:45:00');
INSERT INTO `qa_answers` VALUES (52, 22, 6, '多线程适用于I/O密集型任务，多进程适用于CPU密集型任务。', 0, '2025-08-08 10:35:00');
INSERT INTO `qa_answers` VALUES (53, 22, 1, 'Python的多线程受GIL限制，无法充分利用多核CPU。', 0, '2025-08-09 14:20:00');
INSERT INTO `qa_answers` VALUES (54, 22, 2, '多进程创建开销大，但每个进程有独立的Python解释器实例。', 0, '2025-08-10 16:30:00');
INSERT INTO `qa_answers` VALUES (55, 22, 3, '使用multiprocessing模块实现多进程，threading模块实现多线程。', 1, '2025-08-11 11:50:00');
INSERT INTO `qa_answers` VALUES (56, 23, 4, '使用微服务架构，将应用拆分为多个小型服务。', 0, '2025-08-12 10:20:00');
INSERT INTO `qa_answers` VALUES (57, 23, 5, '采用水平扩展而非垂直扩展。', 0, '2025-08-13 14:10:00');
INSERT INTO `qa_answers` VALUES (58, 23, 6, '使用负载均衡器分发流量。', 0, '2025-08-14 16:35:00');
INSERT INTO `qa_answers` VALUES (59, 23, 1, '考虑使用CDN、缓存和异步处理。', 0, '2025-08-15 11:50:00');
INSERT INTO `qa_answers` VALUES (60, 23, 2, '数据库设计要支持高并发访问。', 1, '2025-08-16 13:40:00');
INSERT INTO `qa_answers` VALUES (61, 24, 3, '使用Jest、Mocha、Jasmine等测试框架。', 0, '2025-08-17 09:25:00');
INSERT INTO `qa_answers` VALUES (62, 24, 4, '编写单元测试、集成测试和端到端测试。', 0, '2025-08-18 13:40:00');
INSERT INTO `qa_answers` VALUES (63, 24, 5, '使用工具如Enzyme(React)或Vue Test Utils进行组件测试。', 1, '2025-08-19 15:25:00');
INSERT INTO `qa_answers` VALUES (64, 25, 6, '考虑服务发现、负载均衡和容错机制。', 0, '2025-08-20 10:10:00');
INSERT INTO `qa_answers` VALUES (65, 25, 1, '设计清晰的服务边界和通信协议。', 0, '2025-08-21 14:30:00');
INSERT INTO `qa_answers` VALUES (66, 25, 2, '实现分布式日志和监控。', 0, '2025-08-22 16:45:00');
INSERT INTO `qa_answers` VALUES (67, 25, 3, '考虑数据一致性和事务处理。', 0, '2025-08-23 10:35:00');
INSERT INTO `qa_answers` VALUES (68, 25, 4, '使用容器化技术如Docker和Kubernetes。', 1, '2025-08-24 14:20:00');
INSERT INTO `qa_answers` VALUES (69, 26, 5, '优化图片资源，使用懒加载。', 0, '2025-08-25 16:30:00');
INSERT INTO `qa_answers` VALUES (70, 26, 6, '减少HTTP请求，合并CSS和JavaScript文件。', 0, '2025-08-26 11:45:00');
INSERT INTO `qa_answers` VALUES (71, 26, 1, '使用CDN分发静态资源。', 1, '2025-08-27 14:30:00');
INSERT INTO `qa_answers` VALUES (72, 27, 2, '使用RESTful原则设计API。', 0, '2025-08-28 16:45:00');
INSERT INTO `qa_answers` VALUES (73, 27, 3, '使用清晰的URL结构和HTTP动词。', 0, '2025-08-29 10:35:00');
INSERT INTO `qa_answers` VALUES (74, 27, 4, '设计合理的错误处理和状态码。', 0, '2025-08-30 14:20:00');
INSERT INTO `qa_answers` VALUES (75, 27, 5, '考虑API版本控制和文档。', 1, '2025-08-31 16:30:00');
INSERT INTO `qa_answers` VALUES (76, 28, 6, '避免SQL注入、XSS攻击等。', 0, '2025-09-01 11:45:00');
INSERT INTO `qa_answers` VALUES (77, 28, 1, '使用参数化查询和输入验证。', 0, '2025-09-02 14:30:00');
INSERT INTO `qa_answers` VALUES (78, 28, 2, '保护敏感数据，如密码加密。', 0, '2025-09-03 16:45:00');
INSERT INTO `qa_answers` VALUES (79, 28, 3, '遵循安全编码规范，定期更新依赖。', 0, '2025-09-04 10:35:00');
INSERT INTO `qa_answers` VALUES (80, 28, 4, '实现访问控制和权限管理。', 1, '2025-09-05 14:20:00');
INSERT INTO `qa_answers` VALUES (81, 29, 5, '安装Docker和Docker Compose。', 0, '2025-09-06 16:30:00');
INSERT INTO `qa_answers` VALUES (82, 29, 6, '创建Dockerfile定义应用环境。', 0, '2025-09-07 11:45:00');
INSERT INTO `qa_answers` VALUES (83, 29, 1, '使用docker build构建镜像。', 0, '2025-09-08 14:30:00');
INSERT INTO `qa_answers` VALUES (84, 29, 2, '使用docker run运行容器。', 0, '2025-09-09 16:45:00');
INSERT INTO `qa_answers` VALUES (85, 29, 3, '使用Docker Compose管理多容器应用。', 1, '2025-09-10 10:35:00');
INSERT INTO `qa_answers` VALUES (86, 30, 4, '设置版本控制系统如Git。', 0, '2025-09-11 14:20:00');
INSERT INTO `qa_answers` VALUES (87, 30, 5, '配置CI工具如Jenkins、GitLab CI或GitHub Actions。', 0, '2025-09-12 16:30:00');
INSERT INTO `qa_answers` VALUES (88, 30, 6, '定义构建和测试流程。', 0, '2025-09-13 11:45:00');
INSERT INTO `qa_answers` VALUES (89, 30, 1, '设置自动部署到测试和生产环境。', 1, '2025-09-14 14:30:00');
INSERT INTO `qa_answers` VALUES (90, 31, 4, '首先建立数据模型的目标和范围。', 0, '2025-09-15 10:20:00');
INSERT INTO `qa_answers` VALUES (91, 31, 5, '分析业务需求，识别实体和关系。', 0, '2025-09-16 14:10:00');
INSERT INTO `qa_answers` VALUES (92, 31, 6, '设计数据表结构，考虑范式化和性能平衡。', 0, '2025-09-17 16:35:00');
INSERT INTO `qa_answers` VALUES (93, 31, 1, '使用工具如ER图辅助设计。', 1, '2025-09-18 11:50:00');
INSERT INTO `qa_answers` VALUES (94, 32, 2, '日志记录、性能计时、权限验证等。', 0, '2025-09-19 09:25:00');
INSERT INTO `qa_answers` VALUES (95, 32, 3, '缓存、重试机制、输入验证等。', 0, '2025-09-20 13:40:00');
INSERT INTO `qa_answers` VALUES (96, 32, 4, '装饰器可以简化代码并提高复用性。', 1, '2025-09-21 15:25:00');
INSERT INTO `qa_answers` VALUES (97, 33, 5, '使用JWT(JSON Web Token)进行认证。', 0, '2025-09-22 10:10:00');
INSERT INTO `qa_answers` VALUES (98, 33, 6, '实现RBAC(基于角色的访问控制)。', 0, '2025-09-23 14:30:00');
INSERT INTO `qa_answers` VALUES (99, 33, 1, '使用OAuth 2.0进行第三方认证。', 0, '2025-09-24 16:45:00');
INSERT INTO `qa_answers` VALUES (100, 33, 2, '实现双因素认证提高安全性。', 0, '2025-09-25 10:35:00');
INSERT INTO `qa_answers` VALUES (101, 33, 3, '保护敏感API端点，防止CSRF攻击。', 1, '2025-09-26 14:20:00');
INSERT INTO `qa_answers` VALUES (102, 34, 4, '分析算法复杂度，识别瓶颈。', 0, '2025-09-27 16:30:00');
INSERT INTO `qa_answers` VALUES (103, 34, 5, '使用更高效的数据结构和算法。', 0, '2025-09-28 11:45:00');
INSERT INTO `qa_answers` VALUES (104, 34, 6, '应用分治、贪心或动态规划等策略。', 1, '2025-09-29 14:30:00');
INSERT INTO `qa_answers` VALUES (105, 35, 1, '压缩和最小化资源文件。', 0, '2025-09-30 16:45:00');
INSERT INTO `qa_answers` VALUES (106, 35, 2, '使用懒加载和代码分割。', 0, '2025-10-01 10:35:00');
INSERT INTO `qa_answers` VALUES (107, 35, 3, '优化CSS加载顺序，避免阻塞渲染。', 1, '2025-10-02 14:20:00');
INSERT INTO `qa_answers` VALUES (108, 36, 4, '确定需要缓存的数据类型和访问模式。', 0, '2025-10-03 16:30:00');
INSERT INTO `qa_answers` VALUES (109, 36, 5, '选择合适的缓存策略，如LRU、LFU等。', 0, '2025-10-04 11:45:00');
INSERT INTO `qa_answers` VALUES (110, 36, 6, '设置合理的缓存过期时间和更新机制。', 0, '2025-10-05 14:30:00');
INSERT INTO `qa_answers` VALUES (111, 36, 1, '实现缓存失效和降级策略。', 1, '2025-10-06 16:45:00');
INSERT INTO `qa_answers` VALUES (112, 37, 2, '选择合适的消息队列技术，如RabbitMQ、Kafka等。', 0, '2025-10-07 10:35:00');
INSERT INTO `qa_answers` VALUES (113, 37, 3, '设计消息格式和通信协议。', 0, '2025-10-08 14:20:00');
INSERT INTO `qa_answers` VALUES (114, 37, 4, '实现消息确认和重试机制。', 0, '2025-10-09 16:30:00');
INSERT INTO `qa_answers` VALUES (115, 37, 5, '处理消息顺序和幂等性。', 0, '2025-10-10 11:45:00');
INSERT INTO `qa_answers` VALUES (116, 37, 6, '监控消息队列性能和健康状态。', 1, '2025-10-11 14:30:00');
INSERT INTO `qa_answers` VALUES (117, 38, 1, '使用CI/CD工具如Jenkins、GitLab CI等。', 0, '2025-10-12 16:45:00');
INSERT INTO `qa_answers` VALUES (118, 38, 2, '编写自动化脚本部署应用。', 0, '2025-10-13 10:35:00');
INSERT INTO `qa_answers` VALUES (119, 38, 3, '实现环境隔离和配置管理。', 1, '2025-10-14 14:20:00');
INSERT INTO `qa_answers` VALUES (120, 39, 4, '制定重构计划，从小的、安全的变更开始。', 0, '2025-10-15 10:20:00');
INSERT INTO `qa_answers` VALUES (121, 39, 5, '使用重构工具和自动化测试确保代码质量。', 0, '2025-10-16 14:10:00');
INSERT INTO `qa_answers` VALUES (122, 39, 6, '遵循SOLID原则，提高代码可维护性。', 1, '2025-10-17 16:35:00');
INSERT INTO `qa_answers` VALUES (123, 40, 1, '根据数据访问频率和时效性选择缓存策略。', 0, '2025-10-18 11:50:00');
INSERT INTO `qa_answers` VALUES (124, 40, 2, '实现多级缓存架构，如本地缓存+分布式缓存。', 0, '2025-10-19 09:25:00');
INSERT INTO `qa_answers` VALUES (125, 40, 3, '考虑缓存穿透、击穿和雪崩问题。', 1, '2025-10-20 13:40:00');
INSERT INTO `qa_answers` VALUES (126, 41, 5, '根据业务场景选择合适的消息队列技术。', 0, '2025-10-21 15:25:00');
INSERT INTO `qa_answers` VALUES (127, 41, 6, '设计合理的消息模型和处理流程。', 0, '2025-10-22 10:10:00');
INSERT INTO `qa_answers` VALUES (128, 41, 1, '实现消息幂等性和事务性。', 0, '2025-10-23 14:30:00');
INSERT INTO `qa_answers` VALUES (129, 41, 2, '监控消息队列性能和健康状态。', 0, '2025-10-24 16:45:00');
INSERT INTO `qa_answers` VALUES (130, 41, 3, '处理消息积压和失败重试策略。', 1, '2025-10-25 10:35:00');
INSERT INTO `qa_answers` VALUES (131, 42, 4, '使用CI/CD工具实现自动化构建和部署。', 0, '2025-10-26 14:20:00');
INSERT INTO `qa_answers` VALUES (132, 42, 5, '编写脚本实现环境配置和应用部署。', 0, '2025-10-27 16:30:00');
INSERT INTO `qa_answers` VALUES (133, 42, 6, '实现蓝绿部署或金丝雀发布策略。', 1, '2025-10-28 11:45:00');
INSERT INTO `qa_answers` VALUES (134, 43, 1, '设计冗余架构，避免单点故障。', 0, '2025-10-29 14:30:00');
INSERT INTO `qa_answers` VALUES (135, 43, 2, '实现自动故障检测和恢复机制。', 0, '2025-10-30 16:45:00');
INSERT INTO `qa_answers` VALUES (136, 43, 3, '进行容量规划和性能测试。', 0, '2025-10-31 10:35:00');
INSERT INTO `qa_answers` VALUES (137, 43, 4, '设计灾备方案和数据恢复策略。', 0, '2025-11-01 14:20:00');
INSERT INTO `qa_answers` VALUES (138, 43, 5, '实现监控和告警系统。', 1, '2025-11-02 16:30:00');
INSERT INTO `qa_answers` VALUES (139, 44, 6, '监控系统资源使用情况，如CPU、内存、磁盘等。', 0, '2025-11-03 11:45:00');
INSERT INTO `qa_answers` VALUES (140, 44, 1, '监控应用性能指标，如响应时间、吞吐量等。', 0, '2025-11-04 14:30:00');
INSERT INTO `qa_answers` VALUES (141, 44, 2, '设置告警阈值，及时发现异常。', 0, '2025-11-05 16:45:00');
INSERT INTO `qa_answers` VALUES (142, 44, 3, '使用日志聚合工具分析系统行为。', 1, '2025-11-06 10:35:00');
INSERT INTO `qa_answers` VALUES (143, 45, 4, '分析历史数据，预测未来增长趋势。', 0, '2025-11-07 14:20:00');
INSERT INTO `qa_answers` VALUES (144, 45, 5, '进行负载测试，确定系统容量上限。', 0, '2025-11-08 16:30:00');
INSERT INTO `qa_answers` VALUES (145, 45, 6, '设计弹性架构，支持动态扩展。', 1, '2025-11-09 11:45:00');
INSERT INTO `qa_answers` VALUES (146, 46, 1, '使用两阶段提交(2PC)或补偿事务。', 0, '2025-11-10 14:30:00');
INSERT INTO `qa_answers` VALUES (147, 46, 2, '实现最终一致性模型。', 0, '2025-11-11 16:45:00');
INSERT INTO `qa_answers` VALUES (148, 46, 3, '使用事务消息保证数据一致性。', 0, '2025-11-12 10:35:00');
INSERT INTO `qa_answers` VALUES (149, 46, 4, '考虑CAP定理，根据业务需求权衡。', 0, '2025-11-13 14:20:00');
INSERT INTO `qa_answers` VALUES (150, 46, 5, '使用分布式事务框架简化开发。', 1, '2025-11-14 16:30:00');
INSERT INTO `qa_answers` VALUES (151, 47, 6, '分析系统瓶颈，确定性能瓶颈点。', 0, '2025-11-15 11:45:00');
INSERT INTO `qa_answers` VALUES (152, 47, 1, '优化数据库查询和索引。', 0, '2025-11-16 14:30:00');
INSERT INTO `qa_answers` VALUES (153, 47, 2, '使用缓存减轻数据库压力。', 0, '2025-11-17 16:45:00');
INSERT INTO `qa_answers` VALUES (154, 47, 3, '优化代码逻辑，减少不必要的计算。', 1, '2025-11-18 10:35:00');
INSERT INTO `qa_answers` VALUES (155, 48, 3, '设计统一的API入口点', 0, '2025-11-19 14:20:00');
INSERT INTO `qa_answers` VALUES (156, 48, 5, '实现请求路由、负载均衡和限流。', 0, '2025-11-20 16:30:00');
INSERT INTO `qa_answers` VALUES (158, 48, 1, '实现API网关的高可用和可扩展。', 1, '2025-11-22 14:30:00');
INSERT INTO `qa_answers` VALUES (159, 49, 1, '不会', 0, '2025-07-05 14:40:50');
INSERT INTO `qa_answers` VALUES (160, 49, 1, '抽象', 0, '2025-07-05 14:40:56');
INSERT INTO `qa_answers` VALUES (161, 46, 1, '大佬啊\n', 0, '2025-07-05 14:41:24');
INSERT INTO `qa_answers` VALUES (162, 50, 7, '?阿巴阿巴', 0, '2025-07-05 15:16:48');
INSERT INTO `qa_answers` VALUES (163, 45, 3, '大佬v5 ', 0, '2025-07-05 18:51:37');
INSERT INTO `qa_answers` VALUES (164, 45, 3, '没有显示？', 0, '2025-07-05 18:51:54');
INSERT INTO `qa_answers` VALUES (165, 49, 3, '奇怪', 0, '2025-07-05 18:52:06');
INSERT INTO `qa_answers` VALUES (166, 49, 3, '可以啊\n', 0, '2025-07-05 18:52:17');
INSERT INTO `qa_answers` VALUES (167, 48, 3, '怎么刚才失败？', 0, '2025-07-05 18:52:40');
INSERT INTO `qa_answers` VALUES (168, 47, 3, '哦！', 0, '2025-07-05 18:53:13');
INSERT INTO `qa_answers` VALUES (169, 47, 3, '原来这样的', 0, '2025-07-05 18:53:33');
INSERT INTO `qa_answers` VALUES (170, 47, 3, '没有排序', 0, '2025-07-05 18:53:54');
INSERT INTO `qa_answers` VALUES (171, 49, 3, '又发现一个bug靠', 0, '2025-07-05 18:54:32');
INSERT INTO `qa_answers` VALUES (172, 48, 3, '不对，是假数据时间有问题', 0, '2025-07-05 18:55:17');
INSERT INTO `qa_answers` VALUES (173, 48, 3, '擦', 0, '2025-07-05 18:55:32');
INSERT INTO `qa_answers` VALUES (174, 52, 1, '我觉得可能是和成员变量一起存到堆\n', 0, '2025-07-07 11:04:36');
INSERT INTO `qa_answers` VALUES (175, 52, 4, '静态变量的生命周期是整个类，而不是对象，所以咋可能存到堆，jdk7之前是放在方法区，jdk8之后是放在元数据', 1, '2025-07-07 11:06:35');

-- ----------------------------
-- Table structure for qa_questions
-- ----------------------------
DROP TABLE IF EXISTS `qa_questions`;
CREATE TABLE `qa_questions`  (
  `question_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `question_title` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `question_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `tags` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `answer_count` int NULL DEFAULT 0,
  `view_count` int NULL DEFAULT 0,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `best_answer_id` int NULL DEFAULT NULL COMMENT '最佳回答ID',
  PRIMARY KEY (`question_id`) USING BTREE,
  INDEX `user_id`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 53 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qa_questions
-- ----------------------------
INSERT INTO `qa_questions` VALUES (1, 1, 'JavaScript中this关键字如何理解？', '在JavaScript中，this的指向经常让人困惑，能否详细解释一下？', 'JavaScript,this,前端开发', 3, 95, '2025-07-05 14:22:43', 40);
INSERT INTO `qa_questions` VALUES (2, 2, '如何实现一个简单的RESTful API？', '我想学习如何设计和实现一个符合RESTful原则的API，需要注意哪些方面？', 'API设计,RESTful,后端开发', 4, 160, '2025-07-05 14:22:43', 44);
INSERT INTO `qa_questions` VALUES (3, 3, 'Linux常用命令有哪些？', '作为开发者，应该掌握哪些Linux命令来提高工作效率？', 'Linux,命令行,开发工具', 5, 180, '2025-07-05 14:22:43', 49);
INSERT INTO `qa_questions` VALUES (4, 4, '如何进行代码审查？', '代码审查的目的和最佳实践是什么？如何有效地进行代码审查？', '代码审查,团队协作,质量管理', 2, 80, '2025-07-05 14:22:43', 52);
INSERT INTO `qa_questions` VALUES (5, 5, 'Python中如何处理文件和目录？', '在Python中，如何读取、写入和操作文件及目录？', 'Python,文件操作,IO', 3, 110, '2025-07-05 14:22:43', 55);
INSERT INTO `qa_questions` VALUES (6, 6, '什么是设计模式？', '能否用简单的例子解释一下常见的设计模式及其应用场景？', '设计模式,软件开发,架构', 4, 140, '2025-07-05 14:22:43', 59);
INSERT INTO `qa_questions` VALUES (7, 1, '如何调试复杂的程序？', '当程序出现难以定位的问题时，有哪些调试技巧和工具？', '调试,故障排查,开发工具', 3, 120, '2025-07-05 14:22:43', 62);
INSERT INTO `qa_questions` VALUES (8, 2, '如何设计数据库表结构？', '在设计数据库时，应该遵循哪些原则来设计合理的表结构？', '数据库设计,表结构,规范化', 2, 90, '2025-07-05 14:22:43', 65);
INSERT INTO `qa_questions` VALUES (9, 3, '如何优化CSS性能？', '我的网页加载缓慢，如何优化CSS以提高性能？', 'CSS,前端开发,性能优化', 3, 130, '2025-07-05 14:22:43', 68);
INSERT INTO `qa_questions` VALUES (10, 4, '如何进行性能测试？', '如何对应用程序进行性能测试？有哪些常用的工具和指标？', '性能测试,测试,质量保证', 4, 150, '2025-07-05 14:22:43', 72);
INSERT INTO `qa_questions` VALUES (11, 5, '如何优化数据库查询性能？', '我的数据库查询很慢，有哪些方法可以优化查询性能？', '数据库,SQL,性能优化', 3, 140, '2025-07-05 14:23:14', 77);
INSERT INTO `qa_questions` VALUES (12, 6, 'Python中的多线程和多进程有什么区别？', '在Python中，应该何时使用多线程，何时使用多进程？', 'Python,并发,多线程', 4, 160, '2025-07-05 14:23:14', 81);
INSERT INTO `qa_questions` VALUES (13, 1, '如何设计一个可扩展的Web应用架构？', '随着用户量增长，如何设计Web应用架构以支持扩展？', '架构设计,Web开发,可扩展性', 5, 190, '2025-07-05 14:23:14', 86);
INSERT INTO `qa_questions` VALUES (14, 2, '如何进行前端代码测试？', '前端开发中，有哪些测试框架和最佳实践？', '前端开发,测试,自动化测试', 3, 120, '2025-07-05 14:23:14', 89);
INSERT INTO `qa_questions` VALUES (15, 3, '如何实现分布式系统？', '设计和实现分布式系统需要考虑哪些因素？', '分布式系统,微服务,架构', 4, 170, '2025-07-05 14:23:14', 93);
INSERT INTO `qa_questions` VALUES (16, 4, '如何优化移动应用性能？', '我的移动应用运行缓慢，如何提高其性能？', '移动开发,性能优化,React Native', 3, 130, '2025-07-05 14:23:14', 96);
INSERT INTO `qa_questions` VALUES (17, 5, '如何设计API接口？', '设计RESTful API时，有哪些最佳实践和设计原则？', 'API设计,RESTful,后端开发', 4, 150, '2025-07-05 14:23:14', 100);
INSERT INTO `qa_questions` VALUES (18, 6, '如何进行安全编码？', '开发过程中，应该注意哪些安全问题和最佳实践？', '安全,编码规范,软件开发', 5, 180, '2025-07-05 14:23:14', 105);
INSERT INTO `qa_questions` VALUES (19, 1, '如何使用Docker部署应用？', '如何使用Docker容器化和部署应用程序？', 'Docker,容器化,部署', 3, 140, '2025-07-05 14:23:14', 108);
INSERT INTO `qa_questions` VALUES (20, 2, '如何实现CI/CD流程？', '如何设置和实现持续集成和持续部署流程？', 'CI/CD,DevOps,自动化', 4, 160, '2025-07-05 14:23:14', 112);
INSERT INTO `qa_questions` VALUES (21, 3, '如何设计数据模型？', '在软件开发中，如何设计有效的数据模型？', '数据模型,数据库设计,软件开发', 4, 150, '2025-07-05 14:25:02', 117);
INSERT INTO `qa_questions` VALUES (22, 4, 'Python中的装饰器有哪些实际应用？', '除了基本示例，装饰器在实际项目中有哪些常见的应用场景？', 'Python,装饰器,高级特性', 3, 130, '2025-07-05 14:25:02', 120);
INSERT INTO `qa_questions` VALUES (23, 5, '如何实现用户认证和授权？', '在Web应用中，如何安全地实现用户认证和授权？', '安全,认证,授权', 5, 180, '2025-07-05 14:25:02', 125);
INSERT INTO `qa_questions` VALUES (24, 6, '如何优化算法复杂度？', '我的算法运行缓慢，如何分析和优化其时间复杂度？', '算法,复杂度分析,性能优化', 4, 160, '2025-07-05 14:25:02', 129);
INSERT INTO `qa_questions` VALUES (25, 1, '如何进行前端性能优化？', '前端应用加载缓慢，有哪些方法可以提高性能？', '前端开发,性能优化,Web性能', 3, 140, '2025-07-05 14:25:02', 132);
INSERT INTO `qa_questions` VALUES (26, 2, '如何使用Redis缓存数据？', '如何在项目中有效地使用Redis进行数据缓存？', 'Redis,缓存,数据库', 4, 150, '2025-07-05 14:25:02', 136);
INSERT INTO `qa_questions` VALUES (27, 3, '如何设计微服务架构？', '设计微服务架构时，应该考虑哪些因素和最佳实践？', '微服务,架构设计,分布式系统', 5, 190, '2025-07-05 14:25:02', 141);
INSERT INTO `qa_questions` VALUES (28, 4, '如何实现异步编程？', '在不同编程语言中，如何实现异步编程模型？', '异步编程,并发,JavaScript', 3, 130, '2025-07-05 14:25:02', 144);
INSERT INTO `qa_questions` VALUES (29, 5, '如何进行大数据处理？', '处理大量数据时，有哪些技术和框架可以使用？', '大数据,Spark,Hadoop', 4, 160, '2025-07-05 14:25:02', 148);
INSERT INTO `qa_questions` VALUES (30, 6, '如何设计用户界面？', '设计用户界面时，有哪些设计原则和最佳实践？', 'UI设计,用户体验,前端开发', 3, 140, '2025-07-05 14:25:02', 151);
INSERT INTO `qa_questions` VALUES (31, 1, '如何进行代码重构？', '现有代码难以维护，如何进行有效的代码重构？', '代码重构,软件开发,代码质量', 3, 130, '2025-07-05 14:27:27', 155);
INSERT INTO `qa_questions` VALUES (32, 2, '如何设计缓存策略？', '在应用中如何设计和实现有效的缓存策略？', '缓存,性能优化,架构设计', 4, 150, '2025-07-05 14:27:27', 159);
INSERT INTO `qa_questions` VALUES (33, 3, '如何实现消息队列？', '在分布式系统中，如何使用消息队列实现异步通信？', '消息队列,分布式系统,异步通信', 5, 180, '2025-07-05 14:27:27', 164);
INSERT INTO `qa_questions` VALUES (34, 4, '如何进行自动化部署？', '如何实现应用的自动化部署流程？', '自动化部署,CI/CD,DevOps', 3, 140, '2025-07-05 14:27:27', 167);
INSERT INTO `qa_questions` VALUES (35, 5, '如何设计高可用系统？', '如何设计和实现具有高可用性的系统？', '高可用,架构设计,容错', 4, 160, '2025-07-05 14:27:27', 171);
INSERT INTO `qa_questions` VALUES (36, 6, '如何进行系统监控？', '在生产环境中，如何监控系统性能和健康状态？', '监控,运维,系统管理', 3, 140, '2025-07-05 14:27:27', 174);
INSERT INTO `qa_questions` VALUES (37, 1, '如何进行容量规划？', '如何预测和规划系统的容量需求？', '容量规划,架构设计,性能优化', 4, 150, '2025-07-05 14:27:27', 178);
INSERT INTO `qa_questions` VALUES (38, 2, '如何实现分布式事务？', '在分布式系统中，如何保证数据的一致性？', '分布式事务,数据库,一致性', 5, 180, '2025-07-05 14:27:27', 183);
INSERT INTO `qa_questions` VALUES (39, 3, '如何进行性能调优？', '系统性能不佳时，如何进行性能调优？', '性能调优,系统优化,性能分析', 3, 140, '2025-07-05 14:27:27', 186);
INSERT INTO `qa_questions` VALUES (40, 4, '如何设计API网关？', '在微服务架构中，如何设计和实现API网关？', 'API网关,微服务,架构设计', 4, 160, '2025-07-05 14:27:27', 190);
INSERT INTO `qa_questions` VALUES (41, 1, '如何进行代码重构？', '现有代码难以维护，如何进行有效的代码重构？', '代码重构,软件开发,代码质量', 3, 130, '2025-07-05 14:29:50', 155);
INSERT INTO `qa_questions` VALUES (42, 2, '如何设计缓存策略？', '在应用中如何设计和实现有效的缓存策略？', '缓存,性能优化,架构设计', 4, 150, '2025-07-05 14:29:50', 159);
INSERT INTO `qa_questions` VALUES (43, 3, '如何实现消息队列？', '在分布式系统中，如何使用消息队列实现异步通信？', '消息队列,分布式系统,异步通信', 5, 180, '2025-07-05 14:29:50', 164);
INSERT INTO `qa_questions` VALUES (44, 4, '如何进行自动化部署？', '如何实现应用的自动化部署流程？', '自动化部署,CI/CD,DevOps', 3, 140, '2025-07-05 14:29:50', 167);
INSERT INTO `qa_questions` VALUES (45, 5, '如何设计高可用系统？', '如何设计和实现具有高可用性的系统？', '高可用,架构设计,容错', 4, 160, '2025-07-05 14:29:50', 171);
INSERT INTO `qa_questions` VALUES (46, 6, '如何进行系统监控？', '在生产环境中，如何监控系统性能和健康状态？', '监控,运维,系统管理', 3, 140, '2025-07-05 14:29:50', 174);
INSERT INTO `qa_questions` VALUES (47, 1, '如何进行容量规划？', '如何预测和规划系统的容量需求？', '容量规划,架构设计,性能优化', 4, 150, '2025-07-05 14:29:50', 178);
INSERT INTO `qa_questions` VALUES (48, 2, '如何实现分布式事务？', '在分布式系统中，如何保证数据的一致性？', '分布式事务,数据库,一致性', 5, 180, '2025-07-05 14:29:50', 183);
INSERT INTO `qa_questions` VALUES (49, 3, '如何进行性能调优？', '系统性能不佳时，如何进行性能调优？', '性能调优,系统优化,性能分析', 3, 140, '2025-07-05 14:29:50', 186);
INSERT INTO `qa_questions` VALUES (50, 4, '如何设计API网关？', '在微服务架构中，如何设计和实现API网关？', 'API网关,微服务,架构设计', 4, 160, '2025-07-05 14:29:50', 190);
INSERT INTO `qa_questions` VALUES (52, 1, '静态变量', '静态变量是存在哪里了', '编程语言', 0, 0, '2025-07-07 11:00:20', 175);

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `user_id` int NOT NULL AUTO_INCREMENT,
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `pass_word` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '加密密码',
  `email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `phone` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `user_type` enum('STUDENT','TEACHER','ADMIN') CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `register_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户姓名',
  `sex` tinyint NULL DEFAULT NULL COMMENT '性别 0女 1男 null保密',
  `bio` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '个人简介',
  PRIMARY KEY (`user_id`) USING BTREE,
  UNIQUE INDEX `username`(`user_name` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, 'user', '$2a$10$1eFJFF.gFnX.fKXq/.559e1Vr5hJ.D.12TY5y.w8TipSvoWbEhayS', 'user1@example.com', '13812345678', 'STUDENT', '', '2025-06-24 10:11:23', '无名', 0, '');
INSERT INTO `user` VALUES (2, 'teacher', '$2a$10$1eFJFF.gFnX.fKXq/.559e1Vr5hJ.D.12TY5y.w8TipSvoWbEhayS', 'teacher1@example.com', '13987654321', 'TEACHER', '', '2025-06-24 10:11:23', '王五', 0, NULL);
INSERT INTO `user` VALUES (3, 'admin', '$2a$10$1eFJFF.gFnX.fKXq/.559e1Vr5hJ.D.12TY5y.w8TipSvoWbEhayS', 'admin1@example.com', '13711112222', 'ADMIN', '', '2025-06-24 10:11:23', '老六', 0, NULL);
INSERT INTO `user` VALUES (4, '007', '$2a$10$ITkMW2gqE2t2BzMkyQRI1e/1VscXzyKIvCF3CSNC18ARu6YnpHrC.', '11@qq.com', '13800138000', 'TEACHER', 'https://lesson-online.oss-cn-beijing.aliyuncs.com/images/1752216970362_9.jpg', '2025-06-24 17:13:37', '赵灵儿', 2, '是老师');
INSERT INTO `user` VALUES (5, 'qw007', '$2a$10$LWEdaC2pgIOa.Z0omoudVeldGVBSoFDNe784rEk1EUdFkcW.FKrwK', '11@qq.com', '13800138000', 'TEACHER', '', '2025-07-01 20:06:52', '小龙女', 0, '也是老师');
INSERT INTO `user` VALUES (6, 'qw006', '$2a$10$kx1CYo2WBarDjItuz7b2fel2y0/n95FmaoWXlamt.6ql6pWEf8aou', '11@qq.com', '13800138000', 'STUDENT', '', '2025-07-04 02:37:40', '人', 1, '');
INSERT INTO `user` VALUES (7, 'user2', '$2a$10$dhvpZit1cPu6QNEbpSOOeOzVdbAS3Owm3gccTRf2YefIhWLrPUzsW', '11@qq.com', '13800138000', 'STUDENT', NULL, '2025-07-05 15:11:46', '过客', 0, '');
INSERT INTO `user` VALUES (8, 'admin2', '$2a$10$eQV8vOWXlihyOi89VYFaQu68sfS8/6RHb1/ti9MwELCXQjuzayHma', '11@qq.com', '13800138000', 'STUDENT', NULL, '2025-07-06 07:16:24', '张三', 1, '');

-- ----------------------------
-- Table structure for user_nav_menu
-- ----------------------------
DROP TABLE IF EXISTS `user_nav_menu`;
CREATE TABLE `user_nav_menu`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_type` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `menu_name` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `menu_path` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `menu_order` int NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_nav_menu
-- ----------------------------
INSERT INTO `user_nav_menu` VALUES (1, 'STUDENT', '考试', '/student/exam', 1);
INSERT INTO `user_nav_menu` VALUES (2, 'STUDENT', '论坛', '/forum', 2);
INSERT INTO `user_nav_menu` VALUES (3, 'STUDENT', '问答', '/qa', 3);
INSERT INTO `user_nav_menu` VALUES (4, 'STUDENT', '收藏', '/favorites', 4);
INSERT INTO `user_nav_menu` VALUES (5, 'STUDENT', '我的课程', '/my-courses', 5);
INSERT INTO `user_nav_menu` VALUES (6, 'STUDENT', '购物车', '/cart', 6);
INSERT INTO `user_nav_menu` VALUES (7, 'TEACHER', '创建课程', '/course-create', 1);
INSERT INTO `user_nav_menu` VALUES (8, 'TEACHER', '考试管理', '/teacher/exam', 2);
INSERT INTO `user_nav_menu` VALUES (9, 'TEACHER', '论坛', '/forum', 3);
INSERT INTO `user_nav_menu` VALUES (10, 'TEACHER', '问答', '/qa', 4);
INSERT INTO `user_nav_menu` VALUES (11, 'ADMIN', '论坛', '/forum', 1);
INSERT INTO `user_nav_menu` VALUES (12, 'ADMIN', '问答', '/qa', 2);
INSERT INTO `user_nav_menu` VALUES (13, 'ADMIN', '课程审核', '/audit', 3);

SET FOREIGN_KEY_CHECKS = 1;
